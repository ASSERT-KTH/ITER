bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  candidates);	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getNext());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getNext());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getNext());	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  cfg.getScopeRoot().getLastChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  cfg.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getString());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getString());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getString());	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  candidate);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  candidate);	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
7	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDependencies);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDependencies);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDependencies);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
8	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
9	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  params);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  params);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  params);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
10	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
11	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mappingNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
12	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mapping);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mapping);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mapping);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
13	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    approachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
14	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    approachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
15	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  matchingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  matchingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  matchingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    approachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
16	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  matchingDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  matchingDependencies);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  matchingDependencies);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    approachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
17	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  approachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  approachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  approachingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    approachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
18	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
19	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
20	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  candidate);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
21	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  inlineCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  inlineCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
22	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  Candidate.EMPTY);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  Candidate.EMPTY);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  Candidate.EMPTY);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
23	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getName(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
24	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  varName);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  varName);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  varName);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getName(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
25	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  compiler,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  compiler,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  compiler,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getName(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
26	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getName(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
27	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getName(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
28	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getName(),  compiler,  candidates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getName(),  compiler,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getName(),  compiler,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getName(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getFirstChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    reachingUses,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  t.getScopeRoot().getLastChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    reachingUses,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getLastChild(),  candidates);	  NodeTraversal.traverse(compiler,    reachingUses,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getNext());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getNext());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getNext());	  NodeTraversal.traverse(compiler,    reachingUses,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getChildCount());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getChildCount());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getChildCount());	  NodeTraversal.traverse(compiler,    reachingUses,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(t,  reachingUses,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(t,  reachingUses,  t.getScopeRoot().getLastChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(t,  reachingUses,  t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    reachingUses,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getString());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getString());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  reachingUses,  t.getScopeRoot().getString());	  NodeTraversal.traverse(compiler,    reachingUses,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
36	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
37	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
38	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def,  candidates);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def,  candidates);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
39	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def,  candidates);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def,  candidates);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
40	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates,  def);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
41	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  defMetadata,  candidates);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  defMetadata,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  defMetadata,  candidates);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
42	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingDef);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
43	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingDef);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
44	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingDef);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
45	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingDef);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
46	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingDef);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
47	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
48	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
49	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidate);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
50	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
51	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidates,  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidates,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidates,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    null);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
52	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  null,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  null,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  null,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    null);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
53	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
54	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  n);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  n);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
55	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
56	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    def);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
57	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  def,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  def,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  def,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    def);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
58	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  defMetadata);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    def);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
59	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingNode,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingNode,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingNode,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    def);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
60	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
61	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
62	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
63	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  matchingDependencies);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  matchingDependencies);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  matchingDependencies);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
64	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  def,  candidates);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  def,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  def,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
65	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
66	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def,  candidates);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    def);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
67	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  usingCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  usingCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  usingCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    def);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
68	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  defMetadata);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    def);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
69	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
70	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
71	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  varName);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  varName);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  varName);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
72	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  numUseWithinUseCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  numUseWithinUseCfgNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  numUseWithinUseCfgNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
73	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  defMetadata,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  defMetadata,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  defMetadata,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
74	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
75	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
76	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
77	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  matchingDependencies);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  matchingDependencies);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  matchingDependencies);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
78	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  startingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  startingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  startingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
80	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  fillCfgNodes(candidates));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  fillCfgNodes(candidates));  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  fillCfgNodes(candidates));	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
81	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidates,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidates,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidates,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
82	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  null,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  null,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  null,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
83	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  this);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  this);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
84	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    workingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
85	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  t.getScope(),  workingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  t.getScope(),  workingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  t.getScope(),  workingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    workingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
86	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    workingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
87	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  workingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  workingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  workingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    workingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
88	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  matchingDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  matchingDependencies);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  matchingDependencies);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    workingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
89	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  startingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  startingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  startingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    workingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
90	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(compiler,  t.getLastChild(),  cfg);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(compiler,  t.getLastChild(),  cfg);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(compiler,  t.getLastChild(),  cfg);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getLastChild(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
91	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getFirstChild(),  compiler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getFirstChild(),  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getFirstChild(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getLastChild(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
92	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getCfgNode(),  compiler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getCfgNode(),  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getCfgNode(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getLastChild(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
93	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getLastChild(),  compiler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getLastChild(),  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getLastChild(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getLastChild(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
94	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getLastChild(),  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getLastChild(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getLastChild(),  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getLastChild(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
95	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
96	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  reachingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
97	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
98	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDependencies);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDependencies);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
99	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    def);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
100	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  compiler);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    def);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
101	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  platform);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  platform);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  platform);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    def);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
102	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  defMetadata);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    def);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
103	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(compiler,    t.getScopeRoot(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
104	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(compiler,    t.getScopeRoot(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
105	[BUG]  [BUGGY]  discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(compiler,    t.getScopeRoot(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
106	[BUG]  [BUGGY]  achievingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  achievingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	achievingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(compiler,    t.getScopeRoot(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
107	[BUG]  [BUGGY]  overcomingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  overcomingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	overcomingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(compiler,    t.getScopeRoot(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
108	[BUG]  [BUGGY]  findingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  findingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	findingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(compiler,    t.getScopeRoot(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
109	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
110	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef,  candidates);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
111	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  candidate);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
112	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDepth);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDepth);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDepth);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
113	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDependent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDependent);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDependent);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
114	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    workingDef);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
115	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(workingDef,  t.getScopeRoot(),  cfg);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(workingDef,  t.getScopeRoot(),  cfg);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(workingDef,  t.getScopeRoot(),  cfg);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    workingDef);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
116	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    workingDef);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
117	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  workingDef.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  workingDef.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  workingDef.getScopeRoot(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    workingDef);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
118	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
119	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
120	[BUG]  [BUGGY]  discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
121	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().getLastChild();  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot().getLastChild();  reachingDef.analyze();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().getLastChild();  reachingDef.analyze();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
122	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().getNext();  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot().getNext();  reachingDef.analyze();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().getNext();  reachingDef.analyze();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
123	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().getCurrentNode();  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot().getCurrentNode();  reachingDef.analyze();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().getCurrentNode();  reachingDef.analyze();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
124	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().removeFirstChild();  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot().removeFirstChild();  reachingDef.analyze();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().removeFirstChild();  reachingDef.analyze();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
125	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot();  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot();  reachingDef.analyze();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot();  reachingDef.analyze();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
126	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingUses);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
127	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef,  candidates);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
128	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef,  candidate);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
129	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  startingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  startingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  startingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
130	[BUG]  [BUGGY]  FindingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  FindingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	FindingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingUses);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
131	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
132	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
133	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
134	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  inlineCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  inlineCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
135	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  null);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
136	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    def);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
137	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def,  candidate);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    def);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
138	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  defMetadata);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  defMetadata);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    def);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
139	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    def);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
140	[BUG]  [BUGGY]  NodeUtil.removeChild(cfg,  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.removeChild(cfg,  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.removeChild(cfg,  reachingDef,  candidates);	  NodeUtil.removeChild(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
141	[BUG]  [BUGGY]  NodeUtil.removeChild(cfg,  reachingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.removeChild(cfg,  reachingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.removeChild(cfg,  reachingDef,  candidate);	  NodeUtil.removeChild(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
142	[BUG]  [BUGGY]  NodeUtil.removeChild(  reachingDef,  cfg);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.removeChild(  reachingDef,  cfg);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.removeChild(  reachingDef,  cfg);	  NodeUtil.removeChild(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
143	[BUG]  [BUGGY]  NodeUtil.removeChild(compiler,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.removeChild(compiler,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.removeChild(compiler,  reachingDef);	  NodeUtil.removeChild(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
144	[BUG]  [BUGGY]  NodeUtil.removeChild(cfgNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.removeChild(cfgNode,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.removeChild(cfgNode,  reachingDef);	  NodeUtil.removeChild(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
145	[BUG]  [BUGGY]  NodeUtil.removeChild(cfg,  reachingDef,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.removeChild(cfg,  reachingDef,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.removeChild(cfg,  reachingDef,  numUseWithinUseCfgNode);	  NodeUtil.removeChild(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
146	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    def);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
147	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def,  candidate);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  def,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    def);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
148	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  DEF_METADATA,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  DEF_METADATA,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  DEF_METADATA,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    def);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
149	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.mayHaveSideEffects(cfg,  reachingDef,  candidates);	  NodeUtil.mayHaveSideEffects(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
150	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(  reachingDef,  cfg);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.mayHaveSideEffects(  reachingDef,  cfg);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.mayHaveSideEffects(  reachingDef,  cfg);	  NodeUtil.mayHaveSideEffects(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
151	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  reachingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  reachingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.mayHaveSideEffects(cfg,  reachingDef,  candidate);	  NodeUtil.mayHaveSideEffects(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
152	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(  reachingDef,  c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.mayHaveSideEffects(  reachingDef,  c);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.mayHaveSideEffects(  reachingDef,  c);	  NodeUtil.mayHaveSideEffects(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
153	[BUG]  [BUGGY]  NodeUtil.throwAsSideEffects(cfg,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.throwAsSideEffects(cfg,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.throwAsSideEffects(cfg,  reachingDef);	  NodeUtil.mayHaveSideEffects(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
154	[BUG]  [BUGGY]  NodeUtil.doHaveSideEffects(cfg,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.doHaveSideEffects(cfg,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.doHaveSideEffects(cfg,  reachingDef);	  NodeUtil.mayHaveSideEffects(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
155	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDepth,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDepth,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDepth,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingDepth);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
156	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDepth,  candidate);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDepth,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDepth,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingDepth);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
157	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingDepth);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingDepth);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingDepth);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingDepth);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
158	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDependency);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDependency);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDependency);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingDepth);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
159	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingDepth);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingDepth);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingDepth);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingDepth);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingDef,  cfg);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  reachingDef,  cfg);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  reachingDef,  cfg);	  NodeTraversal.traverse(compiler,    cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingDef,  candidates);	  NodeTraversal.traverse(compiler,    cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingDef,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  reachingDef,  cfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  reachingDef,  cfgNode);	  NodeTraversal.traverse(compiler,    cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(t,  cfg,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(t,  cfg,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(t,  cfg,  reachingDef);	  NodeTraversal.traverse(compiler,    cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(t,  reachingDef,  cfg);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(t,  reachingDef,  cfg);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(t,  reachingDef,  cfg);	  NodeTraversal.traverse(compiler,    cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(cfg,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(cfg,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(cfg,  reachingDef);	  NodeTraversal.traverse(compiler,    cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingDef,  candidate);	  NodeTraversal.traverse(compiler,    cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
167	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  candidates);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
168	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  candidate);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
169	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  mapping);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  mapping);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  mapping);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
170	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  candidates);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
171	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(mapping,  t.getScopeRoot(),  cfg);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(mapping,  t.getScopeRoot(),  cfg);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(mapping,  t.getScopeRoot(),  cfg);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
172	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  mapping);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  mapping);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  mapping);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
173	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
174	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping,  candidate);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
175	[BUG]  [BUGGY]  achievingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  achievingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	achievingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
176	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  candidate);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
177	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidate,  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidate,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidate,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
178	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
179	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  def,  candidate);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  def,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  def,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
180	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  crossing);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  crossing);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  crossing);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
181	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  varName);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  varName);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  varName);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
182	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidate,  candidates);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidate,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidate,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
183	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidate,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidate,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidate,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
184	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def,  candidate);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def,  candidate);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
185	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  def);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mapping,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
186	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mapping,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
187	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  numUseWithinUseCfgNode);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mapping,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
188	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  def);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mapping,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
189	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getNext(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getNext(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getNext(),  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getNext(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
190	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getNext(),  compiler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getNext(),  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getNext(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getNext(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  candidates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot(),  candidates);	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  t.getScopeRoot());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  cfg,  t.getScopeRoot());	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  candidate);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot(),  candidate);	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot(),  reachingDef);	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getDependencyCfgNode());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getDependencyCfgNode());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getDependencyCfgNode());	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getConstructor());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getConstructor());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getConstructor());	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode());  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getCurrentNode());	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
198	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    defMetadata,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
199	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  defMetadata,  candidates);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  defMetadata,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  defMetadata,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    defMetadata,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
200	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler,  defMetadata,  candidates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler,  defMetadata,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler,  defMetadata,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    defMetadata,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
201	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  dataArea,  defMetadata,  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  dataArea,  defMetadata,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  dataArea,  defMetadata,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    defMetadata,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
202	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  defMetadata,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  defMetadata,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  defMetadata,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    defMetadata,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
203	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses,  candidates);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses,  candidates);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
204	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  candidates);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
205	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  t.getScope(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  t.getScope(),  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  t.getScope(),  reachingDef,  candidates);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
206	[BUG]  [BUGGY]  FindingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  FindingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	FindingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
207	[BUG]  [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
208	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingUses);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
209	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidates);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
210	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidate);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
211	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  reachingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
212	[BUG]  [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidates);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
213	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  reachingDef.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  reachingDef.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  reachingDef.getScopeRoot(),  t);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
214	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def,  candidates);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    def);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
215	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def,  candidate);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    def);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
216	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    def);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
217	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  approachingDef);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  approachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  approachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
218	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  mappingContext,  candidates);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  mappingContext,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  mappingContext,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
219	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  startingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  startingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  startingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
220	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
221	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  startingDependency);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  startingDependency);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  startingDependency);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
222	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
223	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
224	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
225	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  compiler,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  compiler,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  compiler,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
226	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
227	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  parser,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  parser,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  parser,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
228	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
229	[BUG]  [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses,  candidates);	  ReachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
230	[BUG]  [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(t,  cfg.getScope(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(t,  cfg.getScope(),  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  PerhapsReachingVariableUse(t,  cfg.getScope(),  reachingDef,  candidates);	  ReachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
231	[BUG]  [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(t,  cfg,  t.getScope(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(t,  cfg,  t.getScope(),  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  PerhapsReachingVariableUse(t,  cfg,  t.getScope(),  reachingDef,  candidates);	  ReachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
232	[BUG]  [BUGGY]  FindingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  FindingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	FindingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);	  ReachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
233	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    null);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
234	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    null);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
235	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  this);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  this);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  this);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    null);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
236	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  defMetadata,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  defMetadata,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  defMetadata,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    null);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
237	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
238	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses,  candidates);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
239	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(t,  cfg,  t.getScope(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(t,  cfg,  t.getScope(),  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(t,  cfg,  t.getScope(),  reachingDef,  candidates);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
240	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  candidates);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
241	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDeps);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDeps);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDeps);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
242	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    null);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
243	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates,  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    null);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
244	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    null);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
245	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  null,  candidates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  null,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  null,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    null);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
246	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  DEF_METADATA);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  DEF_METADATA);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  DEF_METADATA);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
247	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
248	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  DEF_METADATA,  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  DEF_METADATA,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  DEF_METADATA,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
249	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  def);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
250	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  def,  candidates);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  def,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  def,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    def);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
251	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  mappingContext,  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  mappingContext,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  mappingContext,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    def);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
252	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingContext);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingContext);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingContext);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    def);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
253	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  def,  candidate);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  def,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  def,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    def);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
254	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  reachingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
255	[BUG]  [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
256	[BUG]  [BUGGY]  FindingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  FindingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	FindingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
257	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
258	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  null,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  null,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  null,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    null);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
259	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping,  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    null);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
260	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().getLastChild();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot().getLastChild();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().getLastChild();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
261	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().getNext();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot().getNext();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().getNext();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
262	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot().getCurrentNode();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().getCurrentNode();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
263	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().getCurrentChild();  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot().getCurrentChild();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().getCurrentChild();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
264	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().getParent();  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot().getParent();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().getParent();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
265	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot().getFirstChild().getNext();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().getFirstChild().getNext();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
266	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  null);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    null);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
267	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  candidates);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    null);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
268	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  reachingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
269	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  reachingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  reachingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  reachingDef,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
270	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
271	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getLastChild(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getLastChild(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getLastChild(),  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
272	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA,  candidates);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
273	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA,  candidate);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
274	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA,  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
275	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  defMaskNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  defMaskNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  defMaskNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
276	[BUG]  [BUGGY]  NodeUse  c  =  t.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getCurrentNode();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getCurrentNode();	  NodeUse    c    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
277	[BUG]  [BUGGY]  NodeUse  c  =  t.getConstructor();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getConstructor();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getConstructor();	  NodeUse    c    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
278	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeNode();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeNode();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeNode();	  NodeUse    c    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
279	[BUG]  [BUGGY]  NodeUse  c  =  t.getCurrentScope();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getCurrentScope();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getCurrentScope();	  NodeUse    c    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
280	[BUG]  [BUGGY]  NodeUse  c  =  def.getScopeRoot();  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  def.getScopeRoot();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  def.getScopeRoot();	  NodeUse    c    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
281	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
282	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingNode,  candidate);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingNode,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingNode,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
283	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
284	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getParent(),  mappingNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getParent(),  mappingNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getParent(),  mappingNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
285	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidate,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidate,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  candidate,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
286	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  fillCfgNode(candidate));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  fillCfgNode(candidate));  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  fillCfgNode(candidate));	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
287	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  numUseWithinUseCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  numUseWithinUseCfgNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  numUseWithinUseCfgNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
288	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  1);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  1);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  1);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
289	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  matchingDependencies);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  matchingDependencies);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  matchingDependencies);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
290	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  compiler,  candidates);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  compiler,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  compiler,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
291	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  defMetadata,  candidates);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  defMetadata,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  defMetadata,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
292	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  inlineCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  inlineCfgNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  inlineCfgNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
293	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
294	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    contributingDef);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
295	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    contributingDef);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
296	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  contributingDef);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  contributingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  contributingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    contributingDef);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
297	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  contributingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  contributingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  contributingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    contributingDef);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
298	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  contributingDef);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  contributingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  contributingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    contributingDef);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
299	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  def,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  def,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  def,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    def);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
300	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  def,  candidate);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  def,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  def,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    def);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
301	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  defMetadata);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    def);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
302	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mapping,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    def);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
303	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  numUseWithinUseCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  numUseWithinUseCfgNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  numUseWithinUseCfgNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
304	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  candidates,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  candidates,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  candidates,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
305	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  varName,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  varName,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  varName,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
306	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler,  numUseWithinUseCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler,  numUseWithinUseCfgNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler,  numUseWithinUseCfgNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
307	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  numUseWithinUseCfgNode,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  numUseWithinUseCfgNode,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  numUseWithinUseCfgNode,  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
308	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler,  numUseWithinUseCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler,  numUseWithinUseCfgNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler,  numUseWithinUseCfgNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
309	[BUG]  [BUGGY]  t.getScopeRoot().setFirstChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().setFirstChild();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().setFirstChild();	  t.getScopeRoot().setLastChild();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
310	[BUG]  [BUGGY]  t.getScopeRoot().removeChild(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().removeChild(t.getScopeRoot().getLastChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().removeChild(t.getScopeRoot().getLastChild());	  t.getScopeRoot().setLastChild();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
311	[BUG]  [BUGGY]  t.getScopeRoot().setLastChild(candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().setLastChild(candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().setLastChild(candidates);	  t.getScopeRoot().setLastChild();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
312	[BUG]  [BUGGY]  t.getScopeRoot().removeChild(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().removeChild(t.getScopeRoot().getFirstChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().removeChild(t.getScopeRoot().getFirstChild());	  t.getScopeRoot().setLastChild();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
313	[BUG]  [BUGGY]  t.getScopeRoot().setLastChild(n);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().setLastChild(n);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().setLastChild(n);	  t.getScopeRoot().setLastChild();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
314	[BUG]  [BUGGY]  t.getScopeRoot().reset();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().reset();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().reset();	  t.getScopeRoot().setLastChild();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
315	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    varName,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
316	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    varName,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
317	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  mappingNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  mappingNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  mappingNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    varName,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
318	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  fillCfgNode(candidates));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  fillCfgNode(candidates));  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  fillCfgNode(candidates));	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    varName,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
319	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  inlineCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  inlineCfgNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  inlineCfgNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    varName,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
320	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  compiler,  candidates);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  compiler,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getRoot(),  compiler,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getRoot(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
321	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getRoot(),  compiler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getRoot(),  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getRoot(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getRoot(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
322	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(compiler,  t.getRoot(),  cfg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(compiler,  t.getRoot(),  cfg);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(compiler,  t.getRoot(),  cfg);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getRoot(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
323	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  reachingDef,  def);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    def);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
324	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDep);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDep);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDep);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    def);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
325	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingConfig);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
326	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  candidate);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingConfig);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
327	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingConfig);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingConfig);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingConfig);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingConfig);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
328	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingConfig);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
329	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDefinitions);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDefinitions);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDefinitions);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingConfig);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
330	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidate,  candidates);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidate,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidate,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
331	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  mappingContext,  candidate);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  mappingContext,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  mappingContext,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
332	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
333	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDependencies);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDependencies);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDependencies);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
334	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  def);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
335	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  params);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  params);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  params);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
336	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
337	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mappingNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mappingNode);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
338	[BUG]  [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().replaceChild(c,  reachingDef,  candidates);	  t.getScopeRoot().replaceChild(c,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
339	[BUG]  [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().replaceChild(c,  reachingDef,  candidate);	  t.getScopeRoot().replaceChild(c,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
340	[BUG]  [BUGGY]  t.getScopeRoot().removeChild(c,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().removeChild(c,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().removeChild(c,  reachingDef);	  t.getScopeRoot().replaceChild(c,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
341	[BUG]  [BUGGY]  c.getScopeRoot().replaceChild(c,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  c.getScopeRoot().replaceChild(c,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	c.getScopeRoot().replaceChild(c,  reachingDef);	  t.getScopeRoot().replaceChild(c,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
342	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getConstructor(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
343	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  compiler,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  compiler,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  compiler,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getConstructor(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
344	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getConstructor(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
345	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(compiler,  t.getConstructor(),  cfg);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(compiler,  t.getConstructor(),  cfg);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(compiler,  t.getConstructor(),  cfg);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getConstructor(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
346	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getConstructor(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
347	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
348	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  candidate);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
349	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
350	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
351	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidate,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidate,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidate,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
352	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDemo);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDemo);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDemo);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
353	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidate,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidate,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidate,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
354	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
355	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mappingContext);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mappingContext);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mappingContext);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
356	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  compiler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
357	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
358	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
359	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
360	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
361	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
362	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
363	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  candidate);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
364	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingConfig);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingConfig);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingConfig);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
365	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  mappingContext);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  mappingContext);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScopeRoot(),  mappingContext);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
366	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  defMetadata,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  defMetadata,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  defMetadata,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
367	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
368	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
369	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  def);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
370	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  matchingDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  matchingDependencies);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  matchingDependencies);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
371	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  startingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  startingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  startingDef);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
372	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  fillCfgNodes(candidates));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  fillCfgNodes(candidates));  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  fillCfgNodes(candidates));	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
373	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  startingDependency);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  startingDependency);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  startingDependency);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
374	[BUG]  [BUGGY]  reachingDef.analyze(t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingDef.analyze(t.getScopeRoot());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingDef.analyze(t.getScopeRoot());	  reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
375	[BUG]  [BUGGY]  reachingDef.analyze(c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingDef.analyze(c);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingDef.analyze(c);	  reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
376	[BUG]  [BUGGY]  reachingDef.analyze(cfg,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingDef.analyze(cfg,  t.getScopeRoot());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingDef.analyze(cfg,  t.getScopeRoot());	  reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
377	[BUG]  [BUGGY]  reachingDef.analyze(t.getScopeRoot(),  candidates);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingDef.analyze(t.getScopeRoot(),  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingDef.analyze(t.getScopeRoot(),  candidates);	  reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
378	[BUG]  [BUGGY]  reachingDef.analyze(cfg);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingDef.analyze(cfg);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingDef.analyze(cfg);	  reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
379	[BUG]  [BUGGY]  reachingDef.inline(cfg,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingDef.inline(cfg,  t.getScopeRoot());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingDef.inline(cfg,  t.getScopeRoot());	  reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
380	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  mappingContext);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  mappingContext);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg,  cfg.getScope(),  mappingContext);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
381	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
382	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingContext);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingContext);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingContext);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
383	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext,  candidate);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
384	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
385	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  numUseWithinUseCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  numUseWithinUseCfgNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  numUseWithinUseCfgNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
386	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
387	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  candidates,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  candidates,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  candidates,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
388	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
389	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
390	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  defMetadata,  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  defMetadata,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler,  defMetadata,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
391	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild(),  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild(),  candidates);	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
392	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild(),  candidate);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild(),  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild(),  candidate);	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  cfg.getScopeRoot().getFirstChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  cfg.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
395	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
396	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  def);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
397	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(def,  t.getScope(),  cfg);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(def,  t.getScope(),  cfg);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(def,  t.getScope(),  cfg);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
398	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
399	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
400	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  startingDef.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  startingDef.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  startingDef.getScopeRoot(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
401	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  beginningDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  beginningDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  beginningDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
402	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
403	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  candidates,  useCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  candidates,  useCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  candidates,  useCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates,    def);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
404	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates,  compiler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates,  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates,  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates,    def);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
405	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  def,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  def,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  def,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates,    def);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
406	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  compiler);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates,    def);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
407	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates,  compiler);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates,  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  candidates,  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates,    def);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
408	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  DEF_METADATA,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
409	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
410	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  t.getScopeRoot());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  t.getScopeRoot());	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
411	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  def,  t.getScopeRoot());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  def,  t.getScopeRoot());	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
412	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getRoot(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
413	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  reachingDef,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  reachingDef,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.mayHaveSideEffects(cfg,  reachingDef,  numUseWithinUseCfgNode);	  NodeUtil.mayHaveSideEffects(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
414	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  reachingDef,  n);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  reachingDef,  n);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.mayHaveSideEffects(cfg,  reachingDef,  n);	  NodeUtil.mayHaveSideEffects(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
415	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  reachingDef)&&  candidates.size()  >  0;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  reachingDef)&&  candidates.size()  >  0;  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.mayHaveSideEffects(cfg,  reachingDef)&&  candidates.size()  >  0;	  NodeUtil.mayHaveSideEffects(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
416	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    def);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
417	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getNext(),  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getNext(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getNext(),  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    def);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getChildCount());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getChildCount());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getChildCount());	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
419	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
420	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
421	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
422	[BUG]  [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);	  ReachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
423	[BUG]  [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingUses);	  ReachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
424	[BUG]  [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingUses);	  ReachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
425	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates,  compiler,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates,  compiler,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates,  compiler,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
426	[BUG]  [BUGGY]  t.getScopeRoot().deplaceChild(c,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().deplaceChild(c,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().deplaceChild(c,  reachingDef);	  t.getScopeRoot().replaceChild(c,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
427	[BUG]  [BUGGY]  c.getScopeRoot().replaceChild(  reachingDef,  t);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  c.getScopeRoot().replaceChild(  reachingDef,  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	c.getScopeRoot().replaceChild(  reachingDef,  t);	  t.getScopeRoot().replaceChild(c,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
428	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
429	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  callingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  callingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  callingDef);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
430	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
431	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
432	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
433	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
434	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeNode(),  mapping);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeNode(),  mapping);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeNode(),  mapping);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
435	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
436	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
437	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  callingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  callingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  callingDef);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
438	[BUG]  [BUGGY]  t.getScopeRoot().removeChild(candidates);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().removeChild(candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().removeChild(candidates);	  t.getScopeRoot().setLastChild();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
439	[BUG]  [BUGGY]  t.getScopeRoot().replaceChild(n,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().replaceChild(n,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().replaceChild(n,  reachingDef);	  t.getScopeRoot().setLastChild();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
440	[BUG]  [BUGGY]  t.getScopeRoot().removeChild(answers);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().removeChild(answers);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().removeChild(answers);	  t.getScopeRoot().setLastChild();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
441	[BUG]  [BUGGY]  t.getScopeRoot().removeChild(selected);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().removeChild(selected);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().removeChild(selected);	  t.getScopeRoot().setLastChild();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
442	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  inlineCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  inlineCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
443	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingUses);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
444	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  candidates,  def);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
445	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mappingNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  mappingNode);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
446	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getScopeRoot().getFirstChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  n,  t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
447	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  def.getScopeRoot().getFirstChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  def.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
448	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  varName,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  varName,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  varName,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    varName,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
449	[BUG]  [BUGGY]  NodeUse  c  =  n.getScopeRoot();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  n.getScopeRoot();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  n.getScopeRoot();	  NodeUse    c    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
450	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot()  +  1;  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot()  +  1;  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot()  +  1;	  NodeUse    c    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
451	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
452	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
453	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
454	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  callingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  callingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  callingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
455	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  fillCfgNodes(candidates));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  fillCfgNodes(candidates));  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  fillCfgNodes(candidates));	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
456	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
457	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
458	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingContext,  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingContext,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingContext,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    null);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
459	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  defMetadata);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
460	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getNext(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getNext(),  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getNext(),  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
461	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getLastChild(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getLastChild(),  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getLastChild(),  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
462	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  reachingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  reachingUses);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    workingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
463	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  reachingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  reachingUses);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    workingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
464	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  callingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  callingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  callingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    workingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
465	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidates,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidates,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidates,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
466	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getName(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
467	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  compiler.getName(),  t);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  compiler.getName(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  compiler.getName(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getName(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
468	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  DEF_METADATA);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  DEF_METADATA);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  DEF_METADATA);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getName(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
469	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  defMetadata);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  defMetadata);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    def);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
470	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  usingCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  usingCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  usingCfgNode);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    def);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
471	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  fillCfgNode(n),  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  fillCfgNode(n),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  fillCfgNode(n),  def);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    def);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
472	[BUG]  [BUGGY]  NodeUse  c  =  n.getScopeRoot().getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  n.getScopeRoot().getFirstChild();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  n.getScopeRoot().getFirstChild();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
473	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defNode,  candidate);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defNode,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defNode,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
474	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidate,  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidate,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  candidate,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
475	[BUG]  [BUGGY]  NodeUtil.removeChild(candidates,  cfg,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.removeChild(candidates,  cfg,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.removeChild(candidates,  cfg,  reachingDef);	  NodeUtil.removeChild(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
476	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.removeChild(n,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.removeChild(n,  reachingDef);	  NodeUtil.removeChild(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
477	[BUG]  [BUGGY]  NodeUtil.removeChild(inlineCfgNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.removeChild(inlineCfgNode,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.removeChild(inlineCfgNode,  reachingDef);	  NodeUtil.removeChild(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
478	[BUG]  [BUGGY]  NodeUtil.removeChild(peekNodes,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.removeChild(peekNodes,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.removeChild(peekNodes,  reachingDef);	  NodeUtil.removeChild(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
479	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingUses);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
480	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
481	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingUses);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingUses);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
482	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    def);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
483	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  path,  candidates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  path,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  path,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
484	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
485	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  def);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  path,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
486	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  def,  candidates);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  def,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  def,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
487	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  platforms);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  platforms);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  platforms);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    null);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
488	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    def);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
489	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    def);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
490	[BUG]  [BUGGY]  discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    def);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
491	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef,  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef,  def);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
492	[BUG]  [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingUses);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
493	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  def);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
494	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  callingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  callingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  callingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
495	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef,  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    workingDef);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
496	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  workingDef,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    workingDef);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
497	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    contributingDef);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
498	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  inlineCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  inlineCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    contributingDef);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
499	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  compiler,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
500	[BUG]  [BUGGY]  reachingDef.analyze(candidates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingDef.analyze(candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingDef.analyze(candidates);	  reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
501	[BUG]  [BUGGY]  reachingDef.inline(candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingDef.inline(candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingDef.inline(candidates);	  reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
502	[BUG]  [BUGGY]  reachingDef.inline();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingDef.inline();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingDef.inline();	  reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
503	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  candidates);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
504	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
505	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingDepth);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
506	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingDepth);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
507	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  numUseWithinUseCfgNode);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
508	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def,  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  def,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    null);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
509	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    null);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
510	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingDef);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
511	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  callingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  callingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  callingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    approachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
512	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
513	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  def);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
514	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  def,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  def,  reachingDef);	  NodeTraversal.traverse(compiler,    cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
515	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  cfa,  reachingDef);	  NodeTraversal.traverse(compiler,    cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
516	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t,  reachingDef);	  NodeTraversal.traverse(compiler,    cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
517	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  varName,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  varName,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  varName,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
518	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeNode(),  compiler,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeNode(),  compiler,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeNode(),  compiler,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
519	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates,    def);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
520	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates,    def);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
521	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  this);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  this);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    null);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
522	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidate,  mappingNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidate,  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidate,  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
523	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates,  mappingNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates,  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates,  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
524	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  callingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  callingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  callingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
525	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
526	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  crossingDependencies);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  crossingDependencies);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  crossingDependencies);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
527	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
528	[BUG]  [BUGGY]  discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
529	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getPredicate(),  compiler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getPredicate(),  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getPredicate(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getNext(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
530	[BUG]  [BUGGY]  discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
531	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  DEF_METADATA);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  DEF_METADATA);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  DEF_METADATA);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
532	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  inlineNewDependencies);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidates,  inlineNewDependencies);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
533	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  numUses,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  numUses,  t.getScopeRoot().getLastChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  numUses,  t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    reachingUses,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
534	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  def,  t.getScopeRoot().getLastChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  def,  t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    reachingUses,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
535	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  numUseWithinUses,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  numUseWithinUses,  t.getScopeRoot().getLastChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  numUseWithinUses,  t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    reachingUses,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
536	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  t.getScopeRoot().getLastChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    reachingUses,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
537	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  null);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  null);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mapping,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
538	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    def);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
539	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeNode(),  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeNode(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeNode(),  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    def);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
540	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  def.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  def.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  def.getScopeRoot(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    def);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
541	[BUG]  [BUGGY]  NodeUse  c  =  def.getScopeRoot().getFirstChild();  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  def.getScopeRoot().getFirstChild();  reachingDef.analyze();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  def.getScopeRoot().getFirstChild();  reachingDef.analyze();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
542	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
543	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
544	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
545	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDef,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
546	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  callingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  callingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  callingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
547	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  defMetadata);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  defMetadata);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    def);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
548	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  def,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  def,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    def);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
549	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  def);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
550	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mapping);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mapping);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mapping);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    def);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
551	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  compiler.getConstructor(),  t);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  compiler.getConstructor(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  compiler.getConstructor(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getConstructor(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
552	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getConstructor(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
553	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
554	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(compiler,    t.getScopeRoot(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
555	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(compiler,    t.getScopeRoot(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
556	[BUG]  [BUGGY]  vingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  vingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	vingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(compiler,    t.getScopeRoot(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
557	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  compiler,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  compiler,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  compiler,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
558	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  compiler,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  compiler,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  workingDef,  compiler,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
559	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defNode,  compiler,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defNode,  compiler,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defNode,  compiler,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    defMetadata,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
560	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  defMetadata,  candidates);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  defMetadata,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  defMetadata,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    defMetadata,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
561	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  defNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  defNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler,  defNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    defMetadata,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
562	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  deser);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  deser);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  deser);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
563	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  compiler);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScopeRoot(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getLastChild(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
564	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    def);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
565	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  defMetadata);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  defMetadata);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
566	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    def);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
567	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  mappingNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    def);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
568	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
569	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
570	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  callingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  callingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  startingDef,  callingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
571	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defName,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defName,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defName,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
572	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mapping,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
573	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    def);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
574	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingDef);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
575	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
576	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
577	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingNode,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingNode,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
578	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  mappingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
579	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates,    def);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
580	[BUG]  [BUGGY]  discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates,    def);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
581	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  candidates,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    candidates,    def);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
582	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  null);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
583	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  startingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  startingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  startingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
584	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  inlineCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  inlineCfgNode);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
585	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  crossingDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  crossingDependencies);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mappingNode,  crossingDependencies);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
586	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
587	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingContext,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
588	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingUses);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    approachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
589	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  connectingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  connectingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  connectingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    approachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
590	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  callingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  callingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  approachingDef,  callingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    approachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
591	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  crossingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  crossingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  crossingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
592	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef,  candidate);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef,  candidate);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
593	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidate,  DEF_METADATA);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidate,  DEF_METADATA);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidate,  DEF_METADATA);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
594	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  startingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  startingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defMetadata,  startingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
595	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot(),  t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    reachingUses,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
596	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getScopeRoot().getLastChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  n,  t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    reachingUses,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
597	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot(),  t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    reachingUses,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
598	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  t.getScope(),  workingDef,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  t.getScope(),  workingDef,  reachingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  t.getScope(),  workingDef,  reachingUses);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    workingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
599	[BUG]  [BUGGY]  NodeUtil.removeChild(peekNode(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.removeChild(peekNode(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.removeChild(peekNode(),  reachingDef);	  NodeUtil.removeChild(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
600	[BUG]  [BUGGY]  NodeUtil.removeChild(endingDef,  cfg);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.removeChild(endingDef,  cfg);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.removeChild(endingDef,  cfg);	  NodeUtil.removeChild(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
601	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getSource(),  compiler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getSource(),  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getSource(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getNext(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
602	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef,  null);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
603	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef,  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  reachingDef,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
604	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
605	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(def,  t.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(def,  t.getScope(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(def,  t.getScope(),  def);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
606	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getName(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
607	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  workingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  workingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  workingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getName(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
608	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  mappingContext);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  mappingContext);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  mappingContext);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getName(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
609	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  candidate,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
610	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defPrettyPrinter,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defPrettyPrinter,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defPrettyPrinter,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    defMetadata,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
611	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
612	[BUG]  [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  startingDef,  reachingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
613	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  reachingDef);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
614	[BUG]  [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingDef);	  ingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
615	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  null,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  null,  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  null,  defMetadata);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    null);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
616	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  this);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  this);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    null);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
617	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  speakingDef,  compiler,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  speakingDef,  compiler,  numUseWithinUseCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  speakingDef,  compiler,  numUseWithinUseCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
618	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getRoot(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
619	[BUG]  [BUGGY]  vingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  vingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	vingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mapping);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
620	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
621	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  callingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
622	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDependency);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDependency);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDependency);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
623	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  varName,  candidates);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  varName,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  varName,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
624	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  t,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  t,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getName(),  t,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    compiler,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
625	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  defMetadata);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
626	[BUG]  [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  startingDef);	  ReachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
627	[BUG]  [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDeps);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDeps);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  reachingDef,  matchingDeps);	  ReachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    reachingDef,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
628	[BUG]  [BUGGY]  findingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  findingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	findingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
629	[BUG]  [BUGGY]  vingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  vingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	vingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
630	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  null,  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  null,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  null,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    null);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
631	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  null,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  null,  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  null,  defMetadata);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    null);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
632	[BUG]  [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingDef,  startingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingDef,  startingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().replaceChild(c,  reachingDef,  startingDef);	  t.getScopeRoot().replaceChild(c,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
633	[BUG]  [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().replaceChild(c,  reachingDef,  reachingDef);	  t.getScopeRoot().replaceChild(c,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
634	[BUG]  [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingDef,  fillCandiates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().replaceChild(c,  reachingDef,  fillCandiates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().replaceChild(c,  reachingDef,  fillCandiates);	  t.getScopeRoot().replaceChild(c,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
635	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  defMetadata);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mapping,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
636	[BUG]  [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  null,  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  null,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  PerhapsReachingVariableUse(cfg,  t.getScope(),  mapping,  null,  candidates);	  reachingUses    =    new    PerhapsReachingVariableUse(cfg,    t.getScope(),    mapping,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
637	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot().removeFirstChild();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().removeFirstChild();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
638	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().cloneTree();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot().cloneTree();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().cloneTree();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
639	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeRoot().getFirstChild();  reachingDef.analyze(cfg);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeRoot().getFirstChild();  reachingDef.analyze(cfg);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeRoot().getFirstChild();  reachingDef.analyze(cfg);	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
640	[BUG]  [BUGGY]  AnnotatedNode  c  =  t.getScopeRoot().getFirstChild();  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  AnnotatedNode  c  =  t.getScopeRoot().getFirstChild();  reachingDef.analyze();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	AnnotatedNode  c  =  t.getScopeRoot().getFirstChild();  reachingDef.analyze();	  NodeUse    c    =    t.getScopeRoot().getFirstChild();    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
641	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  candidates,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  candidates,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  candidates,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
642	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  reachingDef,  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  reachingDef,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  reachingDef,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
643	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  path,  candidates);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  path,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext,  path,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
644	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  varName,  candidates);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  varName,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  varName,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
645	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates,  path);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates,  path);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidates,  path);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    path,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
646	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  candidate,  numUseWithinUseCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  candidate,  numUseWithinUseCfgNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  candidate,  numUseWithinUseCfgNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
647	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  numUseWithinUseCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  numUseWithinUseCfgNode,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  numUseWithinUseCfgNode,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
648	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  compiler,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    compiler,    numUseWithinUseCfgNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
649	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  null,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  null,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  null,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
650	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  defMetadata);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    null);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
651	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  candidate);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  candidate);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  path,  candidate);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
652	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  reachingDef,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
653	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  defMetadata);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getParent(),  defMetadata);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getParent(),    def);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
654	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  reachingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  reachingUses);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  reachingUses);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    null);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
655	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  reachingDef,  null,  defMetadata);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    reachingDef,    null);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
656	[BUG]  [BUGGY]  StartingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  StartingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	StartingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(compiler,    t.getScopeRoot(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
657	[BUG]  [BUGGY]  startingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  startingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	startingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  t);	  reachingUses    =    new    MaybeReachingVariableUse(compiler,    t.getScopeRoot(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
658	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  t.getScopeRoot(),  workingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  t.getScopeRoot(),  workingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  t.getScopeRoot(),  workingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    workingDef);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
659	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  null);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
660	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  def,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    def);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
661	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  contributingDef,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    contributingDef);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
662	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingDef,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingDef,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingDef,  def);	  NodeTraversal.traverse(compiler,    cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
663	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingDef,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingDef,  inlineCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingDef,  inlineCfgNode);	  NodeTraversal.traverse(compiler,    cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
664	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(varName,  t.getScope(),  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(varName,  t.getScope(),  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(varName,  t.getScope(),  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    varName,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
665	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  3);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  3);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  3);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    varName,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
666	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  null,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  null,  candidates);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  null,  candidates);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    varName,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
667	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  varName,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    varName,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
668	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  reachingDef);	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
669	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(  reachingDef,  cfg);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.redeclareVarsInsideBranch(  reachingDef,  cfg);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.redeclareVarsInsideBranch(  reachingDef,  cfg);	  NodeUtil.mayHaveSideEffects(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
670	[BUG]  [BUGGY]  NodeUtil.mayEffectMutableState(cfg,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUtil.mayEffectMutableState(cfg,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUtil.mayEffectMutableState(cfg,  reachingDef);	  NodeUtil.mayHaveSideEffects(cfg,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
671	[BUG]  [BUGGY]  vingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  vingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	vingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
672	[BUG]  [BUGGY]  discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	discoveringUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingContext);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
673	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(t,  cfg.getScope(),  mappingContext,  def);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    mappingContext);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
674	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild(),  reachingDef);	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
675	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild(),  def);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild(),  def);	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
676	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  def,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mapping,  def,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mapping,    def);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
677	[BUG]  [BUGGY]  t.getScopeRoot().removeChild(t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().removeChild(t.getScopeRoot());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().removeChild(t.getScopeRoot());	  t.getScopeRoot().setLastChild();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
678	[BUG]  [BUGGY]  t.getScopeRoot().setCurrentNode(n);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().setCurrentNode(n);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().setCurrentNode(n);	  t.getScopeRoot().setLastChild();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
679	[BUG]  [BUGGY]  t.getScopeRoot().replaceChild(t,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().replaceChild(t,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().replaceChild(t,  reachingDef);	  t.getScopeRoot().setLastChild();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
680	[BUG]  [BUGGY]  t.getScopeRoot().inline(cfg,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  t.getScopeRoot().inline(cfg,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	t.getScopeRoot().inline(cfg,  reachingDef);	  t.getScopeRoot().setLastChild();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
681	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  reachingDef,  reachingDef);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
682	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  usingCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  usingCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  usingCfgNode);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
683	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  crossingDeps);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  crossingDeps);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingNode,  crossingDeps);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingNode,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
684	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidate,  mappingContext);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidate,  mappingContext);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  candidate,  mappingContext);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingContext,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
685	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingConfig);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
686	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingConfig);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
687	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingConfig,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingConfig);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
688	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getConstructor(),  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getConstructor(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
689	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getCompiler(),  compiler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getCompiler(),  compiler);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getCompiler(),  compiler);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getConstructor(),    compiler);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
690	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDepth,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDepth,  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  mappingDepth,  def);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    mappingDepth);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
691	[BUG]  [BUGGY]  NodeUse  c  =  t.getScopeOwner();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeUse  c  =  t.getScopeOwner();  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeUse  c  =  t.getScopeOwner();	  NodeUse    c    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
692	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  startingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  startingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot(),  startingDef);	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
693	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  approachingDef);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  approachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot(),  approachingDef);	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
694	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defName,  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defName,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  defName,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    null);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
695	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  null,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  null,  defMetadata);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEF_METADATA,  null,  defMetadata);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    DEF_METADATA,    null);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
696	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
697	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  callingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  callingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  callingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
698	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  startingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  startingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  mappingNode,  startingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    mappingNode);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
699	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEFL_METADATA);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEFL_METADATA);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  DEFL_METADATA);	  reachingUses    =    new    MaybeReachingVariableUse(t,    cfg.getScope(),    DEF_METADATA);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
700	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates,  reachingDef);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates,  reachingDef);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  def,  candidates,  reachingDef);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
701	[BUG]  [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(def,  t.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  ReachingUses  =  new  MaybeReachingVariableUse(def,  t.getScope(),  def);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	ReachingUses  =  new  MaybeReachingVariableUse(def,  t.getScope(),  def);	  ReachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScope(),    def);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
702	[BUG]  [BUGGY]  reachingDef.inline(t.getScopeRoot(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingDef.inline(t.getScopeRoot(),  numUseWithinCfgNode);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingDef.inline(t.getScopeRoot(),  numUseWithinCfgNode);	  reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
703	[BUG]  [BUGGY]  reachingDef.inline(t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingDef.inline(t.getScopeRoot());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingDef.inline(t.getScopeRoot());	  reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
704	[BUG]  [BUGGY]  reachingDef.inline(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingDef.inline(t.getScopeRoot().getLastChild());  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingDef.inline(t.getScopeRoot().getLastChild());	  reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
705	[BUG]  [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());        [BUGGY]  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  null);  [BUGGY]      reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot(),  reachingDef,  null);	  reachingUses    =    new    MaybeReachingVariableUse(cfg,    t.getScopeRoot(),    reachingDef);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
