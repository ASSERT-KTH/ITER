bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] inlinedNewDependencies.add(t.getScope().getVar(c.varName)); [FE] AssertionFailedError [CONTEXT] c.inlineVariable();        if (!c.defMetadata.depends.isEmpty()) { [BUGGY] inlinedNewDependencies.add(t.getScope().getVar(c.varName)); [BUGGY] } } } } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.48038446141526137	166	166	3	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] c.inlineVariable();        if (!c.defMetadata.depends.isEmpty()) { [BUGGY] [BUGGY] inlinedNewDependencies.add(t.getScope().getVar(c.varName)); } } } } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.48038446141526137	166	166	3	add	
3	[BUG] [BUGGY] c.inlineVariable(); [FE] AssertionFailedError [CONTEXT]   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { if (c.canInline()) { [BUGGY] c.inlineVariable(); [BUGGY]         if (!c.defMetadata.depends.isEmpty()) { inlinedNewDependencies.add(t.getScope().getVar(c.varName)); [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { if (c.canInline()) { [BUGGY] [BUGGY] c.inlineVariable();        if (!c.defMetadata.depends.isEmpty()) { inlinedNewDependencies.add(t.getScope().getVar(c.varName)); [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	add	
5	[BUG] [BUGGY] if (!c.defMetadata.depends.isEmpty()) { [FE] AssertionFailedError [CONTEXT] if (c.canInline()) { c.inlineVariable();        [BUGGY] if (!c.defMetadata.depends.isEmpty()) { [BUGGY] inlinedNewDependencies.add(t.getScope().getVar(c.varName)); } } } } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (c.canInline()) { c.inlineVariable();        [BUGGY] [BUGGY] if (!c.defMetadata.depends.isEmpty()) { inlinedNewDependencies.add(t.getScope().getVar(c.varName)); } } } } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	add	
7	[BUG] [BUGGY] for (Node cur = p.getParent().getFirstChild(); cur != p; [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { [BUGGY] for (Node cur = p.getParent().getFirstChild(); cur != p; [BUGGY] cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c cfgNode cur def defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent Definition def defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.28867513459481287	524	524	3	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { [BUGGY] [BUGGY] for (Node cur = p.getParent().getFirstChild(); cur != p; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c cfgNode cur def defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent Definition def defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.28867513459481287	524	524	3	add	
9	[BUG] [BUGGY] for (Node p = n; p != expressionRoot; p = p.getParent()) { [FE] AssertionFailedError [CONTEXT] private static boolean checkRightOf( Node n, Node expressionRoot, Predicate<Node> predicate) { [BUGGY] for (Node p = n; p != expressionRoot; p = p.getParent()) { [BUGGY] for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkRightOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c cfgNode cur def defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent Definition def defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkRightOf( Node n, Node expressionRoot, Predicate<Node> predicate) { [BUGGY] [BUGGY] for (Node p = n; p != expressionRoot; p = p.getParent()) { for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkRightOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c cfgNode cur def defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent Definition def defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	add	
11	[BUG] [BUGGY] for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { [FE] AssertionFailedError [CONTEXT] private static boolean checkRightOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n; p != expressionRoot; p = p.getParent()) { [BUGGY] for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { [BUGGY] if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkRightOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c cfgNode cur def defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent Definition def defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkRightOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n; p != expressionRoot; p = p.getParent()) { [BUGGY] [BUGGY] for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkRightOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c cfgNode cur def defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent Definition def defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	add	
13	[BUG] [BUGGY] return false; [FE] AssertionFailedError [CONTEXT] private static boolean checkRightOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n; p != expressionRoot; p = p.getParent()) { for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } [BUGGY] return false; [BUGGY] } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkRightOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c cfgNode cur def defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent Definition def defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	510	510	3	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkRightOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n; p != expressionRoot; p = p.getParent()) { for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } [BUGGY] [BUGGY] return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkRightOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c cfgNode cur def defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent Definition def defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	510	510	3	add	
15	[BUG] [BUGGY] for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { [BUGGY] for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { [BUGGY] for (Node cur = p.getParent().getFirstChild(); cur != p; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c cfgNode cur def defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent Definition def defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	523	523	3	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { [BUGGY] [BUGGY] for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { for (Node cur = p.getParent().getFirstChild(); cur != p; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c cfgNode cur def defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent Definition def defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	523	523	3	add	
17	[BUG] [BUGGY] return false; [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { for (Node cur = p.getParent().getFirstChild(); cur != p; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } [BUGGY] return false; [BUGGY] } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c cfgNode cur def defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent Definition def defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean checkLeftOf( Node n, Node expressionRoot, Predicate<Node> predicate) { for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) { for (Node cur = p.getParent().getFirstChild(); cur != p; cur = cur.getNext()) { if (predicate.apply(cur)) { return true; } } } [BUGGY] [BUGGY] return false; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] checkLeftOf [RETURN_TYPE] boolean  Node n Node expressionRoot Node> predicate [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c cfgNode cur def defParent expressionRoot externs input lhs n p parant parent rhs root use useCfgNode useParent Definition def defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String name varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	531	531	3	add	
19	[BUG] [BUGGY] if (c.canInline()) { [FE] AssertionFailedError [CONTEXT]   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { [BUGGY] if (c.canInline()) { [BUGGY] c.inlineVariable();        if (!c.defMetadata.depends.isEmpty()) { [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { [BUGGY] [BUGGY] if (c.canInline()) { c.inlineVariable();        if (!c.defMetadata.depends.isEmpty()) { [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	add	
22	[BUG] [BUGGY] public FlowSensitiveInlineVariables(AbstractCompiler compiler) { [FE] AssertionFailedError [CONTEXT] [BUGGY] public FlowSensitiveInlineVariables(AbstractCompiler compiler) { [BUGGY] this.compiler = compiler; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node def use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	120	120	3	replace	
23	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] public FlowSensitiveInlineVariables(AbstractCompiler compiler) { this.compiler = compiler; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node def use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	120	120	3	add	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final AbstractCompiler compiler; [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4  [VARIABLES] 	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	77	77	3	replace	
25	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final AbstractCompiler compiler; [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4  [VARIABLES] 	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	77	77	3	add	
26	[BUG] [BUGGY] this.compiler = compiler; [FE] AssertionFailedError [CONTEXT] public FlowSensitiveInlineVariables(AbstractCompiler compiler) { [BUGGY] this.compiler = compiler; [BUGGY] } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node def use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	121	121	3	replace	
27	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public FlowSensitiveInlineVariables(AbstractCompiler compiler) { [BUGGY] [BUGGY] this.compiler = compiler; } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node def use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	121	121	3	add	
28	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public FlowSensitiveInlineVariables(AbstractCompiler compiler) { this.compiler = compiler; [BUGGY] } [BUGGY]  [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node def use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	
29	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public FlowSensitiveInlineVariables(AbstractCompiler compiler) { this.compiler = compiler; [BUGGY] [BUGGY] } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node def use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	add	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private MaybeReachingVariableUse reachingUses; [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4  [VARIABLES] 	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	86	86	3	replace	
31	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private MaybeReachingVariableUse reachingUses; [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4  [VARIABLES] 	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	86	86	3	add	
32	[BUG] [BUGGY] if (t.inGlobalScope()) { [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { [BUGGY] if (t.inGlobalScope()) { [BUGGY] return; // Don't even brother. All global variables are likely escaped. } if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true); [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	
33	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { [BUGGY] [BUGGY] if (t.inGlobalScope()) { return; // Don't even brother. All global variables are likely escaped. } if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true); [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	add	
34	[BUG] [BUGGY] return; // Don't even brother. All global variables are likely escaped. } [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { if (t.inGlobalScope()) { [BUGGY] return; // Don't even brother. All global variables are likely escaped. } [BUGGY] } if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	
35	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { if (t.inGlobalScope()) { [BUGGY] [BUGGY] return; // Don't even brother. All global variables are likely escaped. } } if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	add	
36	[BUG] [BUGGY] if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { if (t.inGlobalScope()) { return; // Don't even brother. All global variables are likely escaped. } [BUGGY] if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <  t.getScope().getVarCount()) { [BUGGY] t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	
37	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { if (t.inGlobalScope()) { return; // Don't even brother. All global variables are likely escaped. } [BUGGY] [BUGGY] if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <  t.getScope().getVarCount()) { t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	add	
38	[BUG] [BUGGY] ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true); [FE] AssertionFailedError [CONTEXT] if (t.inGlobalScope()) { return; // Don't even brother. All global variables are likely escaped. } if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { return; }  [BUGGY] ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true); [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); candidates = Lists.newLinkedList();    [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	replace	
39	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (t.inGlobalScope()) { return; // Don't even brother. All global variables are likely escaped. } if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { return; }  [BUGGY] [BUGGY] ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); candidates = Lists.newLinkedList();    [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	137	137	3	add	
40	[BUG] [BUGGY] Preconditions.checkState(t.getScopeRoot().isFunction()); [FE] AssertionFailedError [CONTEXT] } if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  [BUGGY] Preconditions.checkState(t.getScopeRoot().isFunction()); [BUGGY] cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild()); [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	
41	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  [BUGGY] [BUGGY] Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild()); [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	add	
42	[BUG] [BUGGY] cfa.process(null, t.getScopeRoot().getLastChild()); [FE] AssertionFailedError [CONTEXT] if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  Preconditions.checkState(t.getScopeRoot().isFunction()); [BUGGY] cfa.process(null, t.getScopeRoot().getLastChild()); [BUGGY] cfg = cfa.getCfg(); reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	
43	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  Preconditions.checkState(t.getScopeRoot().isFunction()); [BUGGY] [BUGGY] cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	add	
44	[BUG] [BUGGY] cfg = cfa.getCfg(); [FE] AssertionFailedError [CONTEXT] if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); [BUGGY] cfg = cfa.getCfg(); [BUGGY] reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());   [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	141	141	3	replace	
45	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); [BUGGY] [BUGGY] cfg = cfa.getCfg(); reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());   [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	141	141	3	add	
46	[BUG] [BUGGY] reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); [FE] AssertionFailedError [CONTEXT] t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); [BUGGY] reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); [BUGGY] reachingDef.analyze(); candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	replace	
47	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] t.getScope().getVarCount()) { return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); [BUGGY] [BUGGY] reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	add	
48	[BUG] [BUGGY] reachingDef.analyze(); [FE] AssertionFailedError [CONTEXT] return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); [BUGGY] reachingDef.analyze(); [BUGGY] candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	143	143	3	replace	
49	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return; }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); [BUGGY] [BUGGY] reachingDef.analyze(); candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	143	143	3	add	
50	[BUG] [BUGGY] candidates = Lists.newLinkedList(); [FE] AssertionFailedError [CONTEXT] }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); [BUGGY] candidates = Lists.newLinkedList(); [BUGGY]    new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	144	144	3	replace	
51	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }  ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);  Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); [BUGGY] [BUGGY] candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	144	144	3	add	
52	[BUG] [BUGGY] new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild()); [FE] AssertionFailedError [CONTEXT]  Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); candidates = Lists.newLinkedList();   [BUGGY] new NodeTraversal(compiler, new GatherCandiates()).traverse(  t.getScopeRoot().getLastChild()); [BUGGY] t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { if (c.canInline()) { c.inlineVariable();   [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	
53	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  Preconditions.checkState(t.getScopeRoot().isFunction()); cfa.process(null, t.getScopeRoot().getLastChild()); cfg = cfa.getCfg(); reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); candidates = Lists.newLinkedList();   [BUGGY] [BUGGY] new NodeTraversal(compiler, new GatherCandiates()).traverse(  t.getScopeRoot().getLastChild()); t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { if (c.canInline()) { c.inlineVariable();   [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	add	
54	[BUG] [BUGGY] reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); [FE] AssertionFailedError [CONTEXT] reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  [BUGGY] reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); [BUGGY] reachingUses.analyze(); for (Candidate c : candidates) { if (c.canInline()) { c.inlineVariable();       [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	replace	
55	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler); reachingDef.analyze(); candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  [BUGGY] [BUGGY] reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); for (Candidate c : candidates) { if (c.canInline()) { c.inlineVariable();       [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	152	152	3	add	
56	[BUG] [BUGGY] reachingUses.analyze(); [FE] AssertionFailedError [CONTEXT] reachingDef.analyze(); candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); [BUGGY] reachingUses.analyze(); [BUGGY] for (Candidate c : candidates) { if (c.canInline()) { c.inlineVariable();        [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	153	153	3	replace	
57	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] reachingDef.analyze(); candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); [BUGGY] [BUGGY] reachingUses.analyze(); for (Candidate c : candidates) { if (c.canInline()) { c.inlineVariable();        [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	153	153	3	add	
58	[BUG] [BUGGY] for (Candidate c : candidates) { [FE] AssertionFailedError [CONTEXT] candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); [BUGGY] for (Candidate c : candidates) { [BUGGY] if (c.canInline()) { c.inlineVariable();         [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	154	154	3	replace	
59	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] candidates = Lists.newLinkedList();   new NodeTraversal(compiler, new GatherCandiates()).traverse( t.getScopeRoot().getLastChild());  reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler); reachingUses.analyze(); [BUGGY] [BUGGY] for (Candidate c : candidates) { if (c.canInline()) { c.inlineVariable();         [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Candidate c Set inlinedNewDependencies NodeTraversal t Node c def n use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE AbstractCompiler compiler ControlFlowAnalysis cfa boolean ControlFlowGraph cfg List candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	154	154	3	add	
62	[BUG] [BUGGY] (new NodeTraversal(compiler, this)).traverseRoots(externs, root); [FE] AssertionFailedError [CONTEXT] public void process(Node externs, Node root) { [BUGGY] (new NodeTraversal(compiler, this)).traverseRoots(externs, root); [BUGGY] } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c def externs n root use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	177	177	3	replace	
63	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void process(Node externs, Node root) { [BUGGY] [BUGGY] (new NodeTraversal(compiler, this)).traverseRoots(externs, root); } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c def externs n root use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	177	177	3	add	
64	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public void process(Node externs, Node root) { (new NodeTraversal(compiler, this)).traverseRoots(externs, root); [BUGGY] } [BUGGY]  [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c def externs n root use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	178	178	3	replace	
65	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void process(Node externs, Node root) { (new NodeTraversal(compiler, this)).traverseRoots(externs, root); [BUGGY] [BUGGY] } [CLASS] FlowSensitiveInlineVariables 1 GatherCandiates 1 Candidate 1 2 3 4 [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler Set inlinedNewDependencies boolean ControlFlowGraph cfg Node c def externs n root use useCfgNode Definition defMetadata MaybeReachingVariableUse reachingUses List candidates MustBeReachingVariableDef reachingDef String varName int numUseWithinUseCfgNode Predicate SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	178	178	3	add	
