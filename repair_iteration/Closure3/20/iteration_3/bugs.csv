bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfg.isConstructor());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfg.isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfg.isConstructor());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern()  &&  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern()  &&  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExtern()  &&  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isExtern()    ||    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isExtern()    ||    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isExtern()    ||    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isExtern()    ||    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isExtern()    ||    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isExpr());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isExpr());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isExpr());	  Preconditions.checkState(t.getScopeRoot().isExtern()    ||    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  candidates);	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  candidate);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  candidate);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  candidate);	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getNext());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getNext());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getNext());	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  cfa.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  cfa.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  def);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  def);	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild()  }  );  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild()  }  );  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild()  }  );	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild().getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild().getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild().getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isConstructor(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isConstructor(),  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isConstructor(),  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction()  ||  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction()  ||  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction()  ||  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefine());	  Preconditions.checkState(!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine());	  Preconditions.checkState(!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine(),  cfa);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefine(),  cfa);	  Preconditions.checkState(!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t,  cfg));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t,  cfg));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t,  cfg));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,    cfg));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot(),  cfg));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot(),  cfg));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot(),  cfg));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,    cfg));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t,  cfg));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t,  cfg));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t,  cfg));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,    cfg));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t.getScopeRoot(),  cfg));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t.getScopeRoot(),  cfg));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t.getScopeRoot(),  cfg));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,    cfg));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg,  cfg));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg,  cfg));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg,  cfg));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,    cfg));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isDefine(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isDefine(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isDefine(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isDefine(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefine(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isDefine(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  numUseWithinCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  numUseWithinCfgNode);	  Preconditions.checkState(t.getScopeRoot().isDefine(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  def);	  Preconditions.checkState(t.getScopeRoot().isDefine(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  null);	  Preconditions.checkState(t.getScopeRoot().isDefine(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  numUseWithinUseCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  numUseWithinUseCfgNode);	  Preconditions.checkState(t.getScopeRoot().isDefine(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine()  ||  t.getScopeRoot().getFirstChild().isDefine());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine()  ||  t.getScopeRoot().getFirstChild().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine()  ||  t.getScopeRoot().getFirstChild().isDefine());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().isDefine());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().isDefine());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine()  ||  t.getScopeRoot().getLastChild().isDefine());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine()  ||  t.getScopeRoot().getLastChild().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine()  ||  t.getScopeRoot().getLastChild().isDefine());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isDefine());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild().isDefine());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine(),  cfa);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine(),  cfa);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine(),  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine(),  def);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  &&!t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  &&!t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  &&!t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined()    ||!t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined()    ||!t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDefined()  +  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDefined()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDefined()  +  1);	  Preconditions.checkState(t.getScopeRoot().isDefined()    ||!t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDeclared());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDeclared());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDeclared());	  Preconditions.checkState(t.getScopeRoot().isDefined()    ||!t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getNext().isFunction());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getNext().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getNext().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
69	[BUG]  [BUGGY]  cfg  =  cfa.getCfg();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfg  =  cfa.getCfg();  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfg  =  cfa.getCfg();	  cfa.process(null,    t.getScopeRoot().getLastChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
70	[BUG]  [BUGGY]  if(t.getScopeRoot().getFirstChild()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot().getFirstChild()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot().getFirstChild()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getLastChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
71	[BUG]  [BUGGY]  if(cfg!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(cfg!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(cfg!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getLastChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
72	[BUG]  [BUGGY]  if(t.getScopeRoot().getFirstChild()  ==  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot().getFirstChild()  ==  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot().getFirstChild()  ==  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getLastChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
73	[BUG]  [BUGGY]  null  =  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  null  =  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	null  =  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();	  cfa.process(null,    t.getScopeRoot().getLastChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
74	[BUG]  [BUGGY]  if(t.getScopeRoot().getFirstChild()  instanceof  Number)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot().getFirstChild()  instanceof  Number)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot().getFirstChild()  instanceof  Number)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getLastChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isExtern(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isExtern(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isExtern(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isExtern(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isExtern(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isExtern(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isExtern(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isExtern(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isExtern(),  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isExtern(),  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isExtern(),  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isExtern(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa,  numUseWithinCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa,  numUseWithinCfgNode);	  Preconditions.checkState(t.getScopeRoot().isExtern(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa,  cfg);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa,  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa,  cfg);	  Preconditions.checkState(t.getScopeRoot().isExtern(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern()  ||  cfa.isExtern());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern()  ||  cfa.isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExtern()  ||  cfa.isExtern());	  Preconditions.checkState(t.getScopeRoot().isExtern(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isExpr());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isExpr());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isExpr());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction()  ||  t.getScopeRoot().isFunction(),  t);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction()  ||  t.getScopeRoot().isFunction(),  t);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction()  ||  t.getScopeRoot().isFunction(),  t);	  Preconditions.checkState(cfa.getScopeRoot().isFunction(),    t);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isFunction(),  t);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isFunction(),  t);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!cfa.getScopeRoot().isFunction(),  t);	  Preconditions.checkState(cfa.getScopeRoot().isFunction(),    t);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor(),  t);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor(),  t);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isConstructor(),  t);	  Preconditions.checkState(cfa.getScopeRoot().isFunction(),    t);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()).isFunction(),  t);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()).isFunction(),  t);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()).isFunction(),  t);	  Preconditions.checkState(cfa.getScopeRoot().isFunction(),    t);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(cfa.getScopeRoot().isFunction(),    t);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa.getScopeRoot());	  Preconditions.checkState(cfa.getScopeRoot().isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isFunction(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isFunction(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!cfa.getScopeRoot().isFunction(),  t.getScopeRoot());	  Preconditions.checkState(cfa.getScopeRoot().isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(cfa.getScopeRoot().isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa.getCfgNode());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa.getCfgNode());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa.getCfgNode());	  Preconditions.checkState(cfa.getScopeRoot().isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isConstructor(),  t.getScopeRoot());	  Preconditions.checkState(cfa.getScopeRoot().isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.VAR);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.VAR);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.VAR);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.VAR);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.VAR);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.VAR);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.VAR);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.VAR);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FOR  ||  t.getScopeRoot().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FOR  ||  t.getScopeRoot().getType()  ==  Token.VAR);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FOR  ||  t.getScopeRoot().getType()  ==  Token.VAR);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDeclaration());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDeclaration());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isInitializingDeclaration());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isInitializingDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isInitializingDeclaration());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
108	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild(),  candidates);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(null,  t.getScopeRoot().getFirstChild(),  candidates);	  cfa.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
109	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(t,  t.getScopeRoot().getFirstChild());	  cfa.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg,  cfg));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg,  cfg));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg,  cfg));	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(cfg.getScopeRoot().getFirstChild().isAssignableFrom(t));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfg.getScopeRoot().getFirstChild().isAssignableFrom(t));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfg.getScopeRoot().getFirstChild().isAssignableFrom(t));	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isAssignableFrom(cfg));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isAssignableFrom(cfg));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild().isAssignableFrom(cfg));	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg),  cfa);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg),  cfa);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isAssignableFrom(t));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isAssignableFrom(t));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isAssignableFrom(t));	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  ||  cfa.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  ||  cfa.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  ||  cfa.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!cfa.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  ||  cfa.getScopeRoot().isDependencyOp());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  ||  cfa.getScopeRoot().isDependencyOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  ||  cfa.getScopeRoot().isDependencyOp());	  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  ||  cfa.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  ||  cfa.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  ||  cfa.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  ||  cfa.getScopeRoot().isDeclaration());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  ||  cfa.getScopeRoot().isDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  ||  cfa.getScopeRoot().isDeclaration());	  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine()  ||  cfa.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine()  ||  cfa.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefine()  ||  cfa.getScopeRoot().isDefine());	  Preconditions.checkState(cfa.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!cfa.getScopeRoot().isDefine());	  Preconditions.checkState(cfa.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine(),  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefine(),  def);	  Preconditions.checkState(cfa.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine()  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefine()  +  1);	  Preconditions.checkState(cfa.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isLocal());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isLocal());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionAnalysis());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionAnalysis());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionAnalysis());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isLocal());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isActual());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isActual());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isActual());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isActual());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isActual());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isActual());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()  ==  null  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()  ==  null  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild()  ==  null  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()    ==    null    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()    ==    null    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  ||!t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  ||!t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  ||!t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot().getLastChild()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot().getLastChild()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot().getLastChild()));	  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined()  ||  cfa.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined()  ||  cfa.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefined()  ||  cfa.getScopeRoot().isDefined());	  Preconditions.checkState(cfa.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isDefined());	  Preconditions.checkState(cfa.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!cfa.getScopeRoot().isDefined());	  Preconditions.checkState(cfa.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined(),  def);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefined(),  def);	  Preconditions.checkState(cfa.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined()  +  1);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefined()  +  1);	  Preconditions.checkState(cfa.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefinedChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefinedChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefinedChild());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDeclared());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDeclared());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDeclared());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfg.isDefined());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfg.isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfg.isDefined());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  cfa.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  cfa.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  cfa.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isConstructor());	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isConstructor(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isConstructor(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isConstructor(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  cfg);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  cfg);	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  cfa.isConstructor());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  cfa.isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  cfa.isConstructor());	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  numUseWithinCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  numUseWithinCfgNode);	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  numUseWithinUseCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  numUseWithinUseCfgNode);	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined()  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined()  +  1);	  Preconditions.checkState(t.getScopeRoot().isDefined()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined();  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined();	  Preconditions.checkState(t.getScopeRoot().isDefined()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionExtern());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionExtern());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getType()!=    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  cfa.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  cfa.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  cfa.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()!=    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
164	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();	  cfa.process(null,    t.getScopeRoot().getLastChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
165	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(t,  t.getScopeRoot().getLastChild());  reachingDef.analyze();	  cfa.process(null,    t.getScopeRoot().getLastChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
166	[BUG]  [BUGGY]  a.process(cfg,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  a.process(cfg,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	a.process(cfg,  t.getScopeRoot().getLastChild());  reachingDef.analyze();	  cfa.process(null,    t.getScopeRoot().getLastChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
167	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getLastChild(),  reachingDef.analyze());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfa.process(null,  t.getScopeRoot().getLastChild(),  reachingDef.analyze());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(null,  t.getScopeRoot().getLastChild(),  reachingDef.analyze());	  cfa.process(null,    t.getScopeRoot().getLastChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION,  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION,  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION,  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION,  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION,  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION,  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION,  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION,  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined());	  Preconditions.checkArgument(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefined());	  Preconditions.checkArgument(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefined(),  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefined(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefined(),  cfa);	  Preconditions.checkArgument(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isDefined());	  Preconditions.checkArgument(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkNotNull(t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkNotNull(t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkNotNull(t.getScopeRoot().isDefined());	  Preconditions.checkArgument(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()  ==  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()  ==  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()  ==  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getLastChild()  ==  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getLastChild()  ==  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getLastChild()  ==  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  cfa.getScopeRoot().getFirstChild()  ==  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  cfa.getScopeRoot().getFirstChild()  ==  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  cfa.getScopeRoot().getFirstChild()  ==  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  cfg.getScopeRoot().getFirstChild()  ==  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  cfg.getScopeRoot().getFirstChild()  ==  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  cfg.getScopeRoot().getFirstChild()  ==  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.EXPR_RESULT);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.EXPR_RESULT  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.EXPR_RESULT  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.EXPR_RESULT  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInterface());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInterface());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInterface());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor()  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor()  +  1);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  candidates);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot(),  candidates);	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  candidate);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  candidate);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot(),  candidate);	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  cfa,  t.getScopeRoot());	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot(),  def);	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getCfgNode());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getCfgNode());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getCfgNode());	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getConstructor());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getConstructor());	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp()  ||  t.getScopeRoot().getFirstChild().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp()  ||  t.getScopeRoot().getFirstChild().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp()  ||  t.getScopeRoot().getFirstChild().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp()  ||  t.getScopeRoot().getLastChild().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp()  ||  t.getScopeRoot().getLastChild().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp()  ||  t.getScopeRoot().getLastChild().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp(),  cfa);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp(),  cfa);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  numUseWithinCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  numUseWithinCfgNode);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  numUseWithinCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  numUseWithinCfgNode  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  numUseWithinCfgNode  +  1);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  numUseWithinCfgNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  numUseWithinCfgNode,  reachingDef);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  numUseWithinCfgNode,  reachingDef);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().isFunction(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().isFunction(),  numUseWithinCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().isFunction(),  numUseWithinCfgNode);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern()  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern()  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExtern()  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isExtern()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isExtern()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isFunction()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isFunction()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isFunction()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    cfa.isFunction());    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  &&  cfa.isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  &&  cfa.isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  &&  cfa.isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    cfa.isFunction());    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    cfa.isFunction());    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  cfa.isFunction());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  cfa.isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  cfa.isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    cfa.isFunction());    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  cfa.isConstructor());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  cfa.isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  ||  cfa.isConstructor());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    cfa.isFunction());    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  cfa.isFunction());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  cfa.isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAll()  ||  cfa.isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    cfa.isFunction());    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot()    ==    null    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot()    ==    null    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
223	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(t,  t.getScopeRoot().getLastChild());	  cfa.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
224	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfa.process(null,  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(null,  t.getScopeRoot().getLastChild(),  candidates);	  cfa.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
225	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
226	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()!=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.VAR);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.VAR);	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getLastChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getLastChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getLastChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getLastChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getLastChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getLastChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getLastChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getLastChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getLastChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getLastChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getLastChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()  ==  null);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()  ==  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()  ==  null);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getLastChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
236	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||!t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||!t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||!t.getScopeRoot().isConstructor());	  Preconditions.checkState(!t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(!t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||!t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||!t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||!t.getScopeRoot().isConstructor());	  Preconditions.checkState(!t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||!t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||!t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||!t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(!t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
244	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
246	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild()  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild()  +  1);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getChildCount());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getChildCount());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getChildCount());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunctionDeclaration()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunctionDeclaration()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunctionDeclaration()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isVarDeclaration());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isVarDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isVarDeclaration());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDeclaration());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDeclaration());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunctionDeclaration(),  cfa);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunctionDeclaration(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunctionDeclaration(),  cfa);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
257	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&!t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&!t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&!t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine());	  Preconditions.checkArgument(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefine());	  Preconditions.checkArgument(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine(),  cfa);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefine(),  cfa);	  Preconditions.checkArgument(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
264	[BUG]  [BUGGY]  Preconditions.checkNotNull(t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkNotNull(t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkNotNull(t.getScopeRoot().isDefine());	  Preconditions.checkArgument(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
266	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  }  );  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  }  );  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  }  );	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  >  0);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  >  0);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  >  0);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  >  -1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  >  -1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  >  -1);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfa.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfa.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfa.getScopeRoot()));	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
271	[BUG]  [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot(),  t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot(),  t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot(),  t.getScopeRoot()));	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()  +  1));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()  +  1));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()  +  1));	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfa.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfa.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfa.getScopeRoot()));	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()),  t.getScopeRoot());	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  reachingDef);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  reachingDef);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    null);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  null);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  null);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    null);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
278	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot(),  null);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot(),  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot(),  null);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    null);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa,  null);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa,  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa,  null);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    null);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkArgument(cfg.isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(cfg.isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(cfg.isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg,  cfg));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg,  cfg));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg,  cfg));	  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkArgument(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg),  cfa);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg),  cfa);	  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
284	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()),  cfg);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()),  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()),  cfg);	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
285	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg),  cfa);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg),  cfa);	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()),  cfg);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()),  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()),  cfg);	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
287	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getLastChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getLastChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getLastChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  cfa.getScopeRoot().getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  cfa.getScopeRoot().getFirstChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  cfa.getScopeRoot().getFirstChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  cfg.getScopeRoot().getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  cfg.getScopeRoot().getFirstChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  cfg.getScopeRoot().getFirstChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
290	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp(),  t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp(),  t);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp(),  t);	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isAssignmentOp(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isAssignmentOp(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isAssignmentOp(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
293	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa,  numUseWithinCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa,  numUseWithinCfgNode);	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
294	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa,  cfg);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa,  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa,  cfg);	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa,  null);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa,  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa,  null);	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  cfa.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  cfa.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  cfa.getScopeRoot().isConstructor());	  Preconditions.checkState(cfa.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!cfa.getScopeRoot().isConstructor());	  Preconditions.checkState(cfa.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  cfa.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  cfa.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  cfa.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(cfa.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  cfa.getScopeRoot().isDependency());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  cfa.getScopeRoot().isDependency());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  cfa.getScopeRoot().isDependency());	  Preconditions.checkState(cfa.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
300	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&  t.getScopeRoot().isDependencyOp());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&  t.getScopeRoot().isDependencyOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&  t.getScopeRoot().isDependencyOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDependencyOp());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDependencyOp()  ||  t.getScopeRoot().isDependencyOp());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDependencyOp()  ||  t.getScopeRoot().isDependencyOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDependencyOp()  ||  t.getScopeRoot().isDependencyOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDependencyOp());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDependencyOp()  &&  t.getScopeRoot().isDependencyOp());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDependencyOp()  &&  t.getScopeRoot().isDependencyOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDependencyOp()  &&  t.getScopeRoot().isDependencyOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDependencyOp());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp()  +  1);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp()  +  1);	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDependencyOp());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp();  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp();	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDependencyOp());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp())  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp())  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp())	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDependencyOp());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  &&  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  &&  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  &&  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction()  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction()  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction()  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  cfa.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  cfa.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  cfa.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isConstructor()  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isConstructor()  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isConstructor()  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  t.getScopeRoot().getNext().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  t.getScopeRoot().getNext().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  t.getScopeRoot().getNext().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine()  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine()  +  1);	  Preconditions.checkState(t.getScopeRoot().isDefine()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
312	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isDefine()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
313	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().isDefine()  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().isDefine()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().isDefine()  +  1);	  Preconditions.checkState(t.getScopeRoot().isDefine()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.CATCH);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.CATCH);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.CATCH);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.CATCH);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.CATCH);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.CATCH);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
317	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.CATCH  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.CATCH  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.CATCH  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.CATCH);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.CATCH);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfg.getScopeRoot().getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfg.getScopeRoot().getType()  ==  Token.CATCH);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfg.getScopeRoot().getType()  ==  Token.CATCH);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isDependency());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isDependency());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isDependency());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isDependency());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDependency()  ||  t.getScopeRoot().isDependency());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDependency()  ||  t.getScopeRoot().isDependency());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDependency()  ||  t.getScopeRoot().isDependency());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isDependency());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
322	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDependency()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDependency()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDependency()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isDependency());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency()  +  1);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency()  +  1);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isDependency());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency()  +  2);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency()  +  2);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency()  +  2);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isDependency());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
325	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency(),  t.getScopeRoot().isDependency());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency(),  t.getScopeRoot().isDependency());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency(),  t.getScopeRoot().isDependency());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isDependency());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
326	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  def,  reachingDef);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  def,  reachingDef);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    def);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(def.getScopeRoot().isDefined(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(def.getScopeRoot().isDefined(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(def.getScopeRoot().isDefined(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    def);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
328	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined(),  def);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefined(),  def);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    def);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
329	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  useCfgNode);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  useCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  useCfgNode);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    def);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
330	[BUG]  [BUGGY]  Preconditions.checkState(!cfg.isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!cfg.isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!cfg.isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot(),  t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot(),  t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot(),  t.getScopeRoot()));	  Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
332	[BUG]  [BUGGY]  Preconditions.checkState(t.isAssignableFrom(cfg.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.isAssignableFrom(cfg.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.isAssignableFrom(cfg.getScopeRoot()));	  Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
333	[BUG]  [BUGGY]  Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot()),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot()),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot()),  t.getScopeRoot());	  Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
336	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
337	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
338	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
339	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()  ==  null  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()  ==  null  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild()  ==  null  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()    ==    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
340	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunction(),  cfa);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunction(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunction(),  cfa);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
342	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkArgument(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
343	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor(),  cfa);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isConstructor(),  cfa);	  Preconditions.checkArgument(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkNotNull(t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkNotNull(t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkNotNull(t.getScopeRoot().isConstructor());	  Preconditions.checkArgument(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkArgument(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
346	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  &&!t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  &&!t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  &&!t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
347	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
352	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
353	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isActual());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isActual());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isActual());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
354	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isActual());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isActual());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isActual());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
355	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isActual()  ||  t.getScopeRoot().isActual());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isActual()  ||  t.getScopeRoot().isActual());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isActual()  ||  t.getScopeRoot().isActual());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
356	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isActual());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isActual());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isActual());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
357	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isActual());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isActual());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isActual());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
358	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignableFrom(t.getScopeRoot().getLastChild()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignableFrom(t.getScopeRoot().getLastChild()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignableFrom(t.getScopeRoot().getLastChild()));	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
359	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isDefine(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isDefine(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
361	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine(),  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefine(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isDefine(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
362	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().getLastChild()  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().getLastChild()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().getLastChild()  +  1);	  Preconditions.checkState(t.getScopeRoot().isDefine(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
363	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine(),  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefine(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isDefine(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
364	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().getChildCount());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().getChildCount());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().getChildCount());	  Preconditions.checkState(t.getScopeRoot().isDefine(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
365	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
366	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
367	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
368	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefine();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefine();  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefine();	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
369	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  &&  cfa.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  &&  cfa.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  &&  cfa.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
370	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  &&  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  &&  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  &&  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  &&  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  &&  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  &&  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDeclared());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDeclared());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDeclared());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
373	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined()  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined()  +  1);	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
374	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined()  ||  t.getCfgNode().isDefined());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined()  ||  t.getCfgNode().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined()  ||  t.getCfgNode().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
375	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
376	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
377	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild()  }  );  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild()  }  );  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild()  }  );	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
378	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild()  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild()  +  1);	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
379	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild()  <=  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild()  <=  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild()  <=  1);	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
381	[BUG]  [BUGGY]  cfg.process(t,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfg.process(t,  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfg.process(t,  t.getScopeRoot().getLastChild());	  cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
382	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild(),  candidates);	  cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
383	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined()  >  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined()  >  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined()  >  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
384	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDeclared());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDeclared());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDeclared());	  Preconditions.checkState(t.getScopeRoot().isDefined()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
385	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
386	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined()  ||  t.getCfgNode().isDefined());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined()  ||  t.getCfgNode().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined()  ||  t.getCfgNode().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
387	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfa));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfa));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfa));	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
388	[BUG]  [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isAssignableFrom(t));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!cfa.getScopeRoot().isAssignableFrom(t));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!cfa.getScopeRoot().isAssignableFrom(t));	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
389	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t)||  cfa.getScopeRoot().isAssignableFrom(t));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t)||  cfa.getScopeRoot().isAssignableFrom(t));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t)||  cfa.getScopeRoot().isAssignableFrom(t));	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
390	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t)&&  numUseWithinUseCfgNode  >  0);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t)&&  numUseWithinUseCfgNode  >  0);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t)&&  numUseWithinUseCfgNode  >  0);	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
391	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  &&  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  &&  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  &&  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isConstructor()  ||  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isConstructor()  ||  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isConstructor()  ||  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
393	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  cfa.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  cfa.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  cfa.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
394	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  t.getScopeRoot().getLastChild().isLocal());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  t.getScopeRoot().getLastChild().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  t.getScopeRoot().getLastChild().isLocal());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
395	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isExtern()  ||  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isExtern()  ||  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isExtern()  ||  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
396	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isFunction()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
397	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction()  ||  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction()  ||  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isFunction()  ||  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
399	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
400	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
401	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()!=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
402	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  >=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  >=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  >=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
403	[BUG]  [BUGGY]  Preconditions.checkState(f.getScopeRoot().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(f.getScopeRoot().getType()!=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(f.getScopeRoot().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  &&  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  &&  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  &&  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
405	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isExpine());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isExpine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isExpine());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
406	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine(),  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine(),  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine(),  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
407	[BUG]  [BUGGY]  cfg.process(t,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfg.process(t,  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfg.process(t,  t.getScopeRoot().getFirstChild());	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
408	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  candidates);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  candidates);	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
409	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&  t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
410	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp()  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp()  +  1);	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
411	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp();  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp();	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
412	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclarationOp());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclarationOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclarationOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
413	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
414	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.GETPROP);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()  ==  Token.GETPROP);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
416	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.GETPROP  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.GETPROP  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.GETPROP  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
417	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.GETPROP);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.GETPROP);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
418	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.GETPROP  &&  t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.GETPROP  &&  t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.GETPROP  &&  t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
419	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
420	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FOR  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FOR  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FOR  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
421	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg,  cfa));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg,  cfa));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg,  cfa));	  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
422	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg,  def));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg,  def));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg,  def));	  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
423	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg),  numUseWithinUseCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg),  numUseWithinUseCfgNode);	  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
424	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg,  scope));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg,  scope));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg,  scope));	  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
425	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().isLastChild());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isLastChild());    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
426	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFirstChild());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isLastChild());    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
427	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot().getLastChild()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot().getLastChild()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot().getLastChild()));	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isLastChild());    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
428	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isLastChild());    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
429	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot().getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot().getFirstChild()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot().getFirstChild()));	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isLastChild());    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
430	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined(),  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefined(),  cfa);	  Preconditions.checkState(!t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
431	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined(),  false);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined(),  false);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefined(),  false);	  Preconditions.checkState(!t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
432	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined(),  true);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined(),  true);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefined(),  true);	  Preconditions.checkState(!t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined()  &&  cfa.canInline());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined()  &&  cfa.canInline());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefined()  &&  cfa.canInline());	  Preconditions.checkState(!t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
434	[BUG]  [BUGGY]  Preconditions.checkState(t.isFunction(),  cfa.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.isFunction(),  cfa.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.isFunction(),  cfa.getScopeRoot());	  Preconditions.checkState(cfa.isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
435	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(cfa.isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
436	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(cfa.isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
437	[BUG]  [BUGGY]  Preconditions.checkState(!cfa.isFunction(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!cfa.isFunction(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!cfa.isFunction(),  t.getScopeRoot());	  Preconditions.checkState(cfa.isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
438	[BUG]  [BUGGY]  Preconditions.checkState(!cfa.isFunction()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!cfa.isFunction()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!cfa.isFunction()  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(cfa.isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
439	[BUG]  [BUGGY]  Preconditions.checkState(!cfa.isFunction()  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!cfa.isFunction()  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!cfa.isFunction()  &&  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(cfa.isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
440	[BUG]  [BUGGY]  if(t.getScopeRoot().getFirstChild()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot().getFirstChild()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot().getFirstChild()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getFirstChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
441	[BUG]  [BUGGY]  if(cfg!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(cfg!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(cfg!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getFirstChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
442	[BUG]  [BUGGY]  if(t.getScopeRoot().getFirstChild()  ==  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot().getFirstChild()  ==  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot().getFirstChild()  ==  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getFirstChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
443	[BUG]  [BUGGY]  if(t.getScopeRoot().getFirstChild()  instanceof  Number)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot().getFirstChild()  instanceof  Number)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot().getFirstChild()  instanceof  Number)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getFirstChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
444	[BUG]  [BUGGY]  if(t.getScopeRoot().getFirstChild()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  else  {  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot().getFirstChild()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  else  {  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot().getFirstChild()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  else  {	  cfa.process(null,    t.getScopeRoot().getFirstChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
445	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
446	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
447	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isInitializingDeclaration());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isInitializingDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isInitializingDeclaration());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
449	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
450	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
451	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isInitializingDependency());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isInitializingDependency());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isInitializingDependency());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
453	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isDefined(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isDefined(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isDefined(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
454	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefined(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
455	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  def);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
456	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  numUseWithinUseCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  numUseWithinUseCfgNode);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
457	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  numUseWithinCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  numUseWithinCfgNode);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
458	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined(),  t);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined(),  t);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefined(),  t);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
459	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  null);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  null);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
460	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
461	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot(),  cfg));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot(),  cfg));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot(),  cfg));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,    cfa));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
462	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot(),  cfg));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot(),  cfg));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot(),  cfg));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,    cfa));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
463	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfa,  cfg));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfa,  cfg));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfa,  cfg));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,    cfa));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
464	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAll()  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isAll()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
465	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isAll()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
466	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().isAll()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
467	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isFunction(),  cfa);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isFunction(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isFunction(),  cfa);	  Preconditions.checkState(t.getScopeRoot().isAll()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
468	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().isAll()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
469	[BUG]  [BUGGY]  Preconditions.checkArgument(cfa.isFunction(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(cfa.isFunction(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(cfa.isFunction(),  t.getScopeRoot());	  Preconditions.checkArgument(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
470	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction(),  cfa,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction(),  cfa,  numUseWithinCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isFunction(),  cfa,  numUseWithinCfgNode);	  Preconditions.checkArgument(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
471	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isExtern(),  cfa);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isExtern(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isExtern(),  cfa);	  Preconditions.checkArgument(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
472	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction(),  cfa,  cfg);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction(),  cfa,  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isFunction(),  cfa,  cfg);	  Preconditions.checkArgument(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
473	[BUG]  [BUGGY]  Preconditions.checkArgument(cfa.getScopeRoot().isFunction(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(cfa.getScopeRoot().isFunction(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(cfa.getScopeRoot().isFunction(),  t.getScopeRoot());	  Preconditions.checkArgument(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
474	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&  t.getScopeRoot().isDeclaration());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&  t.getScopeRoot().isDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&  t.getScopeRoot().isDeclaration());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
475	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclaration()  ||  t.getScopeRoot().isDeclaration());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclaration()  ||  t.getScopeRoot().isDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDeclaration()  ||  t.getScopeRoot().isDeclaration());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
476	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclaration()  ||  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclaration()  ||  t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDeclaration()  ||  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
477	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
478	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration()  +  1);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration()  +  1);	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
479	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getDeclaration().isDeclaration());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getDeclaration().isDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getDeclaration().isDeclaration());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
480	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExpr()  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isExpr()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
481	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isExpr());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isExpr());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isExpr());	  Preconditions.checkState(t.getScopeRoot().isExpr()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
482	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
483	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
484	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isAssignmentOp(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isAssignmentOp(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isAssignmentOp(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
485	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isExpressionNode(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isExpressionNode(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isExpressionNode(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
486	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
487	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(cfa.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
488	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()!=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()!=  Token.FUNCTION);	  Preconditions.checkState(cfa.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
489	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(cfa.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
490	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.VAR);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.VAR);	  Preconditions.checkState(cfa.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
491	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isLocal());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
492	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isLocal());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
493	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isLocal());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
494	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isLocal());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
495	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isLocal());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  &&  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  &&  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  &&  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isLocal());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
497	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
498	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
499	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
501	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
502	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
503	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
504	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
505	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isInitializingDeclaration());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isInitializingDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isInitializingDeclaration());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
506	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()!=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
507	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()!=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
508	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  >=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  >=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  >=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
509	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
510	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
511	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
513	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
514	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
515	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
516	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  cfa);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  cfa);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
517	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfg,  cfa);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfg,  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfg,  cfa);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
518	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfg,  cfg);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfg,  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfg,  cfg);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
519	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().isFunction(),  cfa);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().isFunction(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().isFunction(),  cfa);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
520	[BUG]  [BUGGY]  Preconditions.checkState(cfg.isFunction(),  t.getScopeRoot().isFunction(),  cfa);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfg.isFunction(),  t.getScopeRoot().isFunction(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfg.isFunction(),  t.getScopeRoot().isFunction(),  cfa);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
521	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  cfg);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  cfg);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
522	[BUG]  [BUGGY]  Preconditions.checkState(!cfa.isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!cfa.isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!cfa.isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
523	[BUG]  [BUGGY]  Preconditions.checkState(t.isAssignableFrom(cfa.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.isAssignableFrom(cfa.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.isAssignableFrom(cfa.getScopeRoot()));	  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
524	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot(),  t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot(),  t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot(),  t.getScopeRoot()));	  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
525	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()),  t.getScopeRoot());	  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
526	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
527	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
528	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
529	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
530	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  &&  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  &&  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  &&  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
531	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
532	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
533	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
534	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
535	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp(),  cfa);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp(),  cfa);	  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
536	[BUG]  [BUGGY]  Preconditions.checkNotNull(t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkNotNull(t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkNotNull(t.getScopeRoot().isAssignmentOp());	  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
537	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration());	  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
538	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isName()  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isName()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
539	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isVarName()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isVarName()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isVarName()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isName()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
540	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isType()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isType()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isType()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isName()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
541	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().isName()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
542	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isFunction(),  t);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isFunction(),  t);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isFunction(),  t);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
543	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa,  numUseWithinCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa,  numUseWithinCfgNode);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
544	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction(),  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction(),  cfa);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
545	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isFunction(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isFunction(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getFirstChild().isFunction(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
546	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa,  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa,  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa,  null);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
547	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa,  cfg);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa,  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa,  cfg);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
548	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  cfa,  def);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
549	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
550	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  cfa,  this);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
551	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  null);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  cfa,  null);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
552	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNodes);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNodes);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineCfgNodes);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
553	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
554	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineScope);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineScope);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineScope);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
555	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration(),  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration(),  cfa);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
556	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration()  ||  t.getScopeRoot().getFirstChild().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration()  ||  t.getScopeRoot().getFirstChild().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration()  ||  t.getScopeRoot().getFirstChild().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
557	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
558	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration()  ||  t.getScopeRoot().getLastChild().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration()  ||  t.getScopeRoot().getLastChild().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration()  ||  t.getScopeRoot().getLastChild().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
559	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration(),  cfg);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration(),  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration(),  cfg);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
560	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefined());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefined());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
561	[BUG]  [BUGGY]  Preconditions.checkState(!cfg.getScopeRoot().isAssignableFrom(t));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!cfg.getScopeRoot().isAssignableFrom(t));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!cfg.getScopeRoot().isAssignableFrom(t));	  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
562	[BUG]  [BUGGY]  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
563	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction()  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction()  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isFunction()  &&  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
564	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
565	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isExtern());	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
566	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
567	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isName()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isName()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isName()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
568	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isLocal()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isLocal()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isLocal()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
569	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
570	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
571	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
572	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  def);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    def);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
573	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().isFunction(),  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().isFunction(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().isFunction(),  def);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    def);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
574	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  def,  cfa);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  def,  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  def,  cfa);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    def);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
575	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa,  def);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    def);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
576	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa,  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa,  def);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    def);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
577	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isUnknown()  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isUnknown()  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isUnknown()  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isUnknown()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
578	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isUnknown());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isUnknown());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isUnknown());	  Preconditions.checkState(t.getScopeRoot().isUnknown()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
579	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isVarArgs()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isVarArgs()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isVarArgs()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isUnknown()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
580	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isUnknown()  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isUnknown()  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isUnknown()  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isUnknown()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
581	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isLastChild());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isLastChild());    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
582	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().hasChildren());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().hasChildren());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().hasChildren());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isLastChild());    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
583	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExpr());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExpr());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExpr());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isLastChild());    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
584	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
585	[BUG]  [BUGGY]  Preconditions.checkState(null,  cfa.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(null,  cfa.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(null,  cfa.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(cfa.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
586	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getCfgNode().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getCfgNode().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getCfgNode().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(cfa.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
587	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getFirstChild(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getFirstChild(),  numUseWithinCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getFirstChild(),  numUseWithinCfgNode);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
588	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getLastChild(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getLastChild(),  numUseWithinCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getLastChild(),  numUseWithinCfgNode);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
589	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().isDefined()    ||!t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
590	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||!t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||!t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  ||!t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined()    ||!t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
591	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isAssignableFrom(t));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isAssignableFrom(t));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isAssignableFrom(t));	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
592	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(def));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(def));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(def));	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
593	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(n));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(n));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(n));	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
594	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getFirstChild().isExtern());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getFirstChild().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getFirstChild().isExtern());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
595	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
596	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(cfg),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(cfg),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(cfg),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
597	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg),  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg),  def);	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
598	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
599	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInline());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInline());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInline());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
600	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
601	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
602	[BUG]  [BUGGY]  Preconditions.checkState(f.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(f.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(f.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
603	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
604	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isExpr());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isExpr());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isExpr());	  Preconditions.checkState(t.getScopeRoot().isAll()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
605	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isAll());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isAll());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isAll());	  Preconditions.checkState(t.getScopeRoot().isAll()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
606	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
607	[BUG]  [BUGGY]  Preconditions.checkState(null,  t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(null,  t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(null,  t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
608	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineNewDependencies);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
609	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineDependencies);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineDependencies);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineDependencies);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
610	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineDimensions);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineDimensions);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineDimensions);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
611	[BUG]  [BUGGY]  Preconditions.checkState(null,  t.getScopeRoot().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(null,  t.getScopeRoot().getType()!=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(null,  t.getScopeRoot().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
612	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().hasChildren());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().hasChildren());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().hasChildren());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
613	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
614	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExprDeclaration());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExprDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExprDeclaration());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
615	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild()  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild()  +  1);	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
616	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().getString().isEmpty());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().getString().isEmpty());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild().getString().isEmpty());	  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
617	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDependencyOp()  ||  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDependencyOp()  ||  t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDependencyOp()  ||  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDependencyOp());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
618	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDependencyOp());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
619	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor(),  cfa);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isConstructor(),  cfa);	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
620	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr(),  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExpr(),  cfa);	  Preconditions.checkState(t.getScopeRoot().isExtern(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
621	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
622	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().getFirstChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().getFirstChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
623	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined()  &&  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined()  &&  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefined()  &&  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(!t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
624	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefined()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(!t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
625	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isEmpty()  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isEmpty()  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isEmpty()  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isExtern()    ||    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
626	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
627	[BUG]  [BUGGY]  Preconditions.checkState(null,  t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(null,  t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(null,  t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
628	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild(),  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(null,  t.getScopeRoot().getFirstChild(),  def);	  cfa.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
629	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild(),  false);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild(),  false);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(null,  t.getScopeRoot().getFirstChild(),  false);	  cfa.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
630	[BUG]  [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(def,  t.getScopeRoot().getLastChild());	  cfa.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
631	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getNext());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfa.process(null,  t.getScopeRoot().getNext());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(null,  t.getScopeRoot().getNext());	  cfa.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
632	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
633	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
634	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()  ==  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()  ==  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()  ==  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
635	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().getFirstChild()  ==  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().getFirstChild()  ==  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().getFirstChild()  ==  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
636	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  inlinedNewDependencies);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  inlinedNewDependencies);	  Preconditions.checkState(t.getScopeRoot().isDefine(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
637	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  def);	  Preconditions.checkState(t.getScopeRoot().isDefine(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
638	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot(),  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot(),  def);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    def);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
639	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa,  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa,  def);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    def);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
640	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getFirstChild(),  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getFirstChild(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot().getFirstChild(),  def);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    def);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
641	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg,  cfa));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg,  cfa));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg,  cfa));	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
642	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getFirstChild().isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getFirstChild().isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getFirstChild().isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
643	[BUG]  [BUGGY]  Preconditions.checkState(cfg.getFirstChild().isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfg.getFirstChild().isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfg.getFirstChild().isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
644	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().getFirstChild().isDefine());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().getFirstChild().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().getFirstChild().isDefine());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
645	[BUG]  [BUGGY]  Preconditions.checkState(def.isDefined(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(def.isDefined(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(def.isDefined(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    def);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
646	[BUG]  [BUGGY]  Preconditions.checkState(def.getScopeRoot().isDefined(),  t);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(def.getScopeRoot().isDefined(),  t);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(def.getScopeRoot().isDefined(),  t);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    def);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
647	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isEmpty()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isEmpty()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isEmpty()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isExtern()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
648	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
649	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent().getType()!=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
650	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionPrototype());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionPrototype());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionPrototype());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
651	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isConstructor();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isConstructor();  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isConstructor();	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
652	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
653	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
654	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(t.getScopeRoot())&&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(t.getScopeRoot())&&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignableFrom(t.getScopeRoot())&&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
655	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
656	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  ||  cfa.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  ||  cfa.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot()!=  null  ||  cfa.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
657	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getCfgNode().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getCfgNode().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getCfgNode().isAssignmentOp());	  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
658	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExpr());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExpr());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExpr());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
659	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefineBlock());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefineBlock());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefineBlock());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
660	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isDeclared(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isDeclared(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isDeclared(),  t.getScopeRoot());	  Preconditions.checkState(cfa.isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
661	[BUG]  [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getFirstChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
662	[BUG]  [BUGGY]  if(cfg  ==  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(cfg  ==  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(cfg  ==  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getFirstChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
663	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(t.getScopeRoot()))  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(NodeUtil.isFunctionDeclaration(t.getScopeRoot()))  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(NodeUtil.isFunctionDeclaration(t.getScopeRoot()))  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getFirstChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
664	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(cfg))  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(NodeUtil.isExpressionNode(cfg))  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(NodeUtil.isExpressionNode(cfg))  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getFirstChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
665	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(c))  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(NodeUtil.isExpressionNode(c))  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(NodeUtil.isExpressionNode(c))  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getFirstChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
666	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isLastChild());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
667	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isExpined());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isExpined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isExpined());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
668	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isInline());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isInline());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isInline());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
669	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()!=    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
670	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()!=    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
671	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isExpr());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isExpr());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isExpr());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
672	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
673	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isInitializingDependency());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isInitializingDependency());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isInitializingDependency());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
674	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isConstructor()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(!t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
675	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||!t.getScopeRoot().isLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||!t.getScopeRoot().isLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||!t.getScopeRoot().isLastChild());	  Preconditions.checkState(!t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
676	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isActual());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isActual());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isActual());	  Preconditions.checkState(!t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
677	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
678	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
679	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
680	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefined()  ||  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefined()  ||  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefined()  ||  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
681	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp()  ||  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp()  ||  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp()  ||  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
682	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isUnknown()  ||  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isUnknown()  ||  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isUnknown()  ||  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
683	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isExpr()  ||  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isExpr()  ||  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isExpr()  ||  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
684	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
685	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
686	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction(),  cfa,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction(),  cfa,  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isFunction(),  cfa,  null);	  Preconditions.checkArgument(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
687	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAll(),  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAll(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isAll(),  cfa);	  Preconditions.checkArgument(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
688	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isTransient());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isTransient());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isTransient());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isLocal());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
689	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
690	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
691	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
692	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
693	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getFirstChild().isDefine());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getFirstChild().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getFirstChild().isDefine());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
694	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getLastChild().isDefine());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getLastChild().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getLastChild().isDefine());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
695	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDeclared());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDeclared());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDeclared());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
696	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  cfa);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  cfa);	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
697	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  this);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  this);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  this);	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
698	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  n,  t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
699	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp(),  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignmentOp(),  cfa);	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
700	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getFirstChild().isFunction(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getFirstChild().isFunction(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getFirstChild().isFunction(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
701	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa,  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa,  def);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
702	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isAnonymous());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isAnonymous());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isAnonymous());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
703	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isEmpty());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isEmpty());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isEmpty());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
704	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
705	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
706	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
707	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot(),  numUseWithinUseCfgNode));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot(),  numUseWithinUseCfgNode));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot(),  numUseWithinUseCfgNode));	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
708	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  inlineNewDependencies);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  inlineNewDependencies);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
709	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  inlinedNewDependencies);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  inlinedNewDependencies);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
710	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignmentOp(1));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignmentOp(1));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignmentOp(1));	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
711	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefine());	  Preconditions.checkArgument(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
712	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isLastChild());	  Preconditions.checkArgument(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
713	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine(),  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefine(),  def);	  Preconditions.checkArgument(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
714	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot(),  cfg);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot(),  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot(),  cfg);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
715	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  t);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  t);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction(),  t);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
716	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
717	[BUG]  [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getLastChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
718	[BUG]  [BUGGY]  if(cfg  ==  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(cfg  ==  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(cfg  ==  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getLastChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
719	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(t.getScopeRoot()))  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(NodeUtil.isFunctionDeclaration(t.getScopeRoot()))  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(NodeUtil.isFunctionDeclaration(t.getScopeRoot()))  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getLastChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
720	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(cfg))  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(NodeUtil.isExpressionNode(cfg))  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(NodeUtil.isExpressionNode(cfg))  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getLastChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
721	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(c))  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(NodeUtil.isExpressionNode(c))  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(NodeUtil.isExpressionNode(c))  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getLastChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
722	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.GETPROP);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
723	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
724	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExprDeclaration());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExprDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExprDeclaration());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
725	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInitializingDeclaration());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInitializingDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInitializingDeclaration());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
726	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExpression());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExpression());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExpression());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
727	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInitializingFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInitializingFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInitializingFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
728	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().isDefined()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
729	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isExpined());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isExpined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isExpined());	  Preconditions.checkState(t.getScopeRoot().isDefined()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
730	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared(),  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDeclared(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isDefine(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
731	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.CATCH);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.CATCH);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
732	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent().getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent().getType()  ==  Token.CATCH);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent().getType()  ==  Token.CATCH);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
733	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  ||  cfa.isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  ||  cfa.isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExpr()  ||  cfa.isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    cfa.isFunction());    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
734	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot()    ==    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
735	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfa.getScopeRoot().isConstructor());	  Preconditions.checkState(cfa.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
736	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  ||  cfa.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  ||  cfa.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot()!=  null  ||  cfa.getScopeRoot().isConstructor());	  Preconditions.checkState(cfa.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
737	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getCfgNode().isConstructor());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getCfgNode().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getCfgNode().isConstructor());	  Preconditions.checkState(cfa.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
738	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isLastChild());	  Preconditions.checkArgument(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
739	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()  ==  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()  ==  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()  ==  null);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getLastChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
740	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  &&  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  &&  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignmentOp()  &&  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
741	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
742	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
743	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
744	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot(),  numUseWithinUseCfgNode));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot(),  numUseWithinUseCfgNode));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot(),  numUseWithinUseCfgNode));	  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
745	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()  +  1));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()  +  1));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()  +  1));	  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
746	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isDependency());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
747	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependencies());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependencies());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependencies());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isDependency());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
748	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isUnknown()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
749	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isUnknown()  ||  t.getScopeRoot().isExpr());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isUnknown()  ||  t.getScopeRoot().isExpr());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isUnknown()  ||  t.getScopeRoot().isExpr());	  Preconditions.checkState(t.getScopeRoot().isUnknown()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
750	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isUnknown()  ||  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isUnknown()  ||  t.getScopeRoot().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isUnknown()  ||  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().isUnknown()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
751	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
752	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
753	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
754	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isLocal());	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
755	[BUG]  [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }	  cfa.process(null,    t.getScopeRoot().getLastChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
756	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getFirstChild().isDefined());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getFirstChild().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getFirstChild().isDefined());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
757	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getLastChild().isDefined());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getLastChild().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().getLastChild().isDefined());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
758	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot(),  null);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot(),  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot(),  null);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    null);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
759	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefined()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefined()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefined()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
760	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot()!=  null  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot()!=  null  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot()!=  null  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
761	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefined()  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefined()  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefined()  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
762	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp()  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp()  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp()  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
763	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isUnknown()  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isUnknown()  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isUnknown()  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
764	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
765	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,  def));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,  def));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,  def));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,    cfa));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
766	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
767	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
768	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
769	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
770	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
771	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  cfa);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot(),  cfa);	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
772	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  this);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  this);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot(),  this);	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
773	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  def,  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  def,  t.getScopeRoot());	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
774	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  inlinedNewDependencies);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot(),  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
775	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
776	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDeprecated());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDeprecated());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDeprecated());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
777	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isExpine());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isExpine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isExpine());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
778	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDeclared());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDeclared());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDeclared());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
779	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  +  1);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  +  1);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
780	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild(),  numUseWithinUseCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild(),  numUseWithinUseCfgNode);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
781	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild(),  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild(),  def);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
782	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
783	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isInitializingDeclaration());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isInitializingDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isInitializingDeclaration());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
784	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()),  t);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()),  t);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()),  t);	  Preconditions.checkState(cfa.getScopeRoot().isFunction(),    t);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
785	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().hasChildren());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().hasChildren());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().hasChildren());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
786	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().hasDefinedChildren());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().hasDefinedChildren());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().hasDefinedChildren());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
787	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().isExpr()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
788	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isInitializingFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isInitializingFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isInitializingFunction());	  Preconditions.checkState(t.getScopeRoot().isExpr()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
789	[BUG]  [BUGGY]  Preconditions.checkArgument(cfa.getScopeRoot().isAssignableFrom(t));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(cfa.getScopeRoot().isAssignableFrom(t));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(cfa.getScopeRoot().isAssignableFrom(t));	  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
790	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg,  cfa));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg,  cfa));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg,  cfa));	  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
791	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
792	[BUG]  [BUGGY]  Preconditions.checkState(null,  t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(null,  t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(null,  t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
793	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild(),  numUseWithinUseCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild(),  numUseWithinUseCfgNode);	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
794	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefined());	  Preconditions.checkArgument(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
795	[BUG]  [BUGGY]  cfg.process(def,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfg.process(def,  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfg.process(def,  t.getScopeRoot().getLastChild());	  cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
796	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInferred());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInferred());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInferred());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
797	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isLastChild());	  Preconditions.checkState(!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
798	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefine()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
799	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine(),  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefine(),  def);	  Preconditions.checkState(!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
800	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefine()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
801	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().getFirstChild().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().getFirstChild().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().getFirstChild().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
802	[BUG]  [BUGGY]  Preconditions.checkState(null,  t.getScopeRoot().getFirstChild().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(null,  t.getScopeRoot().getFirstChild().isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(null,  t.getScopeRoot().getFirstChild().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
803	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLastChild());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isLocal());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
804	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isExpr());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isExpr());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isExpr());	  Preconditions.checkState(t.getScopeRoot().isName()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
805	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isName()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
806	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isInitializingDependency());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isInitializingDependency());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isInitializingDependency());	  Preconditions.checkState(t.getScopeRoot().isName()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
807	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  def);	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
808	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  false);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  false);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  false);	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
809	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isDeclaration());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isDeclaration());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
810	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
811	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent().getType()  ==  Token.VAR);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent().getType()  ==  Token.VAR);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
812	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()  ==  null  &&  cfa.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()  ==  null  &&  cfa.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot()  ==  null  &&  cfa.getScopeRoot().isDefined());	  Preconditions.checkState(cfa.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
813	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getCfgNode().isDefined());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getCfgNode().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getCfgNode().isDefined());	  Preconditions.checkState(cfa.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
814	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getFirstChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getFirstChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
815	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()  ==  null  &&  cfa.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()  ==  null  &&  cfa.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot()  ==  null  &&  cfa.getScopeRoot().isDefine());	  Preconditions.checkState(cfa.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
816	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
817	[BUG]  [BUGGY]  Preconditions.checkState(null,  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(null,  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(null,  t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
818	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
819	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAll(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAll(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAll(),  t.getScopeRoot());	  Preconditions.checkState(cfa.getScopeRoot().isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
820	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isInitializingDeclaration());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isInitializingDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isInitializingDeclaration());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
821	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
822	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration()));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration()));	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
823	[BUG]  [BUGGY]  Preconditions.checkState(null,  t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(null,  t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(null,  t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
824	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfg.getScopeRoot().isAssignableFrom(t));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfg.getScopeRoot().isAssignableFrom(t));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot()!=  null  &&  cfg.getScopeRoot().isAssignableFrom(t));	  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
825	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getCfg().isAssignableFrom(t));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getCfg().isAssignableFrom(t));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getCfg().isAssignableFrom(t));	  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
826	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDeclaration());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDeclaration());	  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
827	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isNode());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isNode());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isNode());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isLocal());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
828	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
829	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExtern());	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
830	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
831	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()  ==  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()  ==  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()  ==  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
832	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()  ==  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()  ==  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()  ==  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()    ==    null);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
833	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isInitializingFunction());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isInitializingFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isInitializingFunction());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
834	[BUG]  [BUGGY]  if(  reachingDef!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(  reachingDef!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(  reachingDef!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  }	  cfa.process(null,    t.getScopeRoot().getLastChild());    reachingDef.analyze();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
835	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(t.getScopeRoot())||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(t.getScopeRoot())||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignableFrom(t.getScopeRoot())||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isExtern()    ||    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
836	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isExtern()    ||    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
837	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getLastChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
838	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent()!=  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getParent()!=  null);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getLastChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
839	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
840	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION,  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION,  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
841	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
842	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine(),  t);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine(),  t);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefine(),  t);	  Preconditions.checkState(cfa.getScopeRoot().isFunction(),    t);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
843	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isExtern());    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
844	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
845	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isExtern(),  t);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isExtern(),  t);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isExtern(),  t);	  Preconditions.checkState(t.getScopeRoot().isExtern(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
846	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isExtern()  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isExtern()  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isExtern()  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isExtern(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
847	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined());	  Preconditions.checkArgument(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
848	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefine());	  Preconditions.checkArgument(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
849	[BUG]  [BUGGY]  if(t.getScopeRoot()  ==  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot()  ==  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot()  ==  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getFirstChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
850	[BUG]  [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  else  {  cf  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  else  {  cf  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  }  else  {  cf	  cfa.process(null,    t.getScopeRoot().getFirstChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
851	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLocal());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isLocal());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
852	[BUG]  [BUGGY]  Preconditions.checkArgument(cfa.getScopeRoot().isAssignableFrom(t,  cfg));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(cfa.getScopeRoot().isAssignableFrom(t,  cfg));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(cfa.getScopeRoot().isAssignableFrom(t,  cfg));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,    cfa));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
853	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()  ==  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()  ==  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()  ==  null);	  Preconditions.checkArgument(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
854	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()!=  null);	  Preconditions.checkArgument(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
855	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(cfa.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
856	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor(),  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isConstructor(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(cfa.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
857	[BUG]  [BUGGY]  Preconditions.checkState(cfg.getCfg().isAssignableFrom(t));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfg.getCfg().isAssignableFrom(t));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfg.getCfg().isAssignableFrom(t));	  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
858	[BUG]  [BUGGY]  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t),  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t),  cfa);	  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
859	[BUG]  [BUGGY]  Preconditions.checkState(n.getScopeRoot().isAssignmentOp()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(n.getScopeRoot().isAssignmentOp()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(n.getScopeRoot().isAssignmentOp()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
860	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine()  ||  cfa.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine()  ||  cfa.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefine()  ||  cfa.getScopeRoot().isDefined());	  Preconditions.checkState(cfa.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
861	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isActual());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isActual());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isActual());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
862	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExpressionNode());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExpressionNode());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExpressionNode());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
863	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExpressionDeclaration());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExpressionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isExpressionDeclaration());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
864	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAllowMemberDeclaration());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAllowMemberDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAllowMemberDeclaration());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
865	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot()!=    null    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
866	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction()  ||  cfa.isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction()  ||  cfa.isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isFunction()  ||  cfa.isFunction());	  Preconditions.checkArgument(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
867	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDeprecated());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDeprecated());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDeprecated());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
868	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isExpr()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
869	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().getFirstChild().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().getFirstChild().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().getFirstChild().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
870	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  cfa.isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  cfa.isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  cfa.isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    cfa.isFunction());    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
871	[BUG]  [BUGGY]  Preconditions.checkState(t.isFunction(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.isFunction(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.isFunction(),  t.getScopeRoot());	  Preconditions.checkState(cfa.isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
872	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isFunction()  ||  t.getScopeRoot().getLastChild()  ==  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isFunction()  ||  t.getScopeRoot().getLastChild()  ==  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isFunction()  ||  t.getScopeRoot().getLastChild()  ==  t.getScopeRoot());	  Preconditions.checkState(cfa.isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
873	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  t.getScopeRoot());	  Preconditions.checkState(cfa.isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
874	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
875	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  cfa.isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  cfa.isAssignmentOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  cfa.isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
876	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FOR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FOR);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FOR);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
877	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isExtern());	  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
878	[BUG]  [BUGGY]  Preconditions.checkArgument(cfa.isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(cfa.isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(cfa.isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
879	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot()    ==    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
880	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot()    ==    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
881	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()  ==  null  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot()  ==  null  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot()  ==  null  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot()    ==    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
882	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isNamed()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isNamed()  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isNamed()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isUnknown()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
883	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp();  t.getScopeRoot().isDeclaration());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp();  t.getScopeRoot().isDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp();  t.getScopeRoot().isDeclaration());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
884	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine(),  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefine(),  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
885	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefine()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
886	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isExtern()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isExtern()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isExtern()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
887	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isConstructor()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isFunction()    &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
888	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isConstructor()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.isConstructor()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isConstructor()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
889	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP,  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP,  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
890	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETELEM);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETELEM);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETELEM);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
891	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isLastChild());    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
892	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInstance());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInstance());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isInstance());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
893	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAllowMember());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAllowMember());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAllowMember());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
894	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined(),  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined(),  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined(),  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
895	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined();  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined();	  Preconditions.checkState(t.getScopeRoot().isDefined()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
896	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined()  ||  cfa.getCfg().isDefined());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined()  ||  cfa.getCfg().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefined()  ||  cfa.getCfg().isDefined());	  Preconditions.checkState(cfa.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
897	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined(),  cfg);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined(),  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefined(),  cfg);	  Preconditions.checkState(cfa.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
898	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine()  ||  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine()  ||  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine()  ||  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
899	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAll()  ||  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAll()  ||  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isAll()  ||  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getLastChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
900	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().getFirstChild().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().getFirstChild().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().getFirstChild().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
901	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
902	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  ||  t.getScopeRoot().getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  ||  t.getScopeRoot().getFirstChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild()  ||  t.getScopeRoot().getFirstChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
903	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()!=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
904	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  cfa.isFunction());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  cfa.isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  cfa.isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
905	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isExported(),  cfa);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isExported(),  cfa);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isExported(),  cfa);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
906	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.CATCH);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  cfa.getScopeRoot().getType()  ==  Token.CATCH);	  Preconditions.checkState(cfa.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
907	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp(),  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
908	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  cfg);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot(),  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot(),  cfg);	  NodeTraversal.traverse(compiler,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
909	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
910	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefine(),  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefine(),  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefine(),  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||!t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
911	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t)||  cfg.isAssignableFrom(cfg),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t)||  cfg.isAssignableFrom(cfg),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t)||  cfg.isAssignableFrom(cfg),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
912	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().isAll()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
913	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isAll()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
914	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  numUseWithinCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction(),  numUseWithinCfgNode);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
915	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  0);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  0);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  0);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
916	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  useCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  useCfgNode);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  useCfgNode);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
917	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDefined());	  Preconditions.checkArgument(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
918	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.VAR);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.VAR);	  Preconditions.checkArgument(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
919	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  Token.FUNCTION);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
920	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
921	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
922	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t),  cfg);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t),  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t),  cfg);	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
923	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfa));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfa));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfa));	  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
924	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.CATCH);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.CATCH);	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
925	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.BLOCK);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.BLOCK);	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
926	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
927	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isActual());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isActual());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isActual());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
928	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isActual());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isActual());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isActual());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isActual());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
929	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
930	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunctionDeclaration());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
931	[BUG]  [BUGGY]  Preconditions.checkArgument(!t.getScopeRoot().isAssignableFrom(cfg));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(!t.getScopeRoot().isAssignableFrom(cfg));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(!t.getScopeRoot().isAssignableFrom(cfg));	  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
932	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null,  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
933	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDeclared());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDeclared());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDeclared());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
934	[BUG]  [BUGGY]  Preconditions.checkState(fa.getScopeRoot().isFunction(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(fa.getScopeRoot().isFunction(),  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(fa.getScopeRoot().isFunction(),  t.getScopeRoot());	  Preconditions.checkState(cfa.getScopeRoot().isFunction(),    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
935	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isDependency());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
936	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isDependency());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isDependency());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDeclared()  ||  t.getScopeRoot().isDependency());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isDependency());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
937	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild().getFirstChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
938	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild()  *  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild()  *  2);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild()  *  2);	  Preconditions.checkState(t.getScopeRoot().isConstructor(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
939	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine()  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine()  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine()  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
940	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isExtern()  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isExtern()  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isExtern()  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
941	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isExpr()  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isExpr()  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isExpr()  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
942	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExpressionNode());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExpressionNode());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExpressionNode());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
943	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  cfa.isDefine());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  cfa.isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  cfa.isDefine());	  Preconditions.checkState(t.getScopeRoot().isDefine(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
944	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  cfg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa,  cfg);	  Preconditions.checkState(t.getScopeRoot().isDefine(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
945	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg,  def));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg,  def));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg,  def));	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
946	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
947	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  cfg);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild(),  cfg);	  NodeTraversal.traverse(compiler,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
948	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isActual());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isActual());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isActual());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
949	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
950	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isDefine());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunctionDeclaration());    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
951	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  def);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
952	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().getLastChild());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isDefine(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
953	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
954	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()!=  null);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isConstructor()  ||  t.getScopeRoot().getFirstChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor()    &&    t.getScopeRoot().getFirstChild()!=    null);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
955	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunctionAnalysis());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunctionAnalysis());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunctionAnalysis());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
956	[BUG]  [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  }	  cfa.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
957	[BUG]  [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  }  else  {  cfa.process(null,  t.getScopeRoot().getLas  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  }  else  {  cfa.process(null,  t.getScopeRoot().getLas  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getFirstChild());  }  else  {  cfa.process(null,  t.getScopeRoot().getLas	  cfa.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
958	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDeclared(Joiner.NAME,  t.getScopeRoot().getLastChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDeclared(Joiner.NAME,  t.getScopeRoot().getLastChild()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDeclared(Joiner.NAME,  t.getScopeRoot().getLastChild()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
959	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined(),  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined(),  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined(),  def);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    def);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
960	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  def);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  def);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    def);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
961	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isExtern());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
962	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().isFunction());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
963	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  +  t.getScopeRoot().isDependencyOp());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  +  t.getScopeRoot().isDependencyOp());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  +  t.getScopeRoot().isDependencyOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()    ||    t.getScopeRoot().isDependencyOp());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
964	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  cfa.isDefined());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  cfa.isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  cfa.isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
965	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  cfg);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  cfg);  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa,  cfg);	  Preconditions.checkState(t.getScopeRoot().isDefined(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
966	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined(),  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined(),  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined(),  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
967	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefine()    ||    t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
968	[BUG]  [BUGGY]  if(t.getScopeRoot()  ==  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot()  ==  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot()  ==  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }	  cfa.process(null,    t.getScopeRoot().getLastChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
969	[BUG]  [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  else  {  cf  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  else  {  cf  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  }  else  {  cf	  cfa.process(null,    t.getScopeRoot().getLastChild());    cfg    =    cfa.getCfg();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
970	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
971	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&    NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
972	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.isExpressionNode(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.isExpressionNode(t.getScopeRoot()));  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.isExpressionNode(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
973	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT,  t.getScopeRoot());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT,  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
974	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAll());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAll());  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isAll());	  Preconditions.checkState(t.getScopeRoot().isConstructor()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
975	[BUG]  [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  }  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  }	  cfa.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
976	[BUG]  [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  }  else  {  cfa.process(null,  t.getScopeRoot().get  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  }  else  {  cfa.process(null,  t.getScopeRoot().get  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  }  else  {  cfa.process(null,  t.getScopeRoot().get	  cfa.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
977	[BUG]  [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  }  else  {  cfa.process(null,  t.getScopeRoot().  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  }  else  {  cfa.process(null,  t.getScopeRoot().  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  }  else  {  cfa.process(null,  t.getScopeRoot().	  cfa.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
978	[BUG]  [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  }  else  {  cfa.process(null,  t.getScopeRoot().getLas  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);        [BUGGY]  if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  }  else  {  cfa.process(null,  t.getScopeRoot().getLas  [BUGGY]      cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	if(t.getScopeRoot()!=  null)  {  cfa.process(null,  t.getScopeRoot().getLastChild());  }  else  {  cfa.process(null,  t.getScopeRoot().getLas	  cfa.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
