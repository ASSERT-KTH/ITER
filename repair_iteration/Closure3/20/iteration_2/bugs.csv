bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction(),  cfa);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  t.getScopeRoot().getLastChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  t.getScopeRoot().getLastChild().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction()  ||  t.getScopeRoot().getLastChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignableFrom(cfg));	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getLastChild()!=  null  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  cfa);	  Preconditions.checkState(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefined());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  +  1);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  +  1);	  Preconditions.checkState(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefined());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  def);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  def);	  Preconditions.checkState(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  cfa);	  Preconditions.checkState(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isDefine());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isDefine());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  +  1);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  +  1);	  Preconditions.checkState(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  &&  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAll()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isConstructor());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isExtern());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isName()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot()));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfg.isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignableFrom(t));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,  cfg));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,  cfg));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,  cfg));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfg.getScopeRoot().isAssignableFrom(t));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg),  cfa);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg),  cfa);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg),  cfa);	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor(),  cfa);	  Preconditions.checkState(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isConstructor());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isConstructor());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isDependency());	  Preconditions.checkState(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isConstructor());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isLocal());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isAssignableFrom(cfg));	  Preconditions.checkArgument(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isConstructor());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isConstructor());	  Preconditions.checkArgument(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefined());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefined());	  Preconditions.checkArgument(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction(),  cfa);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction(),  cfa);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isFunction(),  cfa);	  Preconditions.checkArgument(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  &&  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()  ==  null  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isConstructor());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isExtern());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isFunction(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  numUseWithinCfgNode);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  numUseWithinCfgNode);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isFunction(),  t);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  null);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  null);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  cfg);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  cfg);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  cfg);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignmentOp());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  cfa);	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDependencyOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  ||  t.getScopeRoot().isDeclaration());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
71	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  cfa.process(null,  t.getScopeRoot().getLastChild());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(null,  t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
72	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(null,  t.getScopeRoot().getFirstChild());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
73	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
74	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  cfa.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.VAR);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.VAR);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.FUNCTION);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefined());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefined());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  def);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction(),  cfa,  def);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  NodeTraversal.traverse(compiler,  cfa);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  cfa);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
86	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
87	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfa.process(null,  t.getScopeRoot().getFirstChild());  cfg  =  cfa.getCfg();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()!=  null);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getLastChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignmentOp());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLocal());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLocal());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isLocal());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isAssignmentOp());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getFirstChild().isFunction());	  Preconditions.checkState(t.getScopeRoot().getFirstChild().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isFunction()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isFunction()  &&!NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkArgument(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isAssignmentOp());	  Preconditions.checkArgument(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().getType()  ==  Token.FUNCTION  &&  t.getScopeRoot().isFunction());	  Preconditions.checkArgument(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefine());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isActual());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isActual());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null  &&  t.getScopeRoot().isActual());	  Preconditions.checkState(t.getScopeRoot()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isLastChild());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  ||  t.getScopeRoot().isLastChild());	  Preconditions.checkState(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(cfa.isAssignableFrom(t.getScopeRoot()));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,  cfa));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,  cfa));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg,  cfa));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg));  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(!t.getScopeRoot().isAssignableFrom(cfg));	  Preconditions.checkState(t.getScopeRoot().isAssignableFrom(cfg));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExtern());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefine());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().isDefine());	  Preconditions.checkState(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExtern()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExpr()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isUnknown()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isUnknown()  ||  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isUnknown()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
117	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunctionDeclaration());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()!=  null  &&  t.getScopeRoot().isFunctionDeclaration());	  Preconditions.checkState(t.getScopeRoot().getFirstChild()!=    null    &&    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isActual());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isActual());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().isActual());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isAssignmentOp(),  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isAssignmentOp());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  cfa.isFunction());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  cfa.isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  ||  cfa.isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isExtern(),  cfa);	  Preconditions.checkState(t.getScopeRoot().isFunction(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor(),  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()  ==  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()  ==  null);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()  ==  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()!=  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()!=  null);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor()  &&  t.getScopeRoot().getFirstChild()!=  null);	  Preconditions.checkState(t.getScopeRoot().isConstructor());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDefined());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefined()  ||!t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefined());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isDefined());	  Preconditions.checkState(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefine());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||!t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().getLastChild());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine(),  t.getScopeRoot().getLastChild());	  Preconditions.checkState(t.getScopeRoot().isDefine());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkArgument(t.getScopeRoot().isDefine());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkArgument(t.getScopeRoot().isDefine());	  Preconditions.checkArgument(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.CATCH);  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.CATCH);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION,  t.getScopeRoot().getFirstChild());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION,  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isFunction());  [BUGGY]    cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	139	139	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction()    ||    t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
