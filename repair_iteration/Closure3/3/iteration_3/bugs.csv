bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c.canInline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  t.getScope().setVar(c.varName);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
2	[BUG]  [BUGGY]  if(c.canInline())  {  t.getScope().setVar(varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  t.getScope().setVar(varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  t.getScope().setVar(varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  t.getScope().setVar(c.varName);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
3	[BUG]  [BUGGY]  if(c.canInline())  {  t.getScope().setVar(c.varName);  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  t.getScope().setVar(c.varName);  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  t.getScope().setVar(c.varName);  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  t.getScope().setVar(c.varName);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
4	[BUG]  [BUGGY]  if(c.canInline())  {  t.getScope().setVar(varName);  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  t.getScope().setVar(varName);  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  t.getScope().setVar(varName);  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  t.getScope().setVar(c.varName);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
5	[BUG]  [BUGGY]  if(c.canInline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  else  {  return;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  else  {  return;  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  else  {  return;  }	  t.getScope().setVar(c.varName);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
6	[BUG]  [BUGGY]  if(!c.defMetadata.canInline()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.defMetadata.canInline()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.canInline()  &&  c.depends.isEmpty())  {	  if(!c.defMetadata.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
7	[BUG]  [BUGGY]  if(!c.depends.canInline()  ||  c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.canInline()  ||  c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.canInline()  ||  c.defMetadata.isEmpty())  {	  if(!c.defMetadata.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
8	[BUG]  [BUGGY]  if(!c.defMetadata.canInlineDependencies()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.defMetadata.canInlineDependencies()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.canInlineDependencies()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
9	[BUG]  [BUGGY]  if(!c.defMetadata.canInlineDependency()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.defMetadata.canInlineDependency()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.canInlineDependency()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
10	[BUG]  [BUGGY]  if(!c.defMetadata.isInline()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.defMetadata.isInline()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.isInline()  &&  c.depends.isEmpty())  {	  if(!c.defMetadata.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
11	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&!c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {	  if(c.depends!=    null    &&!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
12	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {	  if(c.depends!=    null    &&!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
13	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||  c.depends.contains(varName))  {	  if(c.depends.isEmpty()    ||    c.depends.contains(varName))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
14	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&  c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&  c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&  c.depends.contains(varName))  {	  if(c.depends.isEmpty()    ||    c.depends.contains(varName))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
15	[BUG]  [BUGGY]  if(c.depends.isEmpty()  &&  c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  &&  c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  &&  c.depends.contains(varName))  {	  if(c.depends.isEmpty()    ||    c.depends.contains(varName))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
16	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.contains(varName)&&!inlinedNewDependencies.contains(t.getScope().getVar(c.varName)))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.contains(varName)&&!inlinedNewDependencies.contains(t.getScope().getVar(c.varName)))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||  c.depends.contains(varName)&&!inlinedNewDependencies.contains(t.getScope().getVar(c.varName)))  {	  if(c.depends.isEmpty()    ||    c.depends.contains(varName))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
17	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.contains(varName)||!c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.contains(varName)||!c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||  c.depends.contains(varName)||!c.depends.contains(varName))  {	  if(c.depends.isEmpty()    ||    c.depends.contains(varName))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
18	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.depends.contains(varName))  {	  if(c.depends.isEmpty()    ||    c.depends.contains(varName))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
19	[BUG]  [BUGGY]  AssertionFailedToInline(c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  AssertionFailedToInline(c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	AssertionFailedToInline(c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
20	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  else  {  inlinesNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  else  {  inlinesNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineVariable();  }  else  {  inlinesNewDependencies.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
21	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineVariable();  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
22	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.remove(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.remove(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.remove(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
23	[BUG]  [BUGGY]  vices.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  vices.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	vices.add(t.getScope().getVar(c.varName));	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
24	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.addAll(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.addAll(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.addAll(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
25	[BUG]  [BUGGY]  if(c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
26	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.isEmpty()  ||!c.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
27	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.isEmpty()  ||  inlinedNewDependencies.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.isEmpty()  ||  inlinedNewDependencies.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.isEmpty()  ||  inlinedNewDependencies.contains(c.varName))  {	  if(c.depends.isEmpty()    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
28	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
29	[BUG]  [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName),  t.getModule());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName),  t.getModule());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(c.getScope().getVar(c.varName),  t.getModule());	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
30	[BUG]  [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName),  t.getScope());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName),  t.getScope());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(c.getScope().getVar(c.varName),  t.getScope());	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
31	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&!c.defMetadata.isEmpty())  {	  if(c.depends!=    null    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
32	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.defMetadata.isEmpty())  {	  if(c.depends!=    null    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
33	[BUG]  [BUGGY]  if(c.depends  >=  null  &&!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  >=  null  &&!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  >=  null  &&!c.defMetadata.isEmpty())  {	  if(c.depends!=    null    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode!=  c.numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode!=  c.numUseWithinUseCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode!=  c.numUseWithinUseCfgNode);	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode  +  1);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode  +  1);	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  <  c.numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  <  c.numUseWithinUseCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  <  c.numUseWithinUseCfgNode);	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode  ||  numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  t.numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  t.numUseWithinUseCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  ==  t.numUseWithinUseCfgNode);	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
39	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&!c.depends.isEmpty())  {	  if(c.depends    ==    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
40	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.depends.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||  c.depends.length()  ==  0)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||  c.depends.length()  ==  0)  {	  if(c.depends    ==    null    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
41	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.depends.length()!=  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||  c.depends.length()!=  0)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||  c.depends.length()!=  0)  {	  if(c.depends    ==    null    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
42	[BUG]  [BUGGY]  if(c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
43	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
44	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.canInline())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
45	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.canInlineBlock())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.canInlineBlock())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.canInlineBlock())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
46	[BUG]  [BUGGY]  if(!c.defMetadata.isSupported()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.defMetadata.isSupported()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.isSupported()  &&  c.depends.isEmpty())  {	  if(!c.defMetadata.isSupported()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
47	[BUG]  [BUGGY]  if(!c.depends.isSupported()  ||  c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isSupported()  ||  c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isSupported()  ||  c.defMetadata.isEmpty())  {	  if(!c.defMetadata.isSupported()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
48	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.isSupported()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.isSupported()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.isSupported()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isSupported()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
49	[BUG]  [BUGGY]  if(!c.isSupported()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isSupported()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isSupported()  &&  c.depends.isEmpty())  {	  if(!c.defMetadata.isSupported()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
50	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.isSupported())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.isSupported())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.isSupported())  {	  if(!c.defMetadata.isSupported()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
51	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.isSupported()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.isSupported()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.isSupported()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isSupported()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
52	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {	  if(c.depends!=    null    ||!c.depends.isEmpty()    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
53	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {	  if(c.depends!=    null    ||!c.depends.isEmpty()    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
54	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {	  if(c.depends!=    null    &&!c.depends.isEmpty()    &&!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
55	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {	  if(c.depends!=    null    &&!c.depends.isEmpty()    &&!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
56	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.canHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.canHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.canHaveSideEffects())  {	  if(c.depends!=    null    &&!c.depends.isEmpty()    &&!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
57	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(c.depends!=    null    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
58	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&  c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if(c.depends!=    null    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
59	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||!c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||!c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&  c.depends.isEmpty()  ||!c.depends.contains(varName))  {	  if(c.depends!=    null    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
60	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
61	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
62	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.isEmpty()  &&!inlinedNewDependencies.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.isEmpty()  &&!inlinedNewDependencies.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.isEmpty()  &&!inlinedNewDependencies.contains(c.varName))  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
63	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
64	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c);	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
65	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c.type);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c.type);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c.type);	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
66	[BUG]  [BUGGY]  if(c.depends  ==  null  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(c.depends    ==    null    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
67	[BUG]  [BUGGY]  if(c.depends  ==  null  &&  c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&  c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&  c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if(c.depends    ==    null    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
68	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
69	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
70	[BUG]  [BUGGY]  if  (!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP,  true))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if  (!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP,  true))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if  (!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP,  true))  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
71	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.canInline())  {	  if(c.depends!=    null    &&!c.depends.isEmpty()    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
72	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.canInline())  {	  if(c.depends!=    null    &&!c.depends.isEmpty()    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
73	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&  c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&  c.defMetadata.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  &&  c.defMetadata.canInline())  {	  if(c.depends!=    null    &&!c.depends.isEmpty()    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
74	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.defMetadata.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.defMetadata.canInline())  {	  if(c.depends!=    null    &&!c.depends.isEmpty()    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(),  inlinedNewDependencies);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  Joiner(),  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    c,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(),  def);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(),  def);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  Joiner(),  def);	  NodeTraversal.traverse(compiler,    c,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  Joiner());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  Joiner());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  t,  new  Joiner());	  NodeTraversal.traverse(compiler,    c,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(),  Integer.MAX_VALUE);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(),  Integer.MAX_VALUE);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  Joiner(),  Integer.MAX_VALUE);	  NodeTraversal.traverse(compiler,    c,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(),  inlineNewDependencies);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(),  inlineNewDependencies);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  Joiner(),  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    c,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(),  this);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(),  this);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  Joiner(),  this);	  NodeTraversal.traverse(compiler,    c,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(c.canInline()  ||  c.canInline());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(c.canInline()  ||  c.canInline());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(c.canInline()  ||  c.canInline());	  Preconditions.checkState(c.canInline());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(!c.canInline());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(!c.canInline());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(!c.canInline());	  Preconditions.checkState(c.canInline());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(c.canInline();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(c.canInline();  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(c.canInline();	  Preconditions.checkState(c.canInline());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkNotNull(c.canInline());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkNotNull(c.canInline());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkNotNull(c.canInline());	  Preconditions.checkState(c.canInline());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(c.canInline()  ||!c.canInline());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(c.canInline()  ||!c.canInline());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(c.canInline()  ||!c.canInline());	  Preconditions.checkState(c.canInline());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
86	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.canHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.canHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.canHaveSideEffects())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.canHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
87	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.hasVar(c.varName))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.hasVar(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.hasVar(c.varName))  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.canHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
88	[BUG]  [BUGGY]  if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode!=  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode!=  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode!=  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
91	[BUG]  [BUGGY]  if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  >=  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  >=  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  >=  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
93	[BUG]  [BUGGY]  if(c.depends.isEmpty()  &&!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  &&!c.defMetadata.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  &&!c.defMetadata.canInline())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
94	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.defMetadata.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.defMetadata.canInline())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
95	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.canInlineFrom(c.varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.canInlineFrom(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.canInlineFrom(c.varName))  {	  if(c.depends.isEmpty()    ||!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
96	[BUG]  [BUGGY]  if  (!c.depends.isEmpty()  &&!c.depends.canInline())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if  (!c.depends.isEmpty()  &&!c.depends.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if  (!c.depends.isEmpty()  &&!c.depends.canInline())  {	  if    (!c.depends.isEmpty()    ||!c.depends.canInline())    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
97	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.depends.canInline())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.depends.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.depends.canInline())  {	  if    (!c.depends.isEmpty()    ||!c.depends.canInline())    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
98	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.depends.canInline())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.depends.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.depends.canInline())  {	  if    (!c.depends.isEmpty()    ||!c.depends.canInline())    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
99	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  0);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  0);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  0);	  inlinedNewDependencies.add(t.getScope().getVar(c.varName),    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
100	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode,  reachingUses);	  inlinedNewDependencies.add(t.getScope().getVar(c.varName),    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
101	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode  +  1);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode  +  1);	  inlinedNewDependencies.add(t.getScope().getVar(c.varName),    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
102	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if    (!c.depends.isEmpty()    &&!c.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
103	[BUG]  [BUGGY]  if(!defMetadata.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!defMetadata.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!defMetadata.isEmpty()  ||  c.depends.isEmpty())  {	  if(!defMetadata.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
104	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!defMetadata.isEmpty())  {	  if(!defMetadata.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
105	[BUG]  [BUGGY]  if(!defMetadata.isEmpty()  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!defMetadata.isEmpty()  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!defMetadata.isEmpty()  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(!defMetadata.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
106	[BUG]  [BUGGY]  if(!defMetadata.isEmpty()  &&  c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!defMetadata.isEmpty()  &&  c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!defMetadata.isEmpty()  &&  c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {	  if(!defMetadata.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
107	[BUG]  [BUGGY]  if(!defMetadata.isEmpty()  &&  c.depends!=  null  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!defMetadata.isEmpty()  &&  c.depends!=  null  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!defMetadata.isEmpty()  &&  c.depends!=  null  &&  c.depends.isEmpty())  {	  if(!defMetadata.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
108	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!defMetadata.isEmpty()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!defMetadata.isEmpty()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!defMetadata.isEmpty()  &&  c.depends.isEmpty())  {	  if(!defMetadata.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
109	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {	  if(c.depends!=    null    &&!c.depends.isEmpty()    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
110	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  >  c.numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  >  c.numUseWithinUseCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  >  c.numUseWithinUseCfgNode);	  Preconditions.checkState(numUseWithinUseCfgNode    >=    c.numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  >>  c.numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  >>  c.numUseWithinUseCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  >>  c.numUseWithinUseCfgNode);	  Preconditions.checkState(numUseWithinUseCfgNode    >=    c.numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  [Delete]  c.numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  [Delete]  c.numUseWithinUseCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  [Delete]  c.numUseWithinUseCfgNode);	  Preconditions.checkState(numUseWithinUseCfgNode    >=    c.numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiables(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiables(),  inlinedNewDependencies);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiables(),  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiables());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiables(),  def);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiables(),  def);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiables(),  def);	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiables());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  GatherCandiables());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  GatherCandiables());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  t,  new  GatherCandiables());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiables());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses,  new  GatherCandiables());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses,  new  GatherCandiables());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  reachingUses,  new  GatherCandiables());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiables());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiables(),  t);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiables(),  t);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiables(),  t);	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiables());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  def,  new  GatherCandiables());  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  def,  new  GatherCandiables());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  def,  new  GatherCandiables());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiables());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
120	[BUG]  [BUGGY]  NodeUtil.removeChild(c,  inlineCfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeUtil.removeChild(c,  inlineCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeUtil.removeChild(c,  inlineCfgNode);	  NodeUtil.removeChild(c,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
121	[BUG]  [BUGGY]  NodeUtil.removeChild(c,  numUseWithinUseCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeUtil.removeChild(c,  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeUtil.removeChild(c,  numUseWithinUseCfgNode,  reachingUses);	  NodeUtil.removeChild(c,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
122	[BUG]  [BUGGY]  NodeUtil.removeChild(c,  numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeUtil.removeChild(c,  numUseWithinUseCfgNode  +  1);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeUtil.removeChild(c,  numUseWithinUseCfgNode  +  1);	  NodeUtil.removeChild(c,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
123	[BUG]  [BUGGY]  NodeUtil.removeChild(c,  numUseWithinCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeUtil.removeChild(c,  numUseWithinCfgNode  +  1);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeUtil.removeChild(c,  numUseWithinCfgNode  +  1);	  NodeUtil.removeChild(c,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
124	[BUG]  [BUGGY]  NodeUtil.removeChild(c,  numUseWithinCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeUtil.removeChild(c,  numUseWithinCfgNode,  reachingUses);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeUtil.removeChild(c,  numUseWithinCfgNode,  reachingUses);	  NodeUtil.removeChild(c,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
125	[BUG]  [BUGGY]  NodeUtil.removeChild(c,  def);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeUtil.removeChild(c,  def);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeUtil.removeChild(c,  def);	  NodeUtil.removeChild(c,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
126	[BUG]  [BUGGY]  NodeUtil.removeChild(c,  numNewDependencies);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeUtil.removeChild(c,  numNewDependencies);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeUtil.removeChild(c,  numNewDependencies);	  NodeUtil.removeChild(c,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
127	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&!c.defMetadata.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&!c.defMetadata.canInline())  {	  if(c.depends!=    null    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
128	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.isInline())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.isInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.defMetadata.isInline())  {	  if(c.depends!=    null    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
129	[BUG]  [BUGGY]  if(c.defMetadata!=  null  &&!c.depends.canInline())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.defMetadata!=  null  &&!c.depends.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.defMetadata!=  null  &&!c.depends.canInline())  {	  if(c.depends!=    null    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
130	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.defMetadata.canInline())  {	  if(c.depends!=    null    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
131	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
132	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
133	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||  c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
134	[BUG]  [BUGGY]  if(!c.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
135	[BUG]  [BUGGY]  if(!c.isDeclared()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isDeclared()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isDeclared()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
136	[BUG]  [BUGGY]  if(!c.isDependency()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isDependency()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isDependency()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
137	[BUG]  [BUGGY]  if(!c.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
138	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {	  if(c.depends!=    null    ||!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkArgument(c.canInline()  ||  c.canInline());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkArgument(c.canInline()  ||  c.canInline());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkArgument(c.canInline()  ||  c.canInline());	  Preconditions.checkArgument(c.canInline());    	non-compiled	[CE]  <identifier>  expected	74	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkArgument(!c.canInline());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkArgument(!c.canInline());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkArgument(!c.canInline());	  Preconditions.checkArgument(c.canInline());    	non-compiled	[CE]  <identifier>  expected	74	None	replace
141	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&  c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&  c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&  c.defMetadata.isEmpty())  {	  if(!c.depends.isEmpty()    ||    c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
142	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {	  if(!c.depends.isEmpty()    ||    c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
143	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {	  if(!c.depends.isEmpty()    ||    c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
144	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {	  if(!c.depends.isEmpty()    ||    c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
145	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||  c.defMetadata.canInline())  {	  if(!c.depends.isEmpty()    ||    c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
146	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.isVar(c.varName))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.isVar(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||  c.defMetadata.isVar(c.varName))  {	  if(!c.depends.isEmpty()    ||    c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
147	[BUG]  [BUGGY]  if(!c.isDeclared()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isDeclared()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isDeclared()  &&!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
148	[BUG]  [BUGGY]  if(!c.isDependency()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isDependency()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isDependency()  &&!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
149	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
150	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.isEmpty()  ||!c.depends.isEmpty())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
151	[BUG]  [BUGGY]  if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
152	[BUG]  [BUGGY]  if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.varName  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.varName  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.varName	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
153	[BUG]  [BUGGY]  if(c.depends.contains(varName)&&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.contains(varName)&&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.contains(varName)&&  c.depends.isEmpty())  {	  if(c.depends.contains(varName)||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
154	[BUG]  [BUGGY]  if(!c.depends.contains(varName)&&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.contains(varName)&&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.contains(varName)&&  c.depends.isEmpty())  {	  if(c.depends.contains(varName)||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
155	[BUG]  [BUGGY]  if(!c.depends.contains(varName)||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.contains(varName)||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.contains(varName)||  c.depends.isEmpty())  {	  if(c.depends.contains(varName)||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
156	[BUG]  [BUGGY]  if(c.depends.contains(varName)||  c.depends.isEmpty()  ||!c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.contains(varName)||  c.depends.isEmpty()  ||!c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.contains(varName)||  c.depends.isEmpty()  ||!c.depends.contains(varName))  {	  if(c.depends.contains(varName)||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
157	[BUG]  [BUGGY]  if(c.depends.contains(varName)||  c.depends.isEmpty()  ||!inlinedNewDependencies.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.contains(varName)||  c.depends.isEmpty()  ||!inlinedNewDependencies.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.contains(varName)||  c.depends.isEmpty()  ||!inlinedNewDependencies.contains(c.varName))  {	  if(c.depends.contains(varName)||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
158	[BUG]  [BUGGY]  if(c.depends.contains(varName)||  c.depends.isEmpty()  ||  inlinedNewDependencies.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.contains(varName)||  c.depends.isEmpty()  ||  inlinedNewDependencies.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.contains(varName)||  c.depends.isEmpty()  ||  inlinedNewDependencies.contains(c.varName))  {	  if(c.depends.contains(varName)||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  inlinedNewDependencies);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    cfg,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  def);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  def);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  def);	  NodeTraversal.traverse(compiler,    cfg,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Joiner());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Joiner());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  Joiner());	  NodeTraversal.traverse(compiler,    cfg,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  Joiner());  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  Joiner());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  Joiner());	  NodeTraversal.traverse(compiler,    cfg,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  this);	  NodeTraversal.traverse(compiler,    cfg,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  inlinedNewDependencies);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  def);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  def);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  def);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  this);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  t);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  t);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates());	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
170	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  inlineNewDependencies);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  inlineNewDependencies);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
171	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  null);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  null);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  null);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
172	[BUG]  [BUGGY]  if(c.depends.isEmpty()  &&!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  &&!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  &&!c.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
173	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
174	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if(c.depends!=    null    &&!c.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
175	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if(c.depends!=    null    &&!c.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
176	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&!c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if(c.depends!=    null    &&!c.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
177	[BUG]  [BUGGY]  if(!c.defMetadata.isEmpty()  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.defMetadata.isEmpty()  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.isEmpty()  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
178	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
179	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||  c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
180	[BUG]  [BUGGY]  if(!c.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
181	[BUG]  [BUGGY]  if(!c.isEmpty()  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isEmpty()  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isEmpty()  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
182	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||  c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
183	[BUG]  [BUGGY]  if(!c.defMetadata.isEmpty()  &&  c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.defMetadata.isEmpty()  &&  c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.isEmpty()  &&  c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
184	[BUG]  [BUGGY]  if  (!c.depends.isEmpty()  ||  inlinedNewDependencies.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if  (!c.depends.isEmpty()  ||  inlinedNewDependencies.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if  (!c.depends.isEmpty()  ||  inlinedNewDependencies.contains(c.varName))  {	  if    (!c.depends.isEmpty()    &&    inlinedNewDependencies.contains(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
185	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  inlinedNewDependencies.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||  inlinedNewDependencies.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||  inlinedNewDependencies.contains(c.varName))  {	  if    (!c.depends.isEmpty()    &&    inlinedNewDependencies.contains(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
186	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {	  if    (!c.depends.isEmpty()    &&    inlinedNewDependencies.contains(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
187	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&  c.depends.isEmpty())  {	  if(!c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
188	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
189	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
190	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||  c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if(!c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
191	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.findVar(c.varName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.findVar(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.findVar(c.varName))  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.findVar(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
192	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.findVar(c.varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.findVar(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.findVar(c.varName))  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.findVar(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
193	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName))  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.findVar(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
194	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName)||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName)||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName)||!c.depends.isEmpty())  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.findVar(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
195	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName)||!c.depends.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName)||!c.depends.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName)||!c.depends.contains(c.varName))  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.findVar(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
196	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.containsKey(c.varName))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.containsKey(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.containsKey(c.varName))  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.findVar(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  GatherCandiates());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  GatherCandiates());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  GatherCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  inlinedNewDependencies);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  def);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  def);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  def);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  inlinedNewDependencies());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  inlinedNewDependencies());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  inlinedNewDependencies());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
202	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.isEmpty()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.isEmpty()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.defMetadata.isEmpty()  &&  c.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
203	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&!c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&!c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
204	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
205	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.isSupported()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.isSupported()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.defMetadata.isSupported()  ||  c.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
206	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.canInline()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.canInline()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.defMetadata.canInline()  ||  c.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
207	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {	  if(c.depends    ==    null    ||!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
208	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||  c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||  c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {	  if(c.depends    ==    null    ||!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
209	[BUG]  [BUGGY]  if(c.defMetadata!=  null  &&!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.defMetadata!=  null  &&!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.defMetadata!=  null  &&!c.depends.isEmpty())  {	  if(c.depends!=    null    &&!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
210	[BUG]  [BUGGY]  if(!c.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
211	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.isEmpty())  {	  if(!c.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
212	[BUG]  [BUGGY]  if(!c.isEmpty()  &&  c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isEmpty()  &&  c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isEmpty()  &&  c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {	  if(!c.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
213	[BUG]  [BUGGY]  if(!c.isEmpty()  &&  c.depends!=  null  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isEmpty()  &&  c.depends!=  null  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isEmpty()  &&  c.depends!=  null  &&  c.depends.isEmpty())  {	  if(!c.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
214	[BUG]  [BUGGY]  if(c.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
215	[BUG]  [BUGGY]  if(!c.isEmpty()  &&  c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isEmpty()  &&  c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isEmpty()  &&  c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if(!c.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
216	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects()  ||!c.depends.isEmpty())  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
217	[BUG]  [BUGGY]  t.getScope().setVar(c.varName,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  t.getScope().setVar(c.varName,  numUseWithinUseCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	t.getScope().setVar(c.varName,  numUseWithinUseCfgNode);	  t.getScope().setVar(c.varName);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
218	[BUG]  [BUGGY]  t.getScope().inlineVar(c.varName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  t.getScope().inlineVar(c.varName);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	t.getScope().inlineVar(c.varName);	  t.getScope().setVar(c.varName);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
219	[BUG]  [BUGGY]  t.getScope().setVar(c.varName,  c.numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  t.getScope().setVar(c.varName,  c.numUseWithinUseCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	t.getScope().setVar(c.varName,  c.numUseWithinUseCfgNode);	  t.getScope().setVar(c.varName);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
220	[BUG]  [BUGGY]  t.getScope().addVar(c.varName);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  t.getScope().addVar(c.varName);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	t.getScope().addVar(c.varName);	  t.getScope().setVar(c.varName);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
221	[BUG]  [BUGGY]  t.getScope().setVar(c.varName,  c.type);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  t.getScope().setVar(c.varName,  c.type);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	t.getScope().setVar(c.varName,  c.type);	  t.getScope().setVar(c.varName);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
222	[BUG]  [BUGGY]  t.getScope().clearVar(c.varName);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  t.getScope().clearVar(c.varName);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	t.getScope().clearVar(c.varName);	  t.getScope().setVar(c.varName);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
223	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.remove(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.remove(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.remove(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
224	[BUG]  [BUGGY]  InlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  InlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	InlinedNewDependencies.add(t.getScope().getVar(c.varName));	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
225	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  else  {  inlineDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  else  {  inlineDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineVariable();  }  else  {  inlineDependencies.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
226	[BUG]  [BUGGY]  InlineState.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  InlineState.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	InlineState.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode)    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	59	None	replace
227	[BUG]  [BUGGY]  InlineState.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  InlineState.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	InlineState.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode)    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	59	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode)    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	59	None	replace
229	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.canInline())  {	  if(c.depends    ==    null    ||!c.depends.isEmpty()    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
230	[BUG]  [BUGGY]  if(c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
231	[BUG]  [BUGGY]  if(c.depends.length()  ==  0  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.length()  ==  0  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.length()  ==  0  ||!c.defMetadata.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
232	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.depends.isEmpty())  {	  if(!c.depends.isEmpty()    &&!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
233	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.depends.isEmpty()  &&!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.depends.isEmpty()  &&!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.depends.isEmpty()  &&!c.depends.isEmpty())  {	  if(!c.depends.isEmpty()    &&!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
234	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.removeAllDependencies())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.removeAllDependencies())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.removeAllDependencies())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.removeAllDependencies())    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
235	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.removeAllDependencies())    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
236	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.containsAllDependencies())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.containsAllDependencies())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.containsAllDependencies())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.removeAllDependencies())    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
237	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.getAllDependencies())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.getAllDependencies())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.getAllDependencies())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.removeAllDependencies())    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
238	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.hasAllDependencies())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.hasAllDependencies())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.hasAllDependencies())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.removeAllDependencies())    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
239	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.depends.length  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||  c.depends.length  >  0)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||  c.depends.length  >  0)  {	  if(c.depends!=    null    &&    c.depends.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
240	[BUG]  [BUGGY]  if(c.depends  ==  null  &&  c.depends.length  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&  c.depends.length  >  0)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&  c.depends.length  >  0)  {	  if(c.depends!=    null    &&    c.depends.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
241	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.depends.length  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||  c.depends.length  >  0)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||  c.depends.length  >  0)  {	  if(c.depends!=    null    &&    c.depends.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
242	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.length  >  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&  c.depends.length  >  1)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&  c.depends.length  >  1)  {	  if(c.depends!=    null    &&    c.depends.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
243	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&  c.depends.length  ==  0)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&  c.depends.length  ==  0)  {	  if(c.depends!=    null    &&    c.depends.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
244	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.callsWith(c.varName))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.callsWith(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.callsWith(c.varName))  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.callsWith(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
245	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.callsWith(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
246	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.callsWith(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
247	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.callsWith(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
248	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName)&&!inlinedNewDependencies.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName)&&!inlinedNewDependencies.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName)&&!inlinedNewDependencies.contains(c.varName))  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.callsWith(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
249	[BUG]  [BUGGY]  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
250	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(varName));  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(varName));  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(varName));  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
251	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
252	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName));  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
253	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.depends.contains(varName))  {	  if    (!c.depends.isEmpty()    &&!c.depends.contains(varName))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
254	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.depends.contains(varName))  {	  if    (!c.depends.isEmpty()    &&!c.depends.contains(varName))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
255	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.depends.contains(varName)||!c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.depends.contains(varName)||!c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.depends.contains(varName)||!c.depends.contains(varName))  {	  if    (!c.depends.isEmpty()    &&!c.depends.contains(varName))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
256	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.depends.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||  c.depends.length()  ==  0)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||  c.depends.length()  ==  0)  {	  if(c.depends!=    null    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  InlineCandiates());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  InlineCandiates());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  InlineCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  JoinCandiates());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  JoinCandiates());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  JoinCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
259	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  TokenTraversal());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  TokenTraversal());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  TokenTraversal());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
260	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.isReachingVariable())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.isReachingVariable())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.defMetadata.isReachingVariable())  {	  if(c.depends!=    null    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
261	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  1);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  1);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  1);	  inlinedNewDependencies.add(t.getScope().getVar(c.varName),    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
262	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.depends.contains(varName))  {	  if(c.depends.isEmpty()    ||    c.depends.contains(varName))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
263	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.contains(varName)||  c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.contains(varName)||  c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||  c.depends.contains(varName)||  c.depends.contains(varName))  {	  if(c.depends.isEmpty()    ||    c.depends.contains(varName))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
264	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||  c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||  c.depends.contains(varName))  {	  if(c.depends.isEmpty()    ||    c.depends.contains(varName))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
265	[BUG]  [BUGGY]  t.getScope().setVar(c.varName,  cfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  t.getScope().setVar(c.varName,  cfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	t.getScope().setVar(c.varName,  cfgNode);	  t.getScope().setVar(c.varName);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
266	[BUG]  [BUGGY]  t.getScope().setVar(c.varName,  cfg);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  t.getScope().setVar(c.varName,  cfg);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	t.getScope().setVar(c.varName,  cfg);	  t.getScope().setVar(c.varName);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
267	[BUG]  [BUGGY]  t.getScope().setVar(c.varName,  c.useCfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  t.getScope().setVar(c.varName,  c.useCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	t.getScope().setVar(c.varName,  c.useCfgNode);	  t.getScope().setVar(c.varName);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(),  reachingUses);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(),  reachingUses);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  Joiner(),  reachingUses);	  NodeTraversal.traverse(compiler,    c,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(),  inlineCfgNode);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(),  inlineCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  Joiner(),  inlineCfgNode);	  NodeTraversal.traverse(compiler,    c,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
270	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.length()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.length()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.length()  ||!c.defMetadata.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
271	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.equals(def.depends)||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.equals(def.depends)||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.equals(def.depends)||!c.defMetadata.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  >=  c.numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  >=  c.numUseWithinUseCfgNode  +  1);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  >=  c.numUseWithinUseCfgNode  +  1);	  Preconditions.checkState(numUseWithinUseCfgNode    >=    c.numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
273	[BUG]  [BUGGY]  NodeUtil.removeChild(c,  numUseWithinUseCfgNode  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeUtil.removeChild(c,  numUseWithinUseCfgNode  -  1);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeUtil.removeChild(c,  numUseWithinUseCfgNode  -  1);	  NodeUtil.removeChild(c,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
274	[BUG]  [BUGGY]  NodeUtil.removeChild(c,  n);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeUtil.removeChild(c,  n);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeUtil.removeChild(c,  n);	  NodeUtil.removeChild(c,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
275	[BUG]  [BUGGY]  InlineDependencies.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  InlineDependencies.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	InlineDependencies.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode)    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	59	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode)    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	59	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(c.canInlineParent());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(c.canInlineParent());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(c.canInlineParent());	  Preconditions.checkState(c.canInline());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
278	[BUG]  [BUGGY]  Preconditions.checkState(c.canInline()  ||  c.canInlineCfgNode());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(c.canInline()  ||  c.canInlineCfgNode());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(c.canInline()  ||  c.canInlineCfgNode());	  Preconditions.checkState(c.canInline());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(c.canInlineFunction());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(c.canInlineFunction());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(c.canInlineFunction());	  Preconditions.checkState(c.canInline());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(c.canInlineVar());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(c.canInlineVar());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(c.canInlineVar());	  Preconditions.checkState(c.canInline());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
281	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName))  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.findVar(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
282	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.containsValue(c.varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.containsValue(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.containsValue(c.varName))  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.findVar(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
283	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
284	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
285	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.callsWith(c.varName))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.callsWith(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.callsWith(c.varName))  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.callsWith(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
286	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.callsWith(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
287	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.length  >=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&  c.depends.length  >=  0)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&  c.depends.length  >=  0)  {	  if(c.depends!=    null    &&    c.depends.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
288	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.length  <  2)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&  c.depends.length  <  2)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&  c.depends.length  <  2)  {	  if(c.depends!=    null    &&    c.depends.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
289	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
290	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP)||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP)||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP)||!c.depends.isEmpty())  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
291	[BUG]  [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(varName));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(c.getScope().getVar(varName));	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
292	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  cfa);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  cfa);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  cfa);	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
293	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.name));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.name));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.name));	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
294	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  cfg);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  cfg);	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
295	[BUG]  [BUGGY]  if(!c.defMetadata.canInline()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.defMetadata.canInline()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.canInline()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  reachingUses);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  spreadingUses);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  spreadingUses);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  spreadingUses);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
298	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&  c.depends.length()  >  0)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&  c.depends.length()  >  0)  {	  if(c.depends    ==    null    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
299	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&  c.depends.length()  ==  0)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&  c.depends.length()  ==  0)  {	  if(c.depends    ==    null    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
300	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.removeAllDependencies())    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
301	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.removeAllDependencies())    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
302	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.removeAllDependencies())    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
303	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
304	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
305	[BUG]  [BUGGY]  if(!c.depends.length()  ||!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.length()  ||!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.length()  ||!c.defMetadata.isEmpty())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
306	[BUG]  [BUGGY]  if(c.depends.contains(varName)||  c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.contains(varName)||  c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.contains(varName)||  c.depends.contains(varName))  {	  if(c.depends.contains(varName)||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
307	[BUG]  [BUGGY]  if(c.depends.contains(varName)||  c.depends.isEmpty()  ||  c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.contains(varName)||  c.depends.isEmpty()  ||  c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.contains(varName)||  c.depends.isEmpty()  ||  c.depends.contains(varName))  {	  if(c.depends.contains(varName)||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
308	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {	  if(!c.depends.isEmpty()    ||    c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
309	[BUG]  [BUGGY]  AssertionFailedToInline(t,  c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  AssertionFailedToInline(t,  c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	AssertionFailedToInline(t,  c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
310	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineNode();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inlineNode();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineNode();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinUseCfgNode)  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinUseCfgNode)  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinUseCfgNode)  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
312	[BUG]  [BUGGY]  AssertionFailedToInline(t,  c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  AssertionFailedToInline(t,  c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	AssertionFailedToInline(t,  c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
313	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinUseCfgNode)  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().get  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinUseCfgNode)  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().get  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinUseCfgNode)  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().get	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinUseCfgNode)  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinUseCfgNode)  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinCfgNode  ==  c.numUseWithinUseCfgNode)  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
315	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.isEmpty()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.isEmpty()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.defMetadata.isEmpty()  &&  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
316	[BUG]  [BUGGY]  AssertionFailedToInline(c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  AssertionFailedToInline(c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	AssertionFailedToInline(c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
317	[BUG]  [BUGGY]  AssertionFailedToInline(t,  c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  AssertionFailedToInline(t,  c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	AssertionFailedToInline(t,  c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
318	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineNode();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inlineNode();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineNode();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
319	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineDependency();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inlineDependency();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineDependency();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
320	[BUG]  [BUGGY]  AssertionFailedToInline(t,  c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  AssertionFailedToInline(t,  c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	AssertionFailedToInline(t,  c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
321	[BUG]  [BUGGY]  AssertionFailedToInline(c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  AssertionFailedToInline(c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	AssertionFailedToInline(c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
322	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineDependencies.add(t.getScope().getVar(c.varName));  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inlineDependencies.add(t.getScope().getVar(c.varName));  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineDependencies.add(t.getScope().getVar(c.varName));  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
323	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.contains(varName)||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.contains(varName)||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.defMetadata.contains(varName)||  c.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
324	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.containsKey(varName)||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.containsKey(varName)||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.defMetadata.containsKey(varName)||  c.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
325	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.canHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
326	[BUG]  [BUGGY]  if(!c.defMetadata.canInline()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.defMetadata.canInline()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.canInline()  &&!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
327	[BUG]  [BUGGY]  if(!c.defMetadata.isEmpty()  &&!c.defMetadata.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.defMetadata.isEmpty()  &&!c.defMetadata.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.isEmpty()  &&!c.defMetadata.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
328	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.isSupported())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.isSupported())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.isSupported())  {	  if(!c.defMetadata.isSupported()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
329	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
330	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName)  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName)  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName)	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
331	[BUG]  [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
332	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||  c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||  c.defMetadata.mayHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||  c.defMetadata.mayHaveSideEffects())  {	  if(c.depends!=    null    ||!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
333	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||  c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||  c.defMetadata.mayHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||  c.defMetadata.mayHaveSideEffects())  {	  if(c.depends!=    null    ||!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
334	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.depends.canInline())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.depends.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.depends.canInline())  {	  if    (!c.depends.isEmpty()    ||!c.depends.canInline())    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
335	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.depends.canInline())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.depends.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.depends.canInline())  {	  if    (!c.depends.isEmpty()    ||!c.depends.canInline())    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
336	[BUG]  [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(varName));  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(varName));  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(c.getScope().getVar(varName));  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
337	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(varName));  numUseWithinCfgNode  =  numUseWithinUseCfgNode;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(varName));  numUseWithinCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(varName));  numUseWithinCfgNode  =  numUseWithinUseCfgNode;	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
338	[BUG]  [BUGGY]  if(!c.depends.canInline()  &&  c.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.canInline()  &&  c.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.canInline()  &&  c.isEmpty())  {	  if(!c.defMetadata.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
339	[BUG]  [BUGGY]  if(!c.depends.canInline()  &&  c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.canInline()  &&  c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.canInline()  &&  c.defMetadata.isEmpty())  {	  if(!c.defMetadata.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
340	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.canInline()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.canInline()  &&  c.depends.isEmpty())  {	  if(!c.defMetadata.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
341	[BUG]  [BUGGY]  if  (!c.depends.canInline()  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if  (!c.depends.canInline()  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if  (!c.depends.canInline()  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if    (!c.depends.isEmpty()    &&!c.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
342	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  InlineCandiables());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  InlineCandiables());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  InlineCandiables());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiables());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
343	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  TokenTraversal());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  TokenTraversal());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  TokenTraversal());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiables());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
344	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  InlineVariables());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  InlineVariables());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  InlineVariables());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiables());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
345	[BUG]  [BUGGY]  if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
346	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.defMetadata.mayHaveSideEffects())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
347	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.defMetadata.mayHaveSideEffects())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
348	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.defMetadata.mayHaveSideEffects())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  reachingUses);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  reachingUses);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  this);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  this);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  this);	  NodeTraversal.traverse(compiler,    cfg,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
351	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.contains(varName))  {	  if(c.depends    ==    null    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
352	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.equals(varName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.equals(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.equals(varName))  {	  if(c.depends    ==    null    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
353	[BUG]  [BUGGY]  if  (!c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName)||!inlinedNewDependencies.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if  (!c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName)||!inlinedNewDependencies.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if  (!c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName)||!inlinedNewDependencies.contains(c.varName))  {	  if    (!c.depends.isEmpty()    &&    inlinedNewDependencies.contains(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
354	[BUG]  [BUGGY]  if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
355	[BUG]  [BUGGY]  if(!c.defMetadata.isEmpty()  &&  c.depends.isEmpty()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.defMetadata.isEmpty()  &&  c.depends.isEmpty()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.isEmpty()  &&  c.depends.isEmpty()  &&  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
356	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.defMetadata.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  ||!c.defMetadata.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.defMetadata.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
357	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||  c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
358	[BUG]  [BUGGY]  if(c.defMetadata!=  null  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.defMetadata!=  null  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.defMetadata!=  null  ||!c.depends.isEmpty())  {	  if(c.depends!=    null    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
359	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
360	[BUG]  [BUGGY]  if(!c.depends.canInline()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.canInline()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.canInline()  ||  c.depends.isEmpty())  {	  if(!c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
361	[BUG]  [BUGGY]  if(c.canInline())  {  t.getScope().setVarName(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  t.getScope().setVarName(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  t.getScope().setVarName(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  t.getScope().setVar(c.varName);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
362	[BUG]  [BUGGY]  if(c.canInline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  else  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  else  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  else  {	  t.getScope().setVar(c.varName);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
363	[BUG]  [BUGGY]  if(c.depends!=  null  &&!defMetadata.isEmpty()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!defMetadata.isEmpty()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!defMetadata.isEmpty()  &&  c.depends.isEmpty())  {	  if(!defMetadata.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
364	[BUG]  [BUGGY]  if(!defMetadata.isEmpty()  &&  c.depends  ==  null  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!defMetadata.isEmpty()  &&  c.depends  ==  null  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!defMetadata.isEmpty()  &&  c.depends  ==  null  &&  c.depends.isEmpty())  {	  if(!defMetadata.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
365	[BUG]  [BUGGY]  if(!defMetadata.canInline()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!defMetadata.canInline()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!defMetadata.canInline()  &&  c.depends.isEmpty())  {	  if(!defMetadata.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
366	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.isEmpty()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.isEmpty()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.isEmpty()  &&  c.depends.isEmpty())  {	  if(!c.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
367	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.isEmpty()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.isEmpty()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.isEmpty()  &&  c.depends.isEmpty())  {	  if(!c.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
368	[BUG]  [BUGGY]  if(!c.isEmpty()  &&  c.depends  ==  null  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isEmpty()  &&  c.depends  ==  null  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isEmpty()  &&  c.depends  ==  null  &&  c.depends.isEmpty())  {	  if(!c.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
369	[BUG]  [BUGGY]  if(!c.isEmpty()  &&  c.depends!=  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isEmpty()  &&  c.depends!=  null)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isEmpty()  &&  c.depends!=  null)  {	  if(!c.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
370	[BUG]  [BUGGY]  Preconditions.checkArgument(c.canInlineParent());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkArgument(c.canInlineParent());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkArgument(c.canInlineParent());	  Preconditions.checkArgument(c.canInline());    	non-compiled	[CE]  <identifier>  expected	74	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkArgument(c.canInlineVar());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkArgument(c.canInlineVar());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkArgument(c.canInlineVar());	  Preconditions.checkArgument(c.canInline());    	non-compiled	[CE]  <identifier>  expected	74	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkArgument(c.canInlineFunction());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkArgument(c.canInlineFunction());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkArgument(c.canInlineFunction());	  Preconditions.checkArgument(c.canInline());    	non-compiled	[CE]  <identifier>  expected	74	None	replace
373	[BUG]  [BUGGY]  Preconditions.checkState(c.numUseWithinUseCfgNode  ==  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(c.numUseWithinUseCfgNode  ==  numUseWithinUseCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(c.numUseWithinUseCfgNode  ==  numUseWithinUseCfgNode);	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
374	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.depends.equals(varName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||  c.depends.equals(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||  c.depends.equals(varName))  {	  if(c.depends    ==    null    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
375	[BUG]  [BUGGY]  if(c.hasChildren())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.hasChildren())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.hasChildren())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
376	[BUG]  [BUGGY]  inlineNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlineNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlineNewDependencies.add(t.getScope().getVar(c.varName));	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
377	[BUG]  [BUGGY]  if(c.hasChildren())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.hasChildren())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.hasChildren())  {  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
378	[BUG]  [BUGGY]  if(c.depends.length  ==  0  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.length  ==  0  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.length  ==  0  ||  c.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
379	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.depends.contains(varName))  {	  if(c.depends!=    null    &&!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
380	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.contains(c.varName))  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
381	[BUG]  [BUGGY]  if(inlinedNewDependencies.contains(c.varName)||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(inlinedNewDependencies.contains(c.varName)||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(inlinedNewDependencies.contains(c.varName)||  c.depends.isEmpty())  {	  if(c.depends.contains(varName)||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
382	[BUG]  [BUGGY]  if(c.depends.contains(varName)||  c.depends.isEmpty()  ||  t.getScope().getVar(c.varName)!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.contains(varName)||  c.depends.isEmpty()  ||  t.getScope().getVar(c.varName)!=  null)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.contains(varName)||  c.depends.isEmpty()  ||  t.getScope().getVar(c.varName)!=  null)  {	  if(c.depends.contains(varName)||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
383	[BUG]  [BUGGY]  if(c.depends.length  ==  0  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.length  ==  0  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.length  ==  0  ||!c.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
384	[BUG]  [BUGGY]  if(!c.defMetadata.isInline()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.defMetadata.isInline()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.isInline()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
385	[BUG]  [BUGGY]  if(c.canInlineCfgNode())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInlineCfgNode())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInlineCfgNode())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
386	[BUG]  [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode)  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline()  ||  c.canInlineCfgNode)  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline()  ||  c.canInlineCfgNode)  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
387	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineEmptyDependency();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inlineEmptyDependency();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineEmptyDependency();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
388	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineDependencies(t.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inlineDependencies(t.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineDependencies(t.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
389	[BUG]  [BUGGY]  if(c.canInline())  {  c.inline(null,  c.varName);  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inline(null,  c.varName);  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inline(null,  c.varName);  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
390	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineEmptyDependencies();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inlineEmptyDependencies();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineEmptyDependencies();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
391	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.size()  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&  c.depends.size()  >  0)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&  c.depends.size()  >  0)  {	  if(c.depends!=    null    &&    c.depends.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
392	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.size  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&  c.depends.size  >  0)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&  c.depends.size  >  0)  {	  if(c.depends!=    null    &&    c.depends.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
393	[BUG]  [BUGGY]  if(!c.depends.contains(varName)||  c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.contains(varName)||  c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.contains(varName)||  c.depends.contains(varName))  {	  if(c.depends.isEmpty()    ||    c.depends.contains(varName))    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
394	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP,  c.varName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP,  c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP,  c.varName))  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
395	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.depends.contains(varName))  {	  if    (!c.depends.isEmpty()    &&!c.depends.contains(varName))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
396	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Joiner(0));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Joiner(0));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  Joiner(0));	  NodeTraversal.traverse(compiler,    cfg,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  Integer.MAX_VALUE);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  Integer.MAX_VALUE);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  Joiner(),  Integer.MAX_VALUE);	  NodeTraversal.traverse(compiler,    cfg,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
398	[BUG]  [BUGGY]  if(!c.isVarArgs()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isVarArgs()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isVarArgs()  &&  c.depends.isEmpty())  {	  if(!c.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
399	[BUG]  [BUGGY]  if(!c.isInline()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isInline()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isInline()  &&  c.depends.isEmpty())  {	  if(!c.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
400	[BUG]  [BUGGY]  if(!c.isSynthetic()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.isSynthetic()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isSynthetic()  &&  c.depends.isEmpty())  {	  if(!c.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
401	[BUG]  [BUGGY]  Preconditions.checkArgument(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkArgument(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkArgument(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
402	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
403	[BUG]  [BUGGY]  if(c.hasChildren())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.hasChildren())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.hasChildren())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
404	[BUG]  [BUGGY]  if(c.depends  >=  null  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  >=  null  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  >=  null  &&  c.depends.isEmpty())  {	  if(c.depends    ==    null    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
405	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.references.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.references.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.references.isEmpty())  {	  if(c.depends    ==    null    ||!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
406	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  <  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  <  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  <  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
407	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.containsVar(c.varName))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.containsVar(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.containsVar(c.varName))  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.findVar(c.varName))    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
408	[BUG]  [BUGGY]  if(!c.defMetadata.isSupported()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.defMetadata.isSupported()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.isSupported()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isSupported()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
409	[BUG]  [BUGGY]  if(c.defMetadata!=  null  &&!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.defMetadata!=  null  &&!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.defMetadata!=  null  &&!c.defMetadata.isEmpty())  {	  if(c.depends!=    null    &&!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
410	[BUG]  [BUGGY]  if(c.hasChildren())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.hasChildren())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.hasChildren())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  t.getScope().setVar(c.varName);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
411	[BUG]  [BUGGY]  if(c.isInline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.isInline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.isInline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  t.getScope().setVar(c.varName);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
412	[BUG]  [BUGGY]  if(c.inline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.inline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.inline())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  t.getScope().setVar(c.varName);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
413	[BUG]  [BUGGY]  if(c.isSynthetic())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.isSynthetic())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.isSynthetic())  {  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  t.getScope().setVar(c.varName);    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
414	[BUG]  [BUGGY]  if(c.depends.size()  ==  0  ||!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.size()  ==  0  ||!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.size()  ==  0  ||!c.defMetadata.isEmpty())  {	  if(c.depends!=    null    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
415	[BUG]  [BUGGY]  if(c.depends.length  ==  0  ||!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.length  ==  0  ||!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.length  ==  0  ||!c.defMetadata.isEmpty())  {	  if(c.depends!=    null    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
416	[BUG]  [BUGGY]  if(c.depends.length!=  0  ||!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.length!=  0  ||!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.length!=  0  ||!c.defMetadata.isEmpty())  {	  if(c.depends!=    null    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
417	[BUG]  [BUGGY]  if(c.depends.length!=  0  &&!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.length!=  0  &&!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.length!=  0  &&!c.defMetadata.isEmpty())  {	  if(c.depends!=    null    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
418	[BUG]  [BUGGY]  if(!c.defMetadata.isEmpty()  ||!c.defMetadata.depends.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.defMetadata.isEmpty()  ||!c.defMetadata.depends.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.isEmpty()  ||!c.defMetadata.depends.contains(c.varName))  {	  if(!c.defMetadata.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
419	[BUG]  [BUGGY]  Preconditions.checkArgument(c.canInlinePrettyPrinter());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkArgument(c.canInlinePrettyPrinter());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkArgument(c.canInlinePrettyPrinter());	  Preconditions.checkArgument(c.canInline());    	non-compiled	[CE]  <identifier>  expected	74	None	replace
420	[BUG]  [BUGGY]  numUseWithinUseCfgNode  =  t.getScope().getVar(c.varName);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  numUseWithinUseCfgNode  =  t.getScope().getVar(c.varName);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	numUseWithinUseCfgNode  =  t.getScope().getVar(c.varName);	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
421	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  numUseWithinCfgNode  =  numUseWithinUseCfgNode;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  numUseWithinCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName));  numUseWithinCfgNode  =  numUseWithinUseCfgNode;	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
422	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.contains(c.varName))  {	  if(c.depends.isEmpty()    ||!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
423	[BUG]  [BUGGY]  if(!inlinedNewDependencies.isEmpty()  &&!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!inlinedNewDependencies.isEmpty()  &&!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!inlinedNewDependencies.isEmpty()  &&!c.depends.isEmpty())  {	  if(!c.depends.isEmpty()    &&!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
424	[BUG]  [BUGGY]  if(c.defMetadata!=  null  &&!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.defMetadata!=  null  &&!c.defMetadata.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.defMetadata!=  null  &&!c.defMetadata.canInline())  {	  if(c.depends!=    null    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
425	[BUG]  [BUGGY]  if(c.depends.size()  ==  0  &&!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.size()  ==  0  &&!c.defMetadata.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.size()  ==  0  &&!c.defMetadata.canInline())  {	  if(c.depends!=    null    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
426	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.canInlineBlock())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.canInlineBlock())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.defMetadata.canInlineBlock())  {	  if(c.depends!=    null    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
427	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.hasDependency(c.varName))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.hasDependency(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.hasDependency(c.varName))  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.removeAllDependencies())    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
428	[BUG]  [BUGGY]  t.getScope().removeChild(c.varName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  t.getScope().removeChild(c.varName);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	t.getScope().removeChild(c.varName);	  t.getScope().setVar(c.varName);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
429	[BUG]  [BUGGY]  t.getScope().declareVar(c.varName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  t.getScope().declareVar(c.varName);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	t.getScope().declareVar(c.varName);	  t.getScope().setVar(c.varName);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
430	[BUG]  [BUGGY]  t.getScope().defineVar(c.varName);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  t.getScope().defineVar(c.varName);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	t.getScope().defineVar(c.varName);	  t.getScope().setVar(c.varName);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
431	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.contains(c.varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||  c.defMetadata.contains(c.varName))  {	  if(!c.depends.isEmpty()    ||    c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
432	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(0));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner(0));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  Joiner(0));	  NodeTraversal.traverse(compiler,    c,    new    Joiner());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
433	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
434	[BUG]  [BUGGY]  if(!defMetadata.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!defMetadata.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!defMetadata.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiables(),  reachingUses);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiables(),  reachingUses);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiables(),  reachingUses);	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiables());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
436	[BUG]  [BUGGY]  Preconditions.checkState(c.canInlinePrettyPrinter());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(c.canInlinePrettyPrinter());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(c.canInlinePrettyPrinter());	  Preconditions.checkState(c.canInline());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
437	[BUG]  [BUGGY]  Preconditions.checkState(c.canInline()  ||  c.canInlinePrettyPrinter());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(c.canInline()  ||  c.canInlinePrettyPrinter());  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(c.canInline()  ||  c.canInlinePrettyPrinter());	  Preconditions.checkState(c.canInline());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
438	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineEmptyDependency();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inlineEmptyDependency();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineEmptyDependency();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
439	[BUG]  [BUGGY]  if(c.canInline())  {  c.inline(null,  c.varName);  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  c.inline(null,  c.varName);  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inline(null,  c.varName);  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
440	[BUG]  [BUGGY]  AssertionFailedToInline(t.getScope(),  c.varName)  {  c.inline();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  AssertionFailedToInline(t.getScope(),  c.varName)  {  c.inline();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	AssertionFailedToInline(t.getScope(),  c.varName)  {  c.inline();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
441	[BUG]  [BUGGY]  AssertionFailedToInline(t.getScope(),  c.varName)  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  AssertionFailedToInline(t.getScope(),  c.varName)  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	AssertionFailedToInline(t.getScope(),  c.varName)  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
442	[BUG]  [BUGGY]  AssertionFailedToInline(t.getScope(),  c.isConstructor())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  AssertionFailedToInline(t.getScope(),  c.isConstructor())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	AssertionFailedToInline(t.getScope(),  c.isConstructor())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }	  if(c.canInline())    {    c.inlineVariable();    }    else    {    inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
443	[BUG]  [BUGGY]  if(!inlinedNewDependencies.isEmpty()  &&!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!inlinedNewDependencies.isEmpty()  &&!c.defMetadata.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!inlinedNewDependencies.isEmpty()  &&!c.defMetadata.isEmpty())  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
444	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  }	  inlinedNewDependencies.add(t.getScope().getVar(c.varName),    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
445	[BUG]  [BUGGY]  if(c.depends.length  ==  0  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.length  ==  0  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.length  ==  0  ||!c.defMetadata.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
446	[BUG]  [BUGGY]  if(c.depends.length  >  0  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.length  >  0  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.length  >  0  ||!c.defMetadata.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
447	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.references.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.references.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.references.isEmpty())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
448	[BUG]  [BUGGY]  if(!inlinedNewDependencies.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!inlinedNewDependencies.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!inlinedNewDependencies.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {	  if(!c.depends.isEmpty()    &&!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
449	[BUG]  [BUGGY]  if(c.depends  >=  null  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  >=  null  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  >=  null  ||!c.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
450	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode)    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	59	None	replace
451	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode  ||  inlinedNewDependencies.contains(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode  ||  inlinedNewDependencies.contains(t.getScope().getVar(c.varName));  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode  ||  inlinedNewDependencies.contains(t.getScope().getVar(c.varName));	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode)    {    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	59	None	replace
452	[BUG]  [BUGGY]  if(!defMetadata.isEmpty()  &&  c.depends.isEmpty()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!defMetadata.isEmpty()  &&  c.depends.isEmpty()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!defMetadata.isEmpty()  &&  c.depends.isEmpty()  &&  c.depends.isEmpty())  {	  if(!defMetadata.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
453	[BUG]  [BUGGY]  if(defMetadata!=  null  &&!defMetadata.isEmpty()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(defMetadata!=  null  &&!defMetadata.isEmpty()  &&  c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(defMetadata!=  null  &&!defMetadata.isEmpty()  &&  c.depends.isEmpty())  {	  if(!defMetadata.isEmpty()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
454	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||  c.depends.contains(varName))  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||  c.depends.contains(varName))  {	  if(c.depends    ==    null    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
455	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.depends.size()  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||  c.depends.size()  ==  0)  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||  c.depends.size()  ==  0)  {	  if(c.depends    ==    null    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
456	[BUG]  [BUGGY]  if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  else  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  else  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  }  else  {	  Preconditions.checkState(numUseWithinUseCfgNode    ==    c.numUseWithinUseCfgNode);    inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
457	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  reachingUses);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  reachingUses);  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
458	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.canInlineBlock())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.canInlineBlock())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.canInlineBlock())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
459	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.canInlineParent())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.canInlineParent())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.canInlineParent())  {	  if(c.depends.isEmpty()    ||!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
460	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.depends.canInline())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.depends.canInline())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.depends.canInline())  {	  if    (!c.depends.isEmpty()    ||!c.depends.canInline())    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
461	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.isAll())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.isAll())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.defMetadata.isAll())  {	  if(c.depends    ==    null    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
462	[BUG]  [BUGGY]  if(!inlinedNewDependencies.isEmpty()  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (c.canInline())  {  c.inlineVariable();              [BUGGY]  if(!inlinedNewDependencies.isEmpty()  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!inlinedNewDependencies.isEmpty()  ||!c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if    (!c.depends.isEmpty()    &&!c.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
