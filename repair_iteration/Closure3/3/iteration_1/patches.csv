bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
2	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
3	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
4	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.canHaveSideEffects())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.canInline())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.canInline())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.depends.isEmpty()  &&!c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.depends.isEmpty())  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
8	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.canInline())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.canInline())  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  if  (!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if  (!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if  (!c.depends.isEmpty()  &&!c.defMetadata.canInlineBooleanProp(Node.SOURCENAME_PROP))  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
10	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.defMetadata.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
11	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
12	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName));	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
13	[BUG]  [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(c.getScope().getVar(c.varName));	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineVariable();  }  else  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.canInline())  {  c.inlineVariable();  }  else  {  inlineSensitiveInlineVariables.add(t.getScope().getVar(c.varName));  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	t.getScope().setVar(c.varName);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName));  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.defMetadata.depends.isEmpty())  {	  if(c.depends!=    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty())  {	  if(c.depends!=    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
21	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends  ==  null  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&!c.defMetadata.depends.isEmpty())  {	  if(c.depends!=    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
22	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.defMetadata.isEmpty())  {	  if(c.depends!=    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
23	[BUG]  [BUGGY]  if(!c.defMetadata.isEmpty()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.defMetadata.isEmpty()  &&  c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.isEmpty()  &&  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
24	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
25	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
26	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||  c.defMetadata.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
27	[BUG]  [BUGGY]  if(!c.isEmpty()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.isEmpty()  &&  c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.isEmpty()  &&  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
28	[BUG]  [BUGGY]  if(!c.defMetadata.isSupported()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.defMetadata.isSupported()  ||  c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.isSupported()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&  c.depends.isEmpty())  {	  if(c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
30	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
31	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  ||  c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||  c.depends.isEmpty())  {	  if(c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
32	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends  ==  null  ||  c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||  c.depends.isEmpty())  {	  if(c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
33	[BUG]  [BUGGY]  if(c.depends  ==  null  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends  ==  null  &&  c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  &&  c.depends.isEmpty())  {	  if(c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
34	[BUG]  [BUGGY]  if  (!c.depends.isEmpty()  &&!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if  (!c.depends.isEmpty()  &&!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if  (!c.depends.isEmpty()  &&!c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if    (!c.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
35	[BUG]  [BUGGY]  if  (!c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if  (!c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if  (!c.depends.isEmpty()  &&  inlinedNewDependencies.contains(c.varName))  {	  if    (!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
36	[BUG]  [BUGGY]  if  (c.depends!=  null  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if  (c.depends!=  null  ||!c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if  (c.depends!=  null  ||!c.depends.isEmpty())  {	  if    (!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
37	[BUG]  [BUGGY]  if  (!c.depends.isEmpty()  &&!c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if  (!c.depends.isEmpty()  &&!c.depends.contains(varName))  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if  (!c.depends.isEmpty()  &&!c.depends.contains(varName))  {	  if    (!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
38	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
39	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
40	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.defMetadata.depends.isEmpty())  {	  if(c.depends!=    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
41	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty())  {	  if    (!c.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
42	[BUG]  [BUGGY]  if  (!c.depends.isEmpty()  ||!c.depends.canInline())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if  (!c.depends.isEmpty()  ||!c.depends.canInline())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if  (!c.depends.isEmpty()  ||!c.depends.canInline())  {	  if    (!c.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
43	[BUG]  [BUGGY]  if(!c.defMetadata.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.defMetadata.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
44	[BUG]  [BUGGY]  if(!c.defMetadata.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.defMetadata.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
45	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.canInline())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.canInline())  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
46	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  &&!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  &&!c.defMetadata.canInline())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  &&!c.defMetadata.canInline())  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
47	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if    (!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
48	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if    (!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
49	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if    (!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
50	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
51	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.mayHaveSideEffects())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
52	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  &&!c.defMetadata.mayHaveSideEffects())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.mayHaveSideEffects())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode);  inlinedNewDependencies.add(c.getScope().getVar(c.varName));	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  >=  c.numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  >=  c.numUseWithinUseCfgNode);  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  >=  c.numUseWithinUseCfgNode);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
57	[BUG]  [BUGGY]  NodeUtil.removeChild(c,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  NodeUtil.removeChild(c,  numUseWithinUseCfgNode);  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeUtil.removeChild(c,  numUseWithinUseCfgNode);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiables());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiables());  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiables());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(numUseWithinUseCfgNode  ==  c.numUseWithinUseCfgNode)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
60	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.length  >  0)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  &&  c.depends.length  >  0)  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&  c.depends.length  >  0)  {	  if(c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
61	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.defMetadata.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
62	[BUG]  [BUGGY]  if(!c.defMetadata.canInline()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.defMetadata.canInline()  ||  c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.canInline()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
63	[BUG]  [BUGGY]  if(!c.defMetadata.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.defMetadata.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.defMetadata.isEmpty()  ||  c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
64	[BUG]  [BUGGY]  if(!defMetadata.isEmpty()  &&  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!defMetadata.isEmpty()  &&  c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!defMetadata.isEmpty()  &&  c.depends.isEmpty())  {	  if(!c.defMetadata.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
65	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if    (!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
66	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  ||!c.defMetadata.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  ||!c.defMetadata.isEmpty())  {	  if(c.depends!=    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
67	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.canInline())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.defMetadata.canInline())  {	  if(c.depends!=    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
68	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if    (!c.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
69	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.contains(varName))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.contains(varName))  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.isEmpty()  ||  c.depends.contains(varName))  {	  if(c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
70	[BUG]  [BUGGY]  if(c.depends.contains(varName)||  c.depends.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends.contains(varName)||  c.depends.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends.contains(varName)||  c.depends.isEmpty())  {	  if(c.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(c.canInline());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  Preconditions.checkState(c.canInline());  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkState(c.canInline());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
72	[BUG]  [BUGGY]  t.getScope().setVar(c.varName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  t.getScope().setVar(c.varName);  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	t.getScope().setVar(c.varName);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates());  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkArgument(c.canInline());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  Preconditions.checkArgument(c.canInline());  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	Preconditions.checkArgument(c.canInline());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  NodeTraversal.traverse(compiler,  c);  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Joiner());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Joiner());  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  Joiner());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  Joiner());  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	NodeTraversal.traverse(compiler,  c,  new  Joiner());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
78	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.defMetadata.canInline())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.defMetadata.canInline())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  &&!c.defMetadata.canInline())  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.canInline())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
79	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.callsWith(c.varName))  {	  if    (!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
80	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.removeAllDependencies())  {	  if    (!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
81	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName))  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.findVar(c.varName))  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
82	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (c.canInline())  {  c.inlineVariable();            [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {  [BUGGY]    inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  }  }  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	165	165	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.isEmpty())  {	  if    (!c.depends.isEmpty()    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
