bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getParent();  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getParent();  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  expressionRoot.getParent();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
2	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getNext();  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getNext();  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  expressionRoot.getNext();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
3	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot;  p!=  predicate.getParent();  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  expressionRoot;  p!=  predicate.getParent();  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  expressionRoot;  p!=  predicate.getParent();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
4	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  predicate.getNext();  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  predicate.getNext();  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  predicate.getNext();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
5	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  parent.getParent();  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  parent.getParent();  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  parent.getParent();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
6	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  SIDE_EFFECT_PREDICATE;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  SIDE_EFFECT_PREDICATE;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  SIDE_EFFECT_PREDICATE;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    expressionRoot;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
7	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  predicate;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  predicate;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  predicate;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    expressionRoot;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot;  p.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot;  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  expressionRoot;  p.getNext())  {	  for(Node    p    =    n;    p!=    expressionRoot;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  for(Node  p  =  n;  p  ==  expressionRoot;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p  ==  expressionRoot;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p  ==  expressionRoot;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    expressionRoot;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
10	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot;  p!=  null;  p  =  p.getParent())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  expressionRoot;  p!=  null;  p  =  p.getParent())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  expressionRoot;  p!=  null;  p  =  p.getParent())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getParent())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
11	[BUG]  [BUGGY]  for(Node  p  =  parent;  p!=  null;  p  =  p.getParent())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  parent;  p!=  null;  p  =  p.getParent())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  parent;  p!=  null;  p  =  p.getParent())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getParent())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
12	[BUG]  [BUGGY]  for(Node  p  =  predicate;  p!=  null;  p  =  p.getParent())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  predicate;  p!=  null;  p  =  p.getParent())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  predicate;  p!=  null;  p  =  p.getParent())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getParent())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  for(Node  p  =  predicate;  p!=  null;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  predicate;  p!=  null;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  predicate;  p!=  null;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getParent())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
14	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot;  p!=  null;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  expressionRoot;  p!=  null;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  expressionRoot;  p!=  null;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getParent())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
15	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defParent;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  defParent;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  defParent;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defRoot;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
16	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot;  p!=  defRoot;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  expressionRoot;  p!=  defRoot;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  expressionRoot;  p!=  defRoot;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defRoot;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
17	[BUG]  [BUGGY]  Node  p  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  Node  p  =  n.getFirstChild();  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	Node  p  =  n.getFirstChild();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  Node  p  =  n.getNext();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  Node  p  =  n.getNext();  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	Node  p  =  n.getNext();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  Node  p  =  n.getParent();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  Node  p  =  n.getParent();  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	Node  p  =  n.getParent();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  Predicate  <  Node>  p  =  n.getFirstChild();  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	Predicate  <  Node>  p  =  n.getFirstChild();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  predicate.getParent();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  Predicate  <  Node>  p  =  predicate.getParent();  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	Predicate  <  Node>  p  =  predicate.getParent();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
22	[BUG]  [BUGGY]  Node  p  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  Node  p  =  n.getLastChild();  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	Node  p  =  n.getLastChild();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  Predicate  <  Node>  p  =  predicate.getNext();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  Predicate  <  Node>  p  =  predicate.getNext();  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	Predicate  <  Node>  p  =  predicate.getNext();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  for(Node  p  =  n.getFirstChild();  p!=  null;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n.getFirstChild();  p!=  null;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n.getFirstChild();  p!=  null;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
25	[BUG]  [BUGGY]  for(Node  p  =  null;  p!=  null;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  null;  p!=  null;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  null;  p!=  null;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
26	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  null;  p  =  p.getPrevious())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  null;  p  =  p.getPrevious())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  null;  p  =  p.getPrevious())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
27	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  expressionRoot.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
28	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getParent())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getParent())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  expressionRoot.getParent())  {	  for(Node    p    =    n;    p!=    predicate.getParent())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot;  p!=  predicate.getParent())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  expressionRoot;  p!=  predicate.getParent())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  expressionRoot;  p!=  predicate.getParent())  {	  for(Node    p    =    n;    p!=    predicate.getParent())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
30	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  predicate.getNext())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  predicate.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  predicate.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
31	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot;  p!=  predicate.getNext())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  expressionRoot;  p!=  predicate.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  expressionRoot;  p!=  predicate.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
32	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  null.getNext())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  null.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  null.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
33	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  def.getNext())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  def.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  def.getNext())  {	  for(Node    p    =    n;    p!=    def.getParent())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
34	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  def.getFirstChild())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  def.getFirstChild())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  def.getFirstChild())  {	  for(Node    p    =    n;    p!=    def.getParent())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
35	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  def.getPrevious())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  def.getPrevious())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  def.getPrevious())  {	  for(Node    p    =    n;    p!=    def.getParent())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
36	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  0;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  0;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  0;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    1;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
37	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  2;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  2;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  2;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    1;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
38	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  1;  p.getNext())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  1;  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  1;  p.getNext())  {	  for(Node    p    =    n;    p!=    1;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
39	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  1;  p  =  p.getParent())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  1;  p  =  p.getParent())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  1;  p  =  p.getParent())  {	  for(Node    p    =    n;    p!=    1;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
40	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot;  p!=  1;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  expressionRoot;  p!=  1;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  expressionRoot;  p!=  1;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    1;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
41	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  def.getNext();  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  def.getNext();  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  def.getNext();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    def.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  def.getFirstChild();  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  def.getFirstChild();  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  def.getFirstChild();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    def.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
43	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  null;  p  =  predicate.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  null;  p  =  predicate.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  null;  p  =  predicate.getNext())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
44	[BUG]  [BUGGY]  for(Node  p  =  node;  p!=  null;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  node;  p!=  null;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  node;  p!=  null;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    null;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
45	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  def.getPrevious();  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  def.getPrevious();  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  def.getPrevious();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    def.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
46	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getPredicate();  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  expressionRoot.getPredicate();  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  expressionRoot.getPredicate();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
47	[BUG]  [BUGGY]  for(Node  p  =  predicate;  p!=  1;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  predicate;  p!=  1;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  predicate;  p!=  1;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    1;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
48	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  3;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  3;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  3;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    1;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
49	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot;  p!=  defRoot;  p  =  p.getParent())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  expressionRoot;  p!=  defRoot;  p  =  p.getParent())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  expressionRoot;  p!=  defRoot;  p  =  p.getParent())  {	  for(Node    p    =    n;    p!=    defRoot;    p    =    p.getParent())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
50	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  null;  p!=  predicate.getParent())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  null;  p!=  predicate.getParent())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  null;  p!=  predicate.getParent())  {	  for(Node    p    =    n;    p!=    predicate.getParent())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
51	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  null;  p!=  predicate.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  null;  p!=  predicate.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  null;  p!=  predicate.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
52	[BUG]  [BUGGY]  for(Node  p  =  defRoot;  p!=  null;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  defRoot;  p!=  null;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  defRoot;  p!=  null;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    defRoot;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
53	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defRoot.getParent();  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  defRoot.getParent();  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  defRoot.getParent();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
54	[BUG]  [BUGGY]  for(Node  p  =  expressionRoot;  p!=  predicate.getNext();  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  expressionRoot;  p!=  predicate.getNext();  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  expressionRoot;  p!=  predicate.getNext();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    predicate.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
55	[BUG]  [BUGGY]  Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  predicate.getParent();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  predicate.getParent();  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  predicate.getParent();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
56	[BUG]  [BUGGY]  Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  predicate.getNext();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  predicate.getNext();  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	Node  p  =  n.getFirstChild();  Predicate  <  Node>  p  =  predicate.getNext();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
57	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  def.getLastChild();  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  def.getLastChild();  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  def.getLastChild();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    def.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
58	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  def.getName();  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  def.getName();  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  def.getName();  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    def.getParent();    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
59	[BUG]  [BUGGY]  for(Node  p  =  n;  p  >=  0;  p  =  p.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p  >=  0;  p  =  p.getNext())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p  >=  0;  p  =  p.getNext())  {	  for(Node    p    =    n;    p!=    1;    p    =    p.getNext())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
60	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode;  p  =  p.getParent())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  defCfgNode;  p  =  p.getParent())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  defCfgNode;  p  =  p.getParent())  {	  for(Node    p    =    n;    p!=    defParent;    p    =    p.getParent())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
61	[BUG]  [BUGGY]  for(Node  p  =  n;  p!=  defPrettyPrinter;  p  =  p.getParent())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {    [BUGGY]  for(Node  p  =  n;  p!=  defPrettyPrinter;  p  =  p.getParent())  {  [BUGGY]    for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	503	503	3	replace	for(Node  p  =  n;  p!=  defPrettyPrinter;  p  =  p.getParent())  {	  for(Node    p    =    n;    p!=    defParent;    p    =    p.getParent())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
