bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild());  [BUGGY]  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(null,  t.getScopeRoot().getFirstChild());	cfa.process(null,  t.getScopeRoot().getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
2	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild());  [BUGGY]  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getLastChild());	cfa.process(null,  t.getScopeRoot().getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
3	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  [BUGGY]  cfa.process(null,  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(null,  t.getScopeRoot().getLastChild(),  candidates);	cfa.process(null,  t.getScopeRoot().getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
4	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild());  [BUGGY]  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getFirstChild());	cfa.process(null,  t.getScopeRoot().getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  [BUGGY]    [BUGGY]  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	  	cfa.process(null,  t.getScopeRoot().getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
6	[BUG]  [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild());  [BUGGY]  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(def,  t.getScopeRoot().getLastChild());	cfa.process(null,  t.getScopeRoot().getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
7	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getLastChild(),  def);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  [BUGGY]  cfa.process(null,  t.getScopeRoot().getLastChild(),  def);  [BUGGY]  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(null,  t.getScopeRoot().getLastChild(),  def);	cfa.process(null,  t.getScopeRoot().getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
