bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cfa.process(def,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(def,  t.getScopeRoot().getFirstChild());  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(def,  t.getScopeRoot().getFirstChild());	  cfa.process(def,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  cfa.process(t,  def.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  def.getScopeRoot().getLastChild());  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  def.getScopeRoot().getLastChild());	  cfa.process(def,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(def,  t.getScopeRoot().getLastChild(),  candidates);	  cfa.process(def,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild(),  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild(),  def);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(def,  t.getScopeRoot().getLastChild(),  def);	  cfa.process(def,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild(),  candidate);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild(),  candidate);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(def,  t.getScopeRoot().getLastChild(),  candidate);	  cfa.process(def,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  NodeTraversal.traverse(compiler,  cfa);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	NodeTraversal.traverse(compiler,  cfa);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction());  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction());	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot());  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot());	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().hasChildren());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  Preconditions.checkState(t.getScopeRoot().hasChildren());  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	Preconditions.checkState(t.getScopeRoot().hasChildren());	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getLastChild(),  candidates);	  cfa.process(t,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
14	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild(),  candidate);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild(),  candidate);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getLastChild(),  candidate);	  cfa.process(t,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
15	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getNext());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getNext());  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getNext());	  cfa.process(t,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
16	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild(),  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild(),  def);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getLastChild(),  def);	  cfa.process(t,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
17	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  candidates);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getFirstChild(),  candidates);	  cfa.process(t,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
18	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  def);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getFirstChild(),  def);	  cfa.process(t,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
19	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  candidate);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  candidate);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getFirstChild(),  candidate);	  cfa.process(t,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  numUseWithinCfgNode);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getFirstChild(),  numUseWithinCfgNode);	  cfa.process(t,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  cfg);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  cfg);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getFirstChild(),  cfg);	  cfa.process(t,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild(),  def);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild(),  def);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(null,  t.getScopeRoot().getFirstChild(),  def);	  cfa.process(null,    t.getScopeRoot().getLastChild(),    def);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
23	[BUG]  [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild(),  null);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild(),  null);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(def,  t.getScopeRoot().getLastChild(),  null);	  cfa.process(null,    t.getScopeRoot().getLastChild(),    def);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  cfa.process(cfg,  t.getScopeRoot().getLastChild(),  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(cfg,  t.getScopeRoot().getLastChild(),  def);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(cfg,  t.getScopeRoot().getLastChild(),  def);	  cfa.process(null,    t.getScopeRoot().getLastChild(),    def);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
25	[BUG]  [BUGGY]  cfa.process(cfg,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(cfg,  t.getScopeRoot().getFirstChild());  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(cfg,  t.getScopeRoot().getFirstChild());	  cfa.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
26	[BUG]  [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(null,  t.getScopeRoot().getFirstChild(),  candidates);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(null,  t.getScopeRoot().getFirstChild(),  candidates);	  cfa.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  cfa.process(candidates,  t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(candidates,  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(candidates,  t.getScopeRoot().getLastChild(),  candidates);	  cfa.process(null,    t.getScopeRoot().getLastChild(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
28	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild(),  numUseWithinUseCfgNode);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getLastChild(),  numUseWithinUseCfgNode);	  cfa.process(t,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
29	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild(),  numUseWithinCfgNode);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getLastChild(),  numUseWithinCfgNode);	  cfa.process(t,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
30	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild(),  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getLastChild(),  n);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getLastChild(),  n);	  cfa.process(t,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  cfa.getCfg();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  cfa.getCfg();  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	ControlFlowGraph  <  Node>  cfg  =  cfa.getCfg();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild()  ==  null);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  Preconditions.checkState(t.getScopeRoot()!=  null);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	Preconditions.checkState(t.getScopeRoot()!=  null);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild(),  numUseWithinUseCfgNode);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(def,  t.getScopeRoot().getLastChild(),  numUseWithinUseCfgNode);	  cfa.process(def,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
35	[BUG]  [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild(),  n);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild(),  n);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(def,  t.getScopeRoot().getLastChild(),  n);	  cfa.process(def,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
36	[BUG]  [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(def,  t.getScopeRoot().getLastChild(),  numUseWithinCfgNode);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(def,  t.getScopeRoot().getLastChild(),  numUseWithinCfgNode);	  cfa.process(def,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  cfa.process(inlinedNewDependencies,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(inlinedNewDependencies,  t.getScopeRoot().getFirstChild());  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(inlinedNewDependencies,  t.getScopeRoot().getFirstChild());	  cfa.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  numUseWithinUseCfgNode);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getFirstChild(),  numUseWithinUseCfgNode);	  cfa.process(t,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
39	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot(),  t.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot(),  t.getLastChild());  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot(),  t.getLastChild());	  cfa.process(t,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  inlinedNewDependencies);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getFirstChild(),  inlinedNewDependencies);	  cfa.process(t,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  Cfg  cfg  =  cfa.process(t,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  Cfg  cfg  =  cfa.process(t,  t.getScopeRoot().getLastChild());  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	Cfg  cfg  =  cfa.process(t,  t.getScopeRoot().getLastChild());	  cfa.process(t,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
42	[BUG]  [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(t,  t.getScopeRoot().getFirstChild(),  n);  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(t,  t.getScopeRoot().getFirstChild(),  n);	  cfa.process(t,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
43	[BUG]  [BUGGY]  cfa.process(n,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  cfa.process(n,  t.getScopeRoot().getLastChild());  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	cfa.process(n,  t.getScopeRoot().getLastChild());	  cfa.process(def,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
44	[BUG]  [BUGGY]  Node  cfg  =  t.getScopeRoot().getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  Node  cfg  =  t.getScopeRoot().getFirstChild();  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	Node  cfg  =  t.getScopeRoot().getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
45	[BUG]  [BUGGY]  Node  cfg  =  t.getScopeRoot().getLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());    [BUGGY]  Node  cfg  =  t.getScopeRoot().getLastChild();  [BUGGY]    cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	140	140	3	replace	Node  cfg  =  t.getScopeRoot().getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
