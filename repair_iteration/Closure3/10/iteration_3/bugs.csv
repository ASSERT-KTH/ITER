bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!c.inlineVariable()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.inlineVariable()  &&!c.defMetadata.depends.isEmpty())  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
2	[BUG]  [BUGGY]  if(!c.inlineVariable()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.inlineVariable()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
3	[BUG]  [BUGGY]  if(!c.defMetadata.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.defMetadata.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.inlineVariable())  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
4	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
7	[BUG]  [BUGGY]  if(c.inlineVariable()  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineVariable()  ||  c.depends.isEmpty())  {	  if(c.inlineVariable()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
8	[BUG]  [BUGGY]  if(c.inlineVariable()  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineVariable()  &&  c.defMetadata.depends.isEmpty())  {	  if(c.inlineVariable()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
9	[BUG]  [BUGGY]  if(!c.inlineVariable()  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  ||  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.inlineVariable()  ||  c.depends.isEmpty())  {	  if(c.inlineVariable()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
10	[BUG]  [BUGGY]  if(!c.inlineVariable()  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.inlineVariable()  &&  c.defMetadata.depends.isEmpty())  {	  if(c.inlineVariable()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
11	[BUG]  [BUGGY]  if(c.defMetadata.inlineVariable()  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.inlineVariable()  ||  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.inlineVariable()  ||  c.depends.isEmpty())  {	  if(c.inlineVariable()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
12	[BUG]  [BUGGY]  if(!c.inlineVariable()  &&  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  &&  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.inlineVariable()  &&  c.depends.isEmpty())  {	  if(c.inlineVariable()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
13	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.depends.isEmpty())  {	  if(c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
14	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty())  {	  if(c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
15	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.depends!=  null)  {	  if(c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
16	[BUG]  [BUGGY]  if(c.canInline()  &&  c.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.depends  ==  null)  {	  if(c.canInline()    &&    c.defMetadata.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
17	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.defMetadata.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  &&  c.defMetadata.depends  ==  null)  {	  if(c.canInline()    &&    c.defMetadata.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
18	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.defMetadata.depends  ==  null)  {	  if(c.defMetadata.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
19	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.depends  ==  null)  {	  if(c.defMetadata.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
20	[BUG]  [BUGGY]  if(c.defMetadata!=  null  ||  c.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  ||  c.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  ||  c.depends  ==  null)  {	  if(c.defMetadata.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
21	[BUG]  [BUGGY]  if(c.defMetadata  ==  null  ||  c.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata  ==  null  ||  c.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata  ==  null  ||  c.depends  ==  null)  {	  if(c.defMetadata.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
22	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.inlineVariable())  {	  if(c.defMetadata.depends!=    null    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
23	[BUG]  [BUGGY]  if(c.defMetadata!=  null  &&  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  &&  c.inlineVariable())  {	  if(c.defMetadata.depends!=    null    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
24	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.inlineVariable())  {	  if(c.defMetadata.depends!=    null    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
25	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends.length  >  0)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.defMetadata.depends.length  >  0)  {	  if(c.defMetadata.depends!=    null    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
26	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends.size()  >  0)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.defMetadata.depends.size()  >  0)  {	  if(c.defMetadata.depends!=    null    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
27	[BUG]  [BUGGY]  if(c.depends  ==  null  &&  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  &&  c.inlineVariable())  {	  if(c.defMetadata.depends!=    null    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
28	[BUG]  [BUGGY]  if(c.depends  ==  null  &&  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  &&  c.defMetadata.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  &&  c.defMetadata.depends!=  null)  {	  if(c.depends!=    null    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
29	[BUG]  [BUGGY]  if(c.defMetadata!=  null  ||  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  ||  c.inlineVariable())  {	  if(c.defMetadata.depends!=    null    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
30	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.defMetadata.depends.isEmpty())  {	  if(c.defMetadata.depends!=    null    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
31	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.inlineVariable())  {	  if(c.defMetadata.depends!=    null    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
32	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.defMetadata.depends.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.defMetadata.depends.size()  >  0)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.defMetadata.depends.size()  >  0)  {	  if(c.defMetadata.depends!=    null    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
33	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.depends  ==  null)  {	  if(c.depends!=    null    ||    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
34	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.depends!=  null)  {	  if(c.depends!=    null    ||    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
35	[BUG]  [BUGGY]  if(c.depends  ==  null  &&  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  &&  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  &&  c.depends!=  null)  {	  if(c.depends!=    null    ||    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
36	[BUG]  [BUGGY]  if(c.depends  >=  null  ||  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  >=  null  ||  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  >=  null  ||  c.depends!=  null)  {	  if(c.depends!=    null    ||    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    c.getConstructor(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild(),  candidates);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild(),  candidates);	  NodeTraversal.traverse(compiler,    c.getConstructor(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  c.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  c.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getConstructor(),  c.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    c.getConstructor(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild(),  reachingUses);	  NodeTraversal.traverse(compiler,    c.getConstructor(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild(),  candidate);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild(),  candidate);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild(),  candidate);	  NodeTraversal.traverse(compiler,    c.getConstructor(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getConstructor(),  c.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getConstructor(),  c.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  t.getConstructor(),  c.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    c.getConstructor(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getNext());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getNext());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getNext());	  NodeTraversal.traverse(compiler,    c.getConstructor(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
44	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.inlineVariable())  {	  if(c.defMetadata.depends.isEmpty()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
45	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  ||  c.inlineVariable())  {	  if(c.defMetadata.depends.isEmpty()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
46	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.defMetadata.depends.isEmpty()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.depends.isEmpty()  ||  c.inlineVariable())  {	  if(c.defMetadata.depends.isEmpty()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
47	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||!c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||!c.inlineVariable())  {	  if(c.defMetadata.depends.isEmpty()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
48	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  &&  c.depends!=  null)  {	  if(!c.canInline()    &&    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
49	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.inlineVariable()!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.inlineVariable()!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  &&  c.inlineVariable()!=  null)  {	  if(!c.canInline()    &&    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
50	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.defMetadata!=  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.defMetadata!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  &&  c.defMetadata!=  null)  {	  if(!c.canInline()    &&    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
51	[BUG]  [BUGGY]  if(c.depends  ==  null  &&  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  &&  c.defMetadata.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  &&  c.defMetadata.depends  ==  null)  {	  if(c.depends!=    null    ||    c.defMetadata.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
52	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.defMetadata  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.defMetadata  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.defMetadata  ==  null)  {	  if(c.depends!=    null    ||    c.defMetadata.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
53	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty()  &&!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.defMetadata.depends.isEmpty()  &&!c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.depends.isEmpty()  &&!c.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty()    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
55	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
56	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
57	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
58	[BUG]  [BUGGY]  if(c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {	  if(c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.depends.isEmpty())  {	  if(c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  &&!c.defMetadata.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
61	[BUG]  [BUGGY]  if(!c.depends  ==  null  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends  ==  null  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends  ==  null  ||!c.defMetadata.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
62	[BUG]  [BUGGY]  if(c!=  null  ||!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  ||!c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c!=  null  ||!c.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
63	[BUG]  [BUGGY]  if(c.canInline()  ||  c.defMetadata  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.defMetadata  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.defMetadata  ==  null)  {	  if(c.canInline()    ||    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
64	[BUG]  [BUGGY]  if(c.defMetadata.canInline()  ||  c.defMetadata!=  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.canInline()  ||  c.defMetadata!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.canInline()  ||  c.defMetadata!=  null)  {	  if(c.canInline()    ||    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
65	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVariable()!=  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVariable()!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.inlineVariable()!=  null)  {	  if(c.canInline()    ||    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
66	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.defMetadata!=  null)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.defMetadata!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  ||  c.defMetadata!=  null)  {	  if(c.canInline()    ||    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
67	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVariable()  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.inlineVariable()  ==  null)  {	  if(c.canInline()    ||    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
68	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  reachingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  reachingUses);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
69	[BUG]  [BUGGY]  NodeUtil.inlineSideEffects(c,  reachingUses);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.inlineSideEffects(c,  reachingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.inlineSideEffects(c,  reachingUses);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
70	[BUG]  [BUGGY]  NodeUtil.inlineCandidate(c,  reachingUses);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.inlineCandidate(c,  reachingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.inlineCandidate(c,  reachingUses);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
71	[BUG]  [BUGGY]  NodeUtil.removeChild(c);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.removeChild(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.removeChild(c);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
72	[BUG]  [BUGGY]  NodeUtil.inlineSideEffects(c);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.inlineSideEffects(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.inlineSideEffects(c);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
73	[BUG]  [BUGGY]  NodeUtil.removeChild(c,  reachingUses);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.removeChild(c,  reachingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.removeChild(c,  reachingUses);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
74	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
75	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  c.numUseWithinUseCfgNode  +  1;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  c.numUseWithinUseCfgNode  +  1;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  c.numUseWithinUseCfgNode  +  1;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
76	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)/|  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)/|  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)/|  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
77	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  2;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  2;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  2;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
78	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  3;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  3;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  3;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
79	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  n  +  1;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  n  +  1;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  n  +  1;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
80	[BUG]  [BUGGY]  if(c.defMetadata.canInline()  ||  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.canInline()  ||  c.defMetadata.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.canInline()  ||  c.defMetadata.depends  ==  null)  {	  if(c.defMetadata.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
81	[BUG]  [BUGGY]  if(c.defMetadata.canInline()  &&  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.canInline()  &&  c.defMetadata.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.canInline()  &&  c.defMetadata.depends!=  null)  {	  if(c.defMetadata.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
82	[BUG]  [BUGGY]  if(c.defMetadata.canInline()  ||  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.canInline()  ||  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.canInline()  ||  c.depends!=  null)  {	  if(c.defMetadata.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
83	[BUG]  [BUGGY]  if(c.defMetadata!=  null  ||  c.defMetadata.canInline()  ||  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  ||  c.defMetadata.canInline()  ||  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  ||  c.defMetadata.canInline()  ||  c.depends!=  null)  {	  if(c.defMetadata.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
84	[BUG]  [BUGGY]  if(!c.defMetadata.canInline()  ||  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.defMetadata.canInline()  ||  c.defMetadata.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.canInline()  ||  c.defMetadata.depends!=  null)  {	  if(c.defMetadata.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
85	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {	  if(!c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
86	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty());	  NodeUtil.mayHaveSideEffects(c)&&!c.defMetadata.depends.isEmpty());    	non-compiled	[CE]  <identifier>  expected	60	None	replace
87	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c)||!c.defMetadata.depends.isEmpty());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c)||!c.defMetadata.depends.isEmpty());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c)||!c.defMetadata.depends.isEmpty());	  NodeUtil.mayHaveSideEffects(c)&&!c.defMetadata.depends.isEmpty());    	non-compiled	[CE]  <identifier>  expected	60	None	replace
88	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.defMetadata.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.defMetadata.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.defMetadata.isEmpty())  {	  if(c.defMetadata!=    null    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
89	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.defMetadata.isEmpty())  {	  if(c.defMetadata!=    null    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
90	[BUG]  [BUGGY]  if(c.defMetadata!=  null  &&  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  &&  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  &&  c.depends.isEmpty())  {	  if(c.defMetadata!=    null    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
91	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.defMetadata.shouldBeReachingVariableDef.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.defMetadata.shouldBeReachingVariableDef.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.defMetadata.shouldBeReachingVariableDef.isEmpty())  {	  if(c.defMetadata!=    null    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
92	[BUG]  [BUGGY]  if(c.canInline()  &&  c.defMetadata  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.defMetadata  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.defMetadata  ==  null)  {	  if(c.canInline()    &&    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
93	[BUG]  [BUGGY]  if(c.canInline()  &&  c.inlineVariable()!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.inlineVariable()!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.inlineVariable()!=  null)  {	  if(c.canInline()    &&    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
94	[BUG]  [BUGGY]  if  (!c.canInline()  &&  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (!c.canInline()  &&  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (!c.canInline()  &&  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {	  if    (!c.canInline()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
95	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.canInline()  &&  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||!c.canInline()  &&  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||!c.canInline()  &&  c.depends.isEmpty())  {	  if    (!c.canInline()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
96	[BUG]  [BUGGY]  if  (!c.canInline()  &&  c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (!c.canInline()  &&  c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (!c.canInline()  &&  c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {	  if    (!c.canInline()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
97	[BUG]  [BUGGY]  if  (c.depends.canInline()  &&  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (c.depends.canInline()  &&  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (c.depends.canInline()  &&  c.canInline())  {	  if    (c.canInline()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
98	[BUG]  [BUGGY]  if  (!c.depends.isEmpty()  &&  c.canInline()  &&  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (!c.depends.isEmpty()  &&  c.canInline()  &&  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (!c.depends.isEmpty()  &&  c.canInline()  &&  c.depends.isEmpty())  {	  if    (c.canInline()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
99	[BUG]  [BUGGY]  if  (c.canInline()  &&  c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (c.canInline()  &&  c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (c.canInline()  &&  c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if    (c.canInline()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
100	[BUG]  [BUGGY]  if  (c.canInline()  &&  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (c.canInline()  &&  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (c.canInline()  &&  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {	  if    (c.canInline()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
101	[BUG]  [BUGGY]  if(c.depends.isEmpty()  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  &&  c.defMetadata.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
102	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.depends.isEmpty())  {	  if(c.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
103	[BUG]  [BUGGY]  if(c.depends  ==  null  &&  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  &&  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  &&  c.depends.isEmpty())  {	  if(c.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
104	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.defMetadata  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.defMetadata  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.defMetadata  ==  null)  {	  if(c.depends!=    null    &&    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  reachingUses).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  reachingUses).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  candidates);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  candidates);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  candidates);	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
110	[BUG]  [BUGGY]  if(c.depends  ==  null  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  &&  c.defMetadata.depends.isEmpty())  {	  if(c.depends!=    null    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
111	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.defMetadata.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(c.depends!=    null    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
112	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.defMetadata.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if(c.depends!=    null    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
113	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.depends.canInline())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.depends.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.depends.canInline())  {	  if(c.depends.isEmpty()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
114	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.canInline())  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  ||!c.canInline())  {	  if(c.depends.isEmpty()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
115	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.canInline())  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.canInline())  {	  if(c.depends.isEmpty()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
116	[BUG]  [BUGGY]  if(c.depends.isEmpty()  &&!c.canInline())  {  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  &&!c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  &&!c.canInline())  {	  if(c.depends.isEmpty()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
117	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.canInline())  {  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||!c.canInline())  {	  if(c.depends.isEmpty()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses,  new  GatherCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  reachingUses);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  reachingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates(),  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  GatherCandiates());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  GatherCandiates());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  GatherCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
122	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c)||!c.depends.isEmpty();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c)||!c.depends.isEmpty();  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c)||!c.depends.isEmpty();	  NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
123	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c)||  c.depends.isEmpty();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c)||  c.depends.isEmpty();  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c)||  c.depends.isEmpty();	  NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
124	[BUG]  [BUGGY]  NodeUtil.inlineSideEffects(c)&&!c.depends.isEmpty();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.inlineSideEffects(c)&&!c.depends.isEmpty();  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.inlineSideEffects(c)&&!c.depends.isEmpty();	  NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
125	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {	  if(!c.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
126	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  ||  c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
127	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.canInline()  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||!c.canInline()  ||  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||!c.canInline()  ||  c.depends.isEmpty())  {	  if(!c.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  reachingUses);	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getDependencyCfgNode().getLastChild());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getDependencyCfgNode().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getDependencyCfgNode().getLastChild());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getNext());  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getNext());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getNext());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  candidates);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  candidates);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  candidates);	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getCurrentNode().getLastChild());  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getCurrentNode().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getCurrentNode().getLastChild());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
135	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.depends.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.depends.isEmpty()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.depends.isEmpty()  ||  c.canInline())  {	  if(c.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
136	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.canInline()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.canInline()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.canInline()  ||!c.defMetadata.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
137	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.canInline()  ||  c.defMetadata.depends.canInline())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.canInline()  ||  c.defMetadata.depends.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.canInline()  ||  c.defMetadata.depends.canInline())  {	  if(c.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
138	[BUG]  [BUGGY]  if(c.canInline()  ||  c.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
139	[BUG]  [BUGGY]  if(c.canInline()  &&  c.depends!=  null  &&!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.depends!=  null  &&!c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.depends!=  null  &&!c.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
140	[BUG]  [BUGGY]  if(c.canInline()  &&  c.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
141	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  &&  c.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
142	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
143	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)/|  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)/|  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)/|  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
144	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  n;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  n;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  n;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
145	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  varName)||  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  varName)||  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  varName)||  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
146	[BUG]  [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  &&!c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  &&!c.depends.isEmpty())  {	  if(c.depends!=    null    &&!c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
147	[BUG]  [BUGGY]  if(!c.depends!=  null  &&!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends!=  null  &&!c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends!=  null  &&!c.depends.isEmpty())  {	  if(c.depends!=    null    &&!c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
148	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  ==  SIDE_EFFECT_PREDICATE;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  ==  SIDE_EFFECT_PREDICATE;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  ==  SIDE_EFFECT_PREDICATE;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    >    SIDE_EFFECT_PREDICATE;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
149	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  <  SIDE_EFFECT_PREDICATE;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  <  SIDE_EFFECT_PREDICATE;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  <  SIDE_EFFECT_PREDICATE;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    >    SIDE_EFFECT_PREDICATE;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
150	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  >=  SIDE_EFFECT_PREDICATE;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  >=  SIDE_EFFECT_PREDICATE;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  >=  SIDE_EFFECT_PREDICATE;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    >    SIDE_EFFECT_PREDICATE;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
151	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  ==  SIDE_EFFECT_PREDICATE;  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  ==  SIDE_EFFECT_PREDICATE;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  ==  SIDE_EFFECT_PREDICATE;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    >    SIDE_EFFECT_PREDICATE;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
152	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode!=  SIDE_EFFECT_PREDICATE;  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode!=  SIDE_EFFECT_PREDICATE;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode!=  SIDE_EFFECT_PREDICATE;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    >    SIDE_EFFECT_PREDICATE;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
153	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  >=  SIDE_EFFECT_PREDICATE;  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  >=  SIDE_EFFECT_PREDICATE;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  >=  SIDE_EFFECT_PREDICATE;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    >    SIDE_EFFECT_PREDICATE;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
154	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  <  SIDE_EFFECT_PREDICATE;  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  <  SIDE_EFFECT_PREDICATE;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  <  SIDE_EFFECT_PREDICATE;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    >    SIDE_EFFECT_PREDICATE;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
155	[BUG]  [BUGGY]  if(c.defMetadata!=  null  ||  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  ||  c.defMetadata.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  ||  c.defMetadata.depends  ==  null)  {	  if(c.defMetadata    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
156	[BUG]  [BUGGY]  if(c.defMetadata!=  null  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  ||!c.defMetadata.depends.isEmpty())  {	  if(c.defMetadata    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
157	[BUG]  [BUGGY]  if(c.defMetadata  ==  null  ||  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata  ==  null  ||  c.defMetadata.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata  ==  null  ||  c.defMetadata.depends  ==  null)  {	  if(c.defMetadata    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
158	[BUG]  [BUGGY]  if(c.defMetadata  ==  null  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata  ==  null  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata  ==  null  ||!c.defMetadata.depends.isEmpty())  {	  if(c.defMetadata    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
159	[BUG]  [BUGGY]  if(c.inlineVariable()  ||  c.defMetadata  ==  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||  c.defMetadata  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineVariable()  ||  c.defMetadata  ==  null)  {	  if(c.defMetadata    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
160	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.depends  ==  null)  {	  if(c.depends!=    null    &&    c.defMetadata.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
161	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata!=  null)  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.defMetadata!=  null)  {	  if(c.depends    ==    null    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.add(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.add(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.add(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.add(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
166	[BUG]  [BUGGY]  FindingUses.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  FindingUses.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	FindingUses.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
168	[BUG]  [BUGGY]  if(c.inlineVariable()  ||!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||!c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineVariable()  ||!c.depends.isEmpty())  {	  if(c.inlineVariable()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
169	[BUG]  [BUGGY]  if(c.inlineVariable()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineVariable()  &&!c.defMetadata.depends.isEmpty())  {	  if(c.inlineVariable()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
170	[BUG]  [BUGGY]  if(!c.inlineVariable()  ||!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  ||!c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.inlineVariable()  ||!c.depends.isEmpty())  {	  if(c.inlineVariable()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
171	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  ||  c.depends!=  null)  {	  if(!c.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
172	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.defMetadata.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  ||  c.defMetadata.depends  ==  null)  {	  if(!c.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
173	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.defMetadata.depends.isEmpty())  {	  if(c.defMetadata.depends    ==    null    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
174	[BUG]  [BUGGY]  if(c.defMetadata  ==  null  ||  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata  ==  null  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata  ==  null  ||  c.inlineVariable())  {	  if(c.defMetadata.depends    ==    null    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
175	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata.depends.length)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata.depends.length)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.defMetadata.depends.length)  {	  if(c.defMetadata.depends    ==    null    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
176	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata.depends.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata.depends.size()  >  0)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.defMetadata.depends.size()  >  0)  {	  if(c.defMetadata.depends    ==    null    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
177	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.canInline())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  ||  c.defMetadata.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
178	[BUG]  [BUGGY]  if(c.depends.isEmpty()  &&  c.defMetadata.canInline())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  &&  c.defMetadata.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  &&  c.defMetadata.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
179	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.mayHaveSideEffects())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.mayHaveSideEffects())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.defMetadata.mayHaveSideEffects())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
180	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.defMetadata.inlineVariable())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  c);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
187	[BUG]  [BUGGY]  FindingUses.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  FindingUses.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	FindingUses.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
188	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  reachingUses.addAll(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
189	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  &&  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  &&  c.canInline())  {	  if(!c.defMetadata.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
190	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty()  &&  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.defMetadata.depends.isEmpty()  &&  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.depends.isEmpty()  &&  c.canInline())  {	  if(!c.defMetadata.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
191	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c)||!c.defMetadata.depends.isEmpty();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c)||!c.defMetadata.depends.isEmpty();  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c)||!c.defMetadata.depends.isEmpty();	  NodeUtil.mayHaveSideEffects(c)&&!c.defMetadata.depends.isEmpty();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
192	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!c.inlineVariable();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!c.inlineVariable();  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c)&&!c.inlineVariable();	  NodeUtil.mayHaveSideEffects(c)&&!c.defMetadata.depends.isEmpty();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
193	[BUG]  [BUGGY]  if  (c.canInline()  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (c.canInline()  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (c.canInline()  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {	  if    (c.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
194	[BUG]  [BUGGY]  if  (c.canInline()  ||  c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (c.canInline()  ||  c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (c.canInline()  ||  c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if    (c.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
195	[BUG]  [BUGGY]  if  (!c.depends.isEmpty()  ||  c.canInline()  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (!c.depends.isEmpty()  ||  c.canInline()  ||  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (!c.depends.isEmpty()  ||  c.canInline()  ||  c.depends.isEmpty())  {	  if    (c.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
196	[BUG]  [BUGGY]  if  (c.depends.canInline()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (c.depends.canInline()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (c.depends.canInline()  ||  c.canInline())  {	  if    (c.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
197	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.canInline())  {	  if(c.canInline()    ||    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
198	[BUG]  [BUGGY]  if(c.isInline()  ||  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  ||  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.isInline()  ||  c.depends!=  null)  {	  if(c.canInline()    ||    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
199	[BUG]  [BUGGY]  if(!c.defMetadata.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.defMetadata.isEmpty()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.isEmpty()  ||  c.canInline())  {	  if(c.defMetadata.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
200	[BUG]  [BUGGY]  if(c.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isEmpty()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.isEmpty()  ||  c.canInline())  {	  if(c.defMetadata.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
201	[BUG]  [BUGGY]  if(c.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {	  if(c.defMetadata.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
202	[BUG]  [BUGGY]  if(c.isEmpty()  ||  c.defMetadata.canInline())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isEmpty()  ||  c.defMetadata.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.isEmpty()  ||  c.defMetadata.canInline())  {	  if(c.defMetadata.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
203	[BUG]  [BUGGY]  if(c.defMetadata.isEmpty()  &&  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.isEmpty()  &&  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.isEmpty()  &&  c.canInline())  {	  if(c.defMetadata.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
204	[BUG]  [BUGGY]  if(c.defMetadata.isEmpty()  ||!c.canInline())  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.isEmpty()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.isEmpty()  ||!c.canInline())  {	  if(c.defMetadata.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
205	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.defMetadata!=  null)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.defMetadata!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.defMetadata!=  null)  {	  if(c.defMetadata!=    null    ||    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
206	[BUG]  [BUGGY]  if(c.defMetadata!=  null  &&  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  &&  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  &&  c.depends!=  null)  {	  if(c.defMetadata!=    null    ||    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
207	[BUG]  [BUGGY]  if(c.defMetadata  ==  null  ||  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata  ==  null  ||  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata  ==  null  ||  c.depends!=  null)  {	  if(c.defMetadata!=    null    ||    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
208	[BUG]  [BUGGY]  if(!c.depends  ==  null  ||!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends  ==  null  ||!c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends  ==  null  ||!c.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
209	[BUG]  [BUGGY]  if(c.canInline()  ||  c.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
210	[BUG]  [BUGGY]  if(c.canInline()  &&  c.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
211	[BUG]  [BUGGY]  if(c.canInline()  ||  c.defMetadata!=  null  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.defMetadata!=  null  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.defMetadata!=  null  &&  c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
212	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  &&  c.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
213	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.defMetadata.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.defMetadata.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  &&  c.defMetadata.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
214	[BUG]  [BUGGY]  if(c.canInline()  &&  c.depends!=  null  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.depends!=  null  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.depends!=  null  ||  c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
215	[BUG]  [BUGGY]  if(c.defMetadata!=  null  ||  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  ||  c.defMetadata.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  ||  c.defMetadata.depends!=  null)  {	  if(c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
216	[BUG]  [BUGGY]  if(c.inlineVariable()  ||  c.defMetadata!=  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||  c.defMetadata!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineVariable()  ||  c.defMetadata!=  null)  {	  if(c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
217	[BUG]  [BUGGY]  if(c.defMetadata  ==  null  ||  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata  ==  null  ||  c.defMetadata.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata  ==  null  ||  c.defMetadata.depends!=  null)  {	  if(c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
218	[BUG]  [BUGGY]  if(c.canInline()  &&  c.depends!=  null  &&  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.depends!=  null  &&  c.defMetadata.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.depends!=  null  &&  c.defMetadata.depends!=  null)  {	  if(c.canInline()    &&    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
219	[BUG]  [BUGGY]  if(c.depends.canInline()  &&  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.canInline()  &&  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.canInline()  &&  c.depends!=  null)  {	  if(c.canInline()    &&    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
220	[BUG]  [BUGGY]  if(c.defMetadata.depends  ==  null  ||  c.canInline()  ||  c.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.depends  ==  null  ||  c.canInline()  ||  c.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.depends  ==  null  ||  c.canInline()  ||  c.depends  ==  null)  {	  if(c.canInline()    ||    c.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
221	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.canInline())  {	  if(c.canInline()    ||    c.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
222	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  ||  c.depends  ==  null)  {	  if(c.canInline()    ||    c.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
223	[BUG]  [BUGGY]  if(c.isInline()  ||  c.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  ||  c.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.isInline()  ||  c.depends  ==  null)  {	  if(c.canInline()    ||    c.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
224	[BUG]  [BUGGY]  if(c.defMetadata.canInline()  &&  c.defMetadata  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.canInline()  &&  c.defMetadata  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.canInline()  &&  c.defMetadata  ==  null)  {	  if(c.defMetadata.canInline()    &&    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
225	[BUG]  [BUGGY]  if(!c.defMetadata.canInline()  &&  c.defMetadata!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.defMetadata.canInline()  &&  c.defMetadata!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.canInline()  &&  c.defMetadata!=  null)  {	  if(c.defMetadata.canInline()    &&    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
226	[BUG]  [BUGGY]  if(c.defMetadata!=  null  &&  c.defMetadata.canInline())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  &&  c.defMetadata.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  &&  c.defMetadata.canInline())  {	  if(c.defMetadata.canInline()    &&    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
227	[BUG]  [BUGGY]  if(!c.inlineMetadata())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineMetadata())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.inlineMetadata())  {	  if(c.inlineMetadata())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
228	[BUG]  [BUGGY]  if(c.inlineVars())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVars())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineVars())  {	  if(c.inlineMetadata())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
229	[BUG]  [BUGGY]  if(c.inlineVariable()  ||  c.inlineMetadata())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||  c.inlineMetadata())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineVariable()  ||  c.inlineMetadata())  {	  if(c.inlineMetadata())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
230	[BUG]  [BUGGY]  if(c.defMetadata.inline())  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.inline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.inline())  {	  if(c.inlineMetadata())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
231	[BUG]  [BUGGY]  if(c.defMetadata.depends!=  null  &&  c.inlineMetadata())  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.depends!=  null  &&  c.inlineMetadata())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.depends!=  null  &&  c.inlineMetadata())  {	  if(c.inlineMetadata())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
232	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.inlineVariable()  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.inlineVariable()  ||  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  ||  c.inlineVariable()  ||  c.depends.isEmpty())  {	  if(!c.canInline()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
233	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||!c.depends.isEmpty()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||!c.depends.isEmpty()  ||  c.canInline())  {	  if(!c.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
234	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||  c.canInline())  {	  if(!c.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  reachingUses);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  inlinedNewDependencies);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  def);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  def);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  def);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates());	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  inlineCfgNode);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  inlineCfgNode);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  inlineCfgNode);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  this);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
241	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  seekingUses);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  seekingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  seekingUses);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
242	[BUG]  [BUGGY]  c.depends.clear();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  c.depends.clear();  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	c.depends.clear();	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
243	[BUG]  [BUGGY]  c.defMetadata.inline(c);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  c.defMetadata.inline(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	c.defMetadata.inline(c);	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
244	[BUG]  [BUGGY]  c.defMetadata.depends.add(c);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  c.defMetadata.depends.add(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	c.defMetadata.depends.add(c);	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
245	[BUG]  [BUGGY]  c.defMetadata.inline(c,  reachingUses);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  c.defMetadata.inline(c,  reachingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	c.defMetadata.inline(c,  reachingUses);	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
246	[BUG]  [BUGGY]  c.defMetadata.reset();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  c.defMetadata.reset();  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	c.defMetadata.reset();	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
247	[BUG]  [BUGGY]  c.defMetadata.depends.remove(c);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  c.defMetadata.depends.remove(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	c.defMetadata.depends.remove(c);	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
248	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  numUseWithinUseCfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
250	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  c);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
251	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.canInline())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.depends.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
252	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
253	[BUG]  [BUGGY]  if(c.depends.isEmpty()  &&  c.defMetadata.depends.canInline())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  &&  c.defMetadata.depends.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  &&  c.defMetadata.depends.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
254	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
255	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.canInline())  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  ||  c.depends.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  ||  c.depends.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
256	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.depends.hasInline())  {  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.depends.hasInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.defMetadata.depends.hasInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  candidates);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  candidates);	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
259	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  reachingUses,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(c.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
261	[BUG]  [BUGGY]  if(c!=  null  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c!=  null  ||!c.defMetadata.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
262	[BUG]  [BUGGY]  if(c  ==  null  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c  ==  null  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c  ==  null  ||!c.defMetadata.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.add(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  reachingUses.add(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  def,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.add(c);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
265	[BUG]  [BUGGY]  TokenTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  TokenTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	TokenTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    reachingUses.addAll(c);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
266	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.defMetadata.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
267	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
268	[BUG]  [BUGGY]  if(c.canInline()  &&  c.defMetadata!=  null  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.defMetadata!=  null  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.defMetadata!=  null  &&  c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
269	[BUG]  [BUGGY]  if(c.canInline()  ||  c.defMetadata!=  null  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.defMetadata!=  null  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.defMetadata!=  null  ||  c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
270	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.defMetadata.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
271	[BUG]  [BUGGY]  if(c.canInline()  &&  c.depends  ==  null  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.depends  ==  null  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.depends  ==  null  &&  c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
272	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  &&  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  &&  c.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
273	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    >    SIDE_EFFECT_PREDICATE;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
274	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinCfgNode)&&  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinCfgNode)&&  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinCfgNode)&&  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    >    SIDE_EFFECT_PREDICATE;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
275	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  SIDE_EFFECT_PREDICATE)&&  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  SIDE_EFFECT_PREDICATE)&&  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  SIDE_EFFECT_PREDICATE)&&  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    >    SIDE_EFFECT_PREDICATE;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
276	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinOseCfgNode)&&  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinOseCfgNode)&&  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinOseCfgNode)&&  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    >    SIDE_EFFECT_PREDICATE;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
277	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  def);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  def);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  def);	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
278	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getDependencyRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getDependencyRoot().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getDependencyRoot().getLastChild());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
279	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
280	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.depends.canBeEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.depends.canBeEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.depends.canBeEmpty())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
281	[BUG]  [BUGGY]  if(c!=  null  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c!=  null  &&!c.defMetadata.depends.isEmpty())  {	  if(c.depends!=    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
282	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.canInline())  {	  if(!c.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
283	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  &&  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  &&  c.canInline())  {	  if(!c.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
284	[BUG]  [BUGGY]  if(c.defMetadata!=  null  ||  c.defMetadata.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  ||  c.defMetadata.isEmpty()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  ||  c.defMetadata.isEmpty()  ||  c.canInline())  {	  if(c.defMetadata.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
285	[BUG]  [BUGGY]  if(c.defMetadata!=  null  &&  c.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  &&  c.isEmpty()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  &&  c.isEmpty()  ||  c.canInline())  {	  if(c.defMetadata.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
286	[BUG]  [BUGGY]  if(!c.defMetadata.isEmpty()  &&  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.defMetadata.isEmpty()  &&  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.isEmpty()  &&  c.canInline())  {	  if(c.defMetadata.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
287	[BUG]  [BUGGY]  if(c.defMetadata.canInline()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.canInline()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.canInline()  ||  c.canInline())  {	  if(c.defMetadata.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
288	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
289	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  *  1;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  *  1;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  *  1;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
290	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  inlineNewDependencies);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  inlineNewDependencies);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
291	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends.length)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends.length)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.defMetadata.depends.length)  {	  if(c.defMetadata.depends!=    null    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
292	[BUG]  [BUGGY]  if(c.defMetadata!=  null  &&  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  &&  c.defMetadata.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  &&  c.defMetadata.depends!=  null)  {	  if(c.defMetadata.depends!=    null    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
293	[BUG]  [BUGGY]  if(c.defMetadata!=  null  &&  c.defMetadata.canInline()  ||  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  &&  c.defMetadata.canInline()  ||  c.defMetadata.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  &&  c.defMetadata.canInline()  ||  c.defMetadata.depends!=  null)  {	  if(c.defMetadata.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
294	[BUG]  [BUGGY]  if(c.defMetadata  ==  null  ||  c.defMetadata.canInline()  ||  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata  ==  null  ||  c.defMetadata.canInline()  ||  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata  ==  null  ||  c.defMetadata.canInline()  ||  c.depends!=  null)  {	  if(c.defMetadata.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
295	[BUG]  [BUGGY]  if(!c.defMetadata.canInline()  &&  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.defMetadata.canInline()  &&  c.defMetadata.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.canInline()  &&  c.defMetadata.depends!=  null)  {	  if(c.defMetadata.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
296	[BUG]  [BUGGY]  if(c.inlineMetadata()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineMetadata()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineMetadata()  ||!c.defMetadata.depends.isEmpty())  {	  if(c.inlineMetadata())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
297	[BUG]  [BUGGY]  if(c.inlineMetadata()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineMetadata()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineMetadata()  ||  c.defMetadata.depends.isEmpty())  {	  if(c.inlineMetadata())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
298	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  &&  c.depends  ==  null)  {	  if(c.canInline()    ||    c.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
299	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.inlineCfgNode())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.inlineCfgNode())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.inlineCfgNode())  {	  if(c.defMetadata.depends.isEmpty()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
300	[BUG]  [BUGGY]  if(c.defMetadata.canInline()  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.canInline()  ||  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.canInline()  ||  c.depends.isEmpty())  {	  if(!c.canInline()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
301	[BUG]  [BUGGY]  if(c  ==  null  ||!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c  ==  null  ||!c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c  ==  null  ||!c.depends.isEmpty())  {	  if(c.depends    ==    null    ||!c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
302	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
303	[BUG]  [BUGGY]  if(c.defMetadata.canInline())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.canInline())  {	  if(c.defMetadata.canInline()    &&    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
304	[BUG]  [BUGGY]  if(c.defMetadata!=  null  ||  c.defMetadata.canInline())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  ||  c.defMetadata.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  ||  c.defMetadata.canInline())  {	  if(c.defMetadata.canInline()    &&    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
305	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(c.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
306	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  def);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  def);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  def);	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	58	None	replace
307	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.canInline())  {	  if(c.canInline()    &&    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
308	[BUG]  [BUGGY]  if  (c.depends.canInline()  &&  c.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (c.depends.canInline()  &&  c.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (c.depends.canInline()  &&  c.isEmpty())  {	  if    (c.canInline()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
309	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.depends.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.depends.isEmpty()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.depends.isEmpty()  ||  c.canInline())  {	  if(c.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
310	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.canInline())  {	  if(c.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
311	[BUG]  [BUGGY]  if(c.depends.isEmpty()  &&  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  &&  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  &&  c.canInline())  {	  if(c.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
312	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
313	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.defMetadata.isEmpty())  {	  if(c.defMetadata!=    null    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
314	[BUG]  [BUGGY]  if(c.defMetadata  ==  null  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata  ==  null  ||  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata  ==  null  ||  c.depends.isEmpty())  {	  if(c.defMetadata!=    null    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
315	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.inlineVariable())  {	  if(c.canInline()    ||    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
316	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  &&  c.defMetadata.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
317	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.defMetadata.depends!=  null)  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
318	[BUG]  [BUGGY]  if(c.canInline()  &&  c.defMetadata!=  null  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.defMetadata!=  null  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.defMetadata!=  null  &&!c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
319	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
320	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.depends.isEmpty()  ||!c.canInline())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.depends.isEmpty()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.depends.isEmpty()  ||!c.canInline())  {	  if(c.depends.isEmpty()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
321	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.canInline())  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||!c.canInline())  {	  if(c.depends.isEmpty()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
322	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty();  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty();	  NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
323	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty();  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty();	  NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
324	[BUG]  [BUGGY]  if(!c.defMetadata.inline())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.defMetadata.inline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.inline())  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
325	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty()  ||!c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.defMetadata.depends.isEmpty()  ||!c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.depends.isEmpty()  ||!c.inlineVariable())  {	  if(!c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  TokenTraversal());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  TokenTraversal());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  TokenTraversal());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  FillCandiates());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  FillCandiates());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  FillCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  TokenTraversalCandiates());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  TokenTraversalCandiates());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  TokenTraversalCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  JoinCandiates());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  JoinCandiates());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  JoinCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
330	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.depends.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.depends.isEmpty()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||!c.defMetadata.depends.isEmpty()  ||  c.canInline())  {	  if(!c.defMetadata.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
331	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.depends.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.depends.isEmpty()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&!c.defMetadata.depends.isEmpty()  ||  c.canInline())  {	  if(!c.defMetadata.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild(),  def);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild(),  def);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild(),  def);	  NodeTraversal.traverse(compiler,    c.getConstructor(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  def.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  def.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getConstructor(),  def.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    c.getConstructor(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  n,  t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  n,  t.getScopeRoot().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getConstructor(),  n,  t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    c.getConstructor(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
335	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.defMetadata.canInline())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.defMetadata.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.defMetadata.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
336	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.depends.isEmpty()  ||  c.defMetadata.canInline())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.depends.isEmpty()  ||  c.defMetadata.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.depends.isEmpty()  ||  c.defMetadata.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
337	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.depends.isEmpty()  ||  c.defMetadata.canInline())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.depends.isEmpty()  ||  c.defMetadata.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.depends.isEmpty()  ||  c.defMetadata.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
338	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&  c.defMetadata.canInline())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  &&  c.defMetadata.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  &&  c.defMetadata.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
339	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends  ==  null  &&  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends  ==  null  &&  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.defMetadata.depends  ==  null  &&  c.depends.isEmpty())  {	  if(c.depends!=    null    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
340	[BUG]  [BUGGY]  if  (!c.depends.canInline()  &&  c.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (!c.depends.canInline()  &&  c.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (!c.depends.canInline()  &&  c.isEmpty())  {	  if    (!c.canInline()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
341	[BUG]  [BUGGY]  if  (c.depends!=  null  &&!c.canInline()  &&  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (c.depends!=  null  &&!c.canInline()  &&  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (c.depends!=  null  &&!c.canInline()  &&  c.depends.isEmpty())  {	  if    (!c.canInline()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
342	[BUG]  [BUGGY]  if  (!c.canInline()  &&  c.defMetadata.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (!c.canInline()  &&  c.defMetadata.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (!c.canInline()  &&  c.defMetadata.isEmpty())  {	  if    (!c.canInline()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
343	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
344	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  def);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  def);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  def);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
345	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.copyCurrentStructure(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.copyCurrentStructure(c);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
346	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.defMetadata.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  ||  c.defMetadata.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  ||  c.defMetadata.isEmpty())  {	  if(!c.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
347	[BUG]  [BUGGY]  if(!c.depends.canInline()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.canInline()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.canInline()  ||  c.canInline())  {	  if(!c.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
348	[BUG]  [BUGGY]  if(c.isInline()  &&  c.defMetadata!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  &&  c.defMetadata!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.isInline()  &&  c.defMetadata!=  null)  {	  if(c.canInline()    &&    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
349	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
350	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
351	[BUG]  [BUGGY]  if(c.defMetadata.inlineVariable()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.inlineVariable()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.inlineVariable()  ||  c.defMetadata.depends.isEmpty())  {	  if(c.inlineVariable()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
352	[BUG]  [BUGGY]  if(c.inlineVariable()  ||  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVariable()  ||  c.defMetadata.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineVariable()  ||  c.defMetadata.depends!=  null)  {	  if(c.inlineVariable()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
353	[BUG]  [BUGGY]  c.defMetadata.clear();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  c.defMetadata.clear();  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	c.defMetadata.clear();	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
354	[BUG]  [BUGGY]  if  (c.canInline()  ||  c.defMetadata.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if  (c.canInline()  ||  c.defMetadata.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (c.canInline()  ||  c.defMetadata.isEmpty())  {	  if    (c.canInline()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
355	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
356	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
357	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&  c.defMetadata.depends.canInline())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  &&  c.defMetadata.depends.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  &&  c.defMetadata.depends.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
358	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.defMetadata.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.defMetadata.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  &&  c.defMetadata.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null    &&!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
359	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.isEmpty()  ||  c.defMetadata.depends.canInline())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.isEmpty()  ||  c.defMetadata.depends.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.isEmpty()  ||  c.defMetadata.depends.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
360	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.defMetadata.inlineVariable())  {	  if(c.defMetadata.depends!=    null    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
361	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.inlineCfgNode)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.inlineCfgNode)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.inlineCfgNode)  {	  if(c.defMetadata.depends!=    null    &&    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
362	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
363	[BUG]  [BUGGY]  if(c.canInline()  &&  c.depends!=  null  &&  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.depends!=  null  &&  c.defMetadata.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.depends!=  null  &&  c.defMetadata.depends  ==  null)  {	  if(c.canInline()    &&    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
364	[BUG]  [BUGGY]  if(c.inlineVars)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.inlineVars)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineVars)  {	  if(c.inlineMetadata())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
365	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.depends.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.depends.length  >  0)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.defMetadata.depends.length  >  0)  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
366	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.depends.equals(c.depends))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.depends.equals(c.depends))  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.defMetadata.depends.equals(c.depends))  {	  if(c.depends.isEmpty()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
367	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.canInlineBlock())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||!c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||!c.canInlineBlock())  {	  if(c.depends.isEmpty()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
368	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.canInline())  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||!c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||!c.canInline())  {	  if(c.depends.isEmpty()    ||!c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
369	[BUG]  [BUGGY]  if(c.depends.canInline()  &&  c.canInlineBlock())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.canInline()  &&  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.canInline()  &&  c.canInlineBlock())  {	  if    (c.canInline()    &&    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  JoinedCandiates());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  JoinedCandiates());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  JoinedCandiates());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
371	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty()  ||  c.canInline()  ||  c.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.defMetadata.depends.isEmpty()  ||  c.canInline()  ||  c.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.depends.isEmpty()  ||  c.canInline()  ||  c.depends  ==  null)  {	  if(c.canInline()    ||    c.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
372	[BUG]  [BUGGY]  if(c.canInline()  ||  c.depends  ==  null  ||  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.depends  ==  null  ||  c.defMetadata.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.depends  ==  null  ||  c.defMetadata.depends  ==  null)  {	  if(c.canInline()    ||    c.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
373	[BUG]  [BUGGY]  if(c.canInline()  ||  c.depends  ==  null  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.depends  ==  null  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.depends  ==  null  ||!c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    ||    c.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
374	[BUG]  [BUGGY]  if(c.defMetadata!=  null  &&  c.defMetadata.canInline()  ||  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  &&  c.defMetadata.canInline()  ||  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  &&  c.defMetadata.canInline()  ||  c.depends!=  null)  {	  if(c.defMetadata.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
375	[BUG]  [BUGGY]  NodeUtil.mayEffectMutableState(c)&&!c.depends.isEmpty();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayEffectMutableState(c)&&!c.depends.isEmpty();  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayEffectMutableState(c)&&!c.depends.isEmpty();	  NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
376	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
377	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.canInline()  ||  c.depends.canInline())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.canInline()  ||  c.depends.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.defMetadata.canInline()  ||  c.depends.canInline())  {	  if(c.depends.isEmpty()    ||    c.defMetadata.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
378	[BUG]  [BUGGY]  NodeUtil.mayEffectMutableState(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayEffectMutableState(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayEffectMutableState(c,  numUseWithinUseCfgNode)&&  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    =    numUseWithinUseCfgNode;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
379	[BUG]  [BUGGY]  if(c.defMetadata.canInline()  &&  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.canInline()  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.canInline()  &&  c.inlineVariable())  {	  if(c.defMetadata.canInline()    &&    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
380	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||    c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
381	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.depends!=  null  ||  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.depends!=  null  ||  c.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.depends!=  null  ||  c.depends!=  null)  {	  if(c.depends!=    null    ||    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
382	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  &&!c.defMetadata.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
383	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getDeepestCfgNode().getLastChild());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getDeepestCfgNode().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getDeepestCfgNode().getLastChild());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
384	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getDependentCfgNode().getLastChild());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getDependentCfgNode().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getDependentCfgNode().getLastChild());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
385	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getDependencyConstants().getLastChild());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getDependencyConstants().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getDependencyConstants().getLastChild());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	38	None	replace
386	[BUG]  [BUGGY]  if(c.depends  >=  null  &&  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  >=  null  &&  c.defMetadata.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  >=  null  &&  c.defMetadata.depends  ==  null)  {	  if(c.depends!=    null    ||    c.defMetadata.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
387	[BUG]  [BUGGY]  if(!c.defMetadata.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.defMetadata.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty()    ||!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
388	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  def);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  def);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  def);	  NodeTraversal.traverse(compiler,    c,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
389	[BUG]  [BUGGY]  if(c.isInline()  &&  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  &&  c.defMetadata.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.isInline()  &&  c.defMetadata.depends  ==  null)  {	  if(c.canInline()    &&    c.defMetadata.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
390	[BUG]  [BUGGY]  if(!c.inlineVariable()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.inlineVariable()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.inlineVariable()  ||  c.defMetadata.depends.isEmpty())  {	  if(c.inlineVariable()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
391	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.redeclareVarsInsideBranch(c);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
392	[BUG]  [BUGGY]  NodeUtil.inferSideEffects(c,  def);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.inferSideEffects(c,  def);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.inferSideEffects(c,  def);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
393	[BUG]  [BUGGY]  NodeUtil.inlineSideEffects(c,  def);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.inlineSideEffects(c,  def);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.inlineSideEffects(c,  def);	  NodeUtil.mayHaveSideEffects(c);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
394	[BUG]  [BUGGY]  if(c.canInline()  ||  c.inlineVars!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.inlineVars!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.inlineVars!=  null)  {	  if(c.canInline()    ||    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
395	[BUG]  [BUGGY]  if(c.defMetadata.isEmpty()  ||  c.canInline()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata.isEmpty()  ||  c.canInline()  ||  c.canInline())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.isEmpty()  ||  c.canInline()  ||  c.canInline())  {	  if(c.defMetadata.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
396	[BUG]  [BUGGY]  if(c.isInline()  ||  c.defMetadata.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  ||  c.defMetadata.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.isInline()  ||  c.defMetadata.isEmpty())  {	  if(c.defMetadata.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
397	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.defMetadata.depends!=  null  &&  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(!c.canInline()  &&  c.defMetadata.depends!=  null  &&  c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  &&  c.defMetadata.depends!=  null  &&  c.inlineVariable())  {	  if(!c.canInline()    &&    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
398	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.canInline()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.canInline()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.canInline()  ||  c.defMetadata.depends.isEmpty())  {	  if(c.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
399	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.canInline()  ||  c.defMetadata.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.canInline()  ||  c.defMetadata.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.canInline()  ||  c.defMetadata.inlineVariable())  {	  if(c.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
400	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.canInlineBlock())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.canInlineBlock())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.canInlineBlock())  {	  if(c.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
401	[BUG]  [BUGGY]  if(c.canInline()  &&  c.defMetadata!=  null  &&  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.defMetadata!=  null  &&  c.defMetadata.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.defMetadata!=  null  &&  c.defMetadata.depends!=  null)  {	  if(c.canInline()    &&    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
402	[BUG]  [BUGGY]  if(c.canInline()  &&  c.defMetadata!=  null  &&  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  &&  c.defMetadata!=  null  &&  c.defMetadata.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.defMetadata!=  null  &&  c.defMetadata.depends  ==  null)  {	  if(c.canInline()    &&    c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
403	[BUG]  [BUGGY]  if(c.isInline()  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.isInline()  ||  c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.isInline()  ||  c.depends.isEmpty())  {	  if(!c.canInline()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
404	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.inlinePath())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends.isEmpty()  ||  c.inlinePath())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.inlinePath())  {	  if(c.defMetadata.depends.isEmpty()    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
405	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends  >=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends  >=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.defMetadata.depends  >=  null)  {	  if(c.depends!=    null    &&    c.defMetadata.depends    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
406	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {	  if(c.depends!=    null    &&!c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
407	[BUG]  [BUGGY]  if(c!=  null  &&!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c!=  null  &&!c.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c!=  null  &&!c.depends.isEmpty())  {	  if(c.depends!=    null    &&!c.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
408	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.defMetadata.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends!=  null  ||  c.defMetadata.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.defMetadata.inlineVariable())  {	  if(c.defMetadata.depends!=    null    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
409	[BUG]  [BUGGY]  if(c.defMetadata!=  null  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.defMetadata!=  null  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  &&!c.defMetadata.depends.isEmpty())  {	  if(c.defMetadata!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
410	[BUG]  [BUGGY]  if(c  ==  null  ||  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c  ==  null  ||  c.defMetadata.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c  ==  null  ||  c.defMetadata.depends  ==  null)  {	  if(c.defMetadata    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
411	[BUG]  [BUGGY]  NodeUtil.mayEffectMutableState(c)&&!c.defMetadata.depends.isEmpty();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayEffectMutableState(c)&&!c.defMetadata.depends.isEmpty();  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayEffectMutableState(c)&&!c.defMetadata.depends.isEmpty();	  NodeUtil.mayHaveSideEffects(c)&&!c.defMetadata.depends.isEmpty();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
412	[BUG]  [BUGGY]  c.defMetadata.remove(c);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  c.defMetadata.remove(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	c.defMetadata.remove(c);	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
413	[BUG]  [BUGGY]  c.defMetadata.add(c);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  c.defMetadata.add(c);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	c.defMetadata.add(c);	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
414	[BUG]  [BUGGY]  c.defMetadata.removeAllDependencies();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  c.defMetadata.removeAllDependencies();  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	c.defMetadata.removeAllDependencies();	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
415	[BUG]  [BUGGY]  c.defMetadata.put(varName,  c.depends);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  c.defMetadata.put(varName,  c.depends);  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	c.defMetadata.put(varName,  c.depends);	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
416	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.defMetadata.inlineVariable())  {	  if(c.defMetadata.depends    ==    null    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
417	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.depends  ==  null  ||!c.inlineVariable())  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||!c.inlineVariable())  {	  if(c.defMetadata.depends    ==    null    ||    c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
418	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  SIDE_EFFECT_PREDICATE)||  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  SIDE_EFFECT_PREDICATE)||  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  SIDE_EFFECT_PREDICATE)||  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;	  NodeUtil.mayHaveSideEffects(c,    numUseWithinUseCfgNode)||    numUseWithinUseCfgNode    >    SIDE_EFFECT_PREDICATE;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
419	[BUG]  [BUGGY]  if(c.canInline()  ||  c.depends!=  null  &&  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.depends!=  null  &&  c.defMetadata.depends!=  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.depends!=  null  &&  c.defMetadata.depends!=  null)  {	  if(c.canInline()    ||    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
420	[BUG]  [BUGGY]  if(c.canInline()  ||  c.depends!=  null  &&  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  if(c.canInline()  ||  c.depends!=  null  &&  c.defMetadata.depends  ==  null)  {  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.depends!=  null  &&  c.defMetadata.depends  ==  null)  {	  if(c.canInline()    ||    c.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
421	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getChildCount());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getChildCount());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getChildCount());	  NodeTraversal.traverse(compiler,    c.getConstructor(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
422	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getCurrentNode().getLastChild());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getCurrentNode().getLastChild());  [BUGGY]      c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getCurrentNode().getLastChild());	  NodeTraversal.traverse(compiler,    c.getConstructor(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
