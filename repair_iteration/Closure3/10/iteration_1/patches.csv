bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(!c.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  if(c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty()  ||!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(!c.defMetadata.depends.isEmpty()  ||!c.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.depends.isEmpty()  ||!c.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(!c.defMetadata.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.depends.isEmpty()  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends.isEmpty()  ||  c.canInline())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.canInline())  {	  if(c.defMetadata.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  if(!c.depends.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(!c.depends.isEmpty()  ||  c.canInline())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.depends.isEmpty()  ||  c.canInline())  {	  if(c.defMetadata.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.defMetadata.depends.canInline())  {	  if(c.defMetadata.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(!c.defMetadata.depends.isEmpty()  ||  c.canInline())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.defMetadata.depends.isEmpty()  ||  c.canInline())  {	  if(c.defMetadata.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||!c.canInline())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends.isEmpty()  ||!c.canInline())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||!c.canInline())  {	  if(c.defMetadata.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  if(c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null)  {	  if(c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends!=  null  ||  c.defMetadata.depends!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.defMetadata.depends!=  null)  {	  if(c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  if(c.defMetadata!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.defMetadata!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null)  {	  if(c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
15	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends!=  null  ||  c.depends!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.depends!=  null)  {	  if(c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  if(c.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends  ==  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null)  {	  if(c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  if(c.defMetadata!=  null  ||  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.defMetadata!=  null  ||  c.depends!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  ||  c.depends!=  null)  {	  if(c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
18	[BUG]  [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends  ==  null  ||  c.defMetadata.depends!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||  c.defMetadata.depends!=  null)  {	  if(c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
19	[BUG]  [BUGGY]  if(c.inlineVariable()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlineVariable()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineVariable()  ||  c.defMetadata.depends.isEmpty())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  if(c.inlineVariable()  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlineVariable()  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineVariable()  ||!c.defMetadata.depends.isEmpty())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  if(!c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(!c.inlineVariable())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.inlineVariable())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  if(c.defMetadata.depends.isEmpty()  ||  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.defMetadata.depends.isEmpty()  ||  c.inlineVariable())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.depends.isEmpty()  ||  c.inlineVariable())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  if(c.defMetadata.depends!=  null  &&  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.defMetadata.depends!=  null  &&  c.inlineVariable())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.depends!=  null  &&  c.inlineVariable())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  if(c.inlineMetadata())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.inlineMetadata())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.inlineMetadata())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
25	[BUG]  [BUGGY]  if(c.canInline()  ||  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.depends!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.depends!=  null)  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  if(c.canInline()  &&  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  &&  c.defMetadata.depends  ==  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.defMetadata.depends  ==  null)  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  if(c.canInline()  &&  c.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  &&  c.depends!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.depends!=  null)  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
28	[BUG]  [BUGGY]  if(!c.canInline()  &&  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(!c.canInline()  &&  c.defMetadata.depends!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  &&  c.defMetadata.depends!=  null)  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]  if(c.canInline()  ||  c.defMetadata!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.defMetadata!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.defMetadata!=  null)  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  if(c.canInline()  ||  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.defMetadata.depends  ==  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.defMetadata.depends  ==  null)  {	  if(c.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  if(c.canInline()  ||  c.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  ||  c.depends  ==  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  ||  c.depends  ==  null)  {	  if(c.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(!c.canInline()  ||  c.defMetadata.depends!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  ||  c.defMetadata.depends!=  null)  {	  if(c.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!c.defMetadata.depends.isEmpty();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!c.defMetadata.depends.isEmpty();  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c)&&!c.defMetadata.depends.isEmpty();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild());  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getConstructor(),  t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
36	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  =  numUseWithinUseCfgNode  +  1;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
37	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty();  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c)&&!c.depends.isEmpty();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
39	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c,  numUseWithinUseCfgNode)||  numUseWithinUseCfgNode  >  SIDE_EFFECT_PREDICATE;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
40	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.defMetadata.depends.isEmpty())  {	  if    (c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
41	[BUG]  [BUGGY]  if  (c.canInline()  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if  (c.canInline()  ||  c.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (c.canInline()  ||  c.depends.isEmpty())  {	  if    (c.canInline()    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
42	[BUG]  [BUGGY]  if  (!c.canInline()  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if  (!c.canInline()  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (!c.canInline()  &&  c.defMetadata.depends.isEmpty())  {	  if    (c.canInline()    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
43	[BUG]  [BUGGY]  if  (!c.canInline()  &&  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if  (!c.canInline()  &&  c.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (!c.canInline()  &&  c.depends.isEmpty())  {	  if    (c.canInline()    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  if  (c.canInline()  &&  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if  (c.canInline()  &&  c.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if  (c.canInline()  &&  c.depends.isEmpty())  {	  if    (c.canInline()    &&    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(!c.canInline()  ||  c.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  ||  c.depends.isEmpty())  {	  if(c.canInline()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
46	[BUG]  [BUGGY]  if(!c.canInline()  ||  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(!c.canInline()  ||  c.defMetadata.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(!c.canInline()  ||  c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    ||    c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
47	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.canInline())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends.isEmpty()  ||  c.defMetadata.canInline())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.defMetadata.canInline())  {	  if(c.defMetadata.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
48	[BUG]  [BUGGY]  if(c.canInline()  &&  c.defMetadata!=  null)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  &&  c.defMetadata!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.defMetadata!=  null)  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  if(c.defMetadata.canInline()  &&  c.defMetadata!=  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.defMetadata.canInline()  &&  c.defMetadata!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.canInline()  &&  c.defMetadata!=  null)  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends  ==  null  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  if(c.depends!=  null  ||!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends!=  null  ||!c.defMetadata.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||!c.defMetadata.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
53	[BUG]  [BUGGY]  if(c.defMetadata  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.defMetadata  ==  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata  ==  null)  {	  if(c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
54	[BUG]  [BUGGY]  if(c.depends!=  null  ||  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends!=  null  ||  c.defMetadata.depends  ==  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  ||  c.defMetadata.depends  ==  null)  {	  if(c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
59	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(c);  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
60	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!c.defMetadata.depends.isEmpty());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!c.defMetadata.depends.isEmpty());  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeUtil.mayHaveSideEffects(c)&&!c.defMetadata.depends.isEmpty());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
61	[BUG]  [BUGGY]  if(c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.defMetadata.depends  ==  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.depends  ==  null)  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
62	[BUG]  [BUGGY]  if(c.defMetadata.depends!=  null  ||  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.defMetadata.depends!=  null  ||  c.inlineVariable())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.depends!=  null  ||  c.inlineVariable())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
63	[BUG]  [BUGGY]  if(c.defMetadata.depends  ==  null  ||  c.inlineVariable())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.defMetadata.depends  ==  null  ||  c.inlineVariable())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.depends  ==  null  ||  c.inlineVariable())  {	  if(c.inlineVariable())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
64	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {	  if    (c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
65	[BUG]  [BUGGY]  if(c.defMetadata.canInline()  ||  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.defMetadata.canInline()  ||  c.defMetadata.depends!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.canInline()  ||  c.defMetadata.depends!=  null)  {	  if(c.canInline()    ||    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
66	[BUG]  [BUGGY]  if(c.defMetadata.isEmpty()  ||  c.canInline())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.defMetadata.isEmpty()  ||  c.canInline())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata.isEmpty()  ||  c.canInline())  {	  if(c.defMetadata.depends.isEmpty()    ||    c.canInline())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates());  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates());	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
68	[BUG]  [BUGGY]  c.defMetadata.depends.clear();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  c.defMetadata.depends.clear();  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	c.defMetadata.depends.clear();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  c);  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  c);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.add(c);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  reachingUses.addAll(c);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
72	[BUG]  [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends!=  null  &&!c.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&!c.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
73	[BUG]  [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends  ==  null  ||!c.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends  ==  null  ||!c.depends.isEmpty())  {	  if(!c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
74	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends!=  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.defMetadata.depends!=  null)  {	  if(c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
75	[BUG]  [BUGGY]  if(c.defMetadata!=  null  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.defMetadata!=  null  ||  c.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.defMetadata!=  null  ||  c.depends.isEmpty())  {	  if(c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
76	[BUG]  [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends!=  null  &&  c.defMetadata.depends  ==  null)  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends!=  null  &&  c.defMetadata.depends  ==  null)  {	  if(c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
77	[BUG]  [BUGGY]  if(c.canInline()  &&  c.defMetadata.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  &&  c.defMetadata.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.defMetadata.depends!=  null  &&  c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  if(c.canInline()  &&  c.defMetadata.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.canInline()  &&  c.defMetadata.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.canInline()  &&  c.defMetadata.depends!=  null  &&!c.defMetadata.depends.isEmpty())  {	  if(c.canInline()    &&    c.defMetadata.depends!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
79	[BUG]  [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {    [BUGGY]  if(c.depends.isEmpty()  ||  c.depends.isEmpty())  {  [BUGGY]    c.inlineVariable();        if  (!c.defMetadata.depends.isEmpty())  {  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.23354968324845687	155	155	3	replace	if(c.depends.isEmpty()  ||  c.depends.isEmpty())  {	  if    (c.defMetadata.depends.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
