bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(t.getScope().getVar(c.varName),  inlinedNewDependencies);	  c.defMetadata.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	47	None	replace
2	[BUG]  [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getScope().getVar(c.varName),  inlinedNewDependencies);	  c.defMetadata.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	47	None	replace
3	[BUG]  [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName),  cfg);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(t.getScope().getVar(c.varName),  cfg);	  c.defMetadata.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	47	None	replace
4	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScopeRoot().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScopeRoot().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScopeRoot().getVar(c.varName));	  c.defMetadata.depends.add(c.getVar(c.varName),    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getVar(c.varName),  t.getScopeRoot(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.getVar(c.varName),  t.getScopeRoot(),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getVar(c.varName),  t.getScopeRoot(),  inlinedNewDependencies);	  c.defMetadata.depends.add(c.getVar(c.varName),    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getFirstChild(),  c.varName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getFirstChild(),  c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScopeRoot().getFirstChild(),  c.varName);	  c.inlinePath(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
7	[BUG]  [BUGGY]  c.inline(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScopeRoot().getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(t.getScopeRoot().getLastChild());	  c.inlinePath(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
8	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.inline();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.inline();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.inline();	  FlowSensitiveInlineVariableDef    c    =(FlowSensitiveInlineVariableDef)c.clone();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
9	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.getParent();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.getParent();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.getParent();	  FlowSensitiveInlineVariableDef    c    =(FlowSensitiveInlineVariableDef)c.clone();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
10	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.create();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.create();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.create();	  FlowSensitiveInlineVariableDef    c    =(FlowSensitiveInlineVariableDef)c.clone();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
11	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.defMetadata.depends.clone();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.defMetadata.depends.clone();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.defMetadata.depends.clone();	  FlowSensitiveInlineVariableDef    c    =(FlowSensitiveInlineVariableDef)c.clone();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
12	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.defMetadata.clone();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.defMetadata.clone();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.defMetadata.clone();	  FlowSensitiveInlineVariableDef    c    =(FlowSensitiveInlineVariableDef)c.clone();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
13	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.begin();  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.begin();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.begin();	  FlowSensitiveInlineVariableDef    c    =(FlowSensitiveInlineVariableDef)c.clone();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
14	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScope().getVar(c.varName),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  t.getScope().getVar(c.varName),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScope().getVar(c.varName),  inlinedNewDependencies);	  c.inline(c.varName,    t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
15	[BUG]  [BUGGY]  c.inline(c.defMetadata,  t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.defMetadata,  t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.defMetadata,  t.getScope().getVar(c.varName));	  c.inline(c.varName,    t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
16	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScope().getVar(c.varName),  c.def);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  t.getScope().getVar(c.varName),  c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScope().getVar(c.varName),  c.def);	  c.inline(c.varName,    t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
17	[BUG]  [BUGGY]  c.inline(c.defName,  t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.defName,  t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.defName,  t.getScope().getVar(c.varName));	  c.inline(c.varName,    t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
18	[BUG]  [BUGGY]  c.inline(c.sourceName,  t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.sourceName,  t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.sourceName,  t.getScope().getVar(c.varName));	  c.inline(c.varName,    t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
19	[BUG]  [BUGGY]  c.defMetadata.inlineCfgNode(c.varName,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlineCfgNode(c.varName,  numUseWithinCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlineCfgNode(c.varName,  numUseWithinCfgNode);	  c.defMetadata.inlineCfgNode(c.varName);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
20	[BUG]  [BUGGY]  c.defMetadata.inlineCfgNode(c.varName,  n);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlineCfgNode(c.varName,  n);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlineCfgNode(c.varName,  n);	  c.defMetadata.inlineCfgNode(c.varName);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
21	[BUG]  [BUGGY]  c.defMetadata.inlineCfgNode(c.varName,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlineCfgNode(c.varName,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlineCfgNode(c.varName,  numUseWithinUseCfgNode);	  c.defMetadata.inlineCfgNode(c.varName);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
22	[BUG]  [BUGGY]  c.defMetadata.inlineCfgNode(c.varName,  t.getScope());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlineCfgNode(c.varName,  t.getScope());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlineCfgNode(c.varName,  t.getScope());	  c.defMetadata.inlineCfgNode(c.varName);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
23	[BUG]  [BUGGY]  c.defMetadata.inlineDependencies(c.varName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlineDependencies(c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlineDependencies(c.varName);	  c.defMetadata.inlineCfgNode(c.varName);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
24	[BUG]  [BUGGY]  c.depends.put(c.varName,  c);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.put(c.varName,  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.put(c.varName,  c);	  c.depends.remove(c.varName);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
25	[BUG]  [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName),  c,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName),  c,  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(t.getScope().getVar(c.varName),  c,  inlinedNewDependencies);	  c.defMetadata.add(t.getScope().getVar(c.varName),    c);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
26	[BUG]  [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName),  def);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(t.getScope().getVar(c.varName),  def);	  c.defMetadata.add(t.getScope().getVar(c.varName),    c);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
27	[BUG]  [BUGGY]  c.defMetadata.put(c.varName,  def);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.put(c.varName,  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.put(c.varName,  def);	  c.defMetadata.put(c.varName,    c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
28	[BUG]  [BUGGY]  c.defMetadata.put(varName,  c);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.put(varName,  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.put(varName,  c);	  c.defMetadata.put(c.varName,    c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
29	[BUG]  [BUGGY]  c.defMetadata.putVar(c.varName,  c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.putVar(c.varName,  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.putVar(c.varName,  c);	  c.defMetadata.put(c.varName,    c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
30	[BUG]  [BUGGY]  c.defMetadata.put(c.varName,  n);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.put(c.varName,  n);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.put(c.varName,  n);	  c.defMetadata.put(c.varName,    c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
31	[BUG]  [BUGGY]  c.defMetadata.put(c.varName,  c));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.put(c.varName,  c));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.put(c.varName,  c));	  c.defMetadata.put(c.varName,    c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  reachingUses);	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getNext());  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getNext());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getNext());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  candidates);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  candidates);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  candidates);	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
39	[BUG]  [BUGGY]  Node  c  =  c.next();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.next();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.next();	  Node    c    =    c.getCurrentNode();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
40	[BUG]  [BUGGY]  Node  c  =  c.nextNode();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.nextNode();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.nextNode();	  Node    c    =    c.getCurrentNode();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
41	[BUG]  [BUGGY]  Node  c  =  c.getNext();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getNext();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getNext();	  Node    c    =    c.getCurrentNode();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
42	[BUG]  [BUGGY]  Node  c  =  t.getCurrentNode();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  t.getCurrentNode();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  t.getCurrentNode();	  Node    c    =    c.getCurrentNode();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
43	[BUG]  [BUGGY]  Node  c  =  c.nextToken();  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.nextToken();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.nextToken();	  Node    c    =    c.getCurrentNode();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
44	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScopeRoot(),  reachingUses);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  t.getScopeRoot(),  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScopeRoot(),  reachingUses);	  c.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
45	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScopeRoot(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  t.getScopeRoot(),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScopeRoot(),  inlinedNewDependencies);	  c.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
46	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScopeRoot(),  def);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  t.getScopeRoot(),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScopeRoot(),  def);	  c.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
47	[BUG]  [BUGGY]  c.inline(c,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  t.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c,  t.getScopeRoot());	  c.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
48	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScopeRoot(),  candidates);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  t.getScopeRoot(),  candidates);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScopeRoot(),  candidates);	  c.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
49	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinUseCfgNode  +  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  numUseWithinUseCfgNode  +  1);	  c.defMetadata.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
50	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinUseCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  numUseWithinUseCfgNode,  reachingUses);	  c.defMetadata.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
51	[BUG]  [BUGGY]  c.defMetadata.inline(c,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c,  numUseWithinUseCfgNode);	  c.defMetadata.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
52	[BUG]  [BUGGY]  c.defMetadata.inline(varName,  numUseWithinUseCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(varName,  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(varName,  numUseWithinUseCfgNode,  reachingUses);	  c.defMetadata.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
53	[BUG]  [BUGGY]  c.inline(c.varName,  numUseWithinCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  numUseWithinCfgNode  +  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  numUseWithinCfgNode  +  1);	  c.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
54	[BUG]  [BUGGY]  c.inline(c.varName,  Integer.toString(numUseWithinCfgNode));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  Integer.toString(numUseWithinCfgNode));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  Integer.toString(numUseWithinCfgNode));	  c.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
55	[BUG]  [BUGGY]  c.inline(c.varName,  numUseWithinCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  numUseWithinCfgNode,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  numUseWithinCfgNode,  reachingUses);	  c.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
56	[BUG]  [BUGGY]  c.inline(c,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  numUseWithinCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c,  numUseWithinCfgNode);	  c.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
57	[BUG]  [BUGGY]  c.inline(c.varName,  numUseWithinCfgNode  *  2);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  numUseWithinCfgNode  *  2);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  numUseWithinCfgNode  *  2);	  c.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
58	[BUG]  [BUGGY]  c.inline(c.varName,  numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  numUseWithinUseCfgNode  +  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  numUseWithinUseCfgNode  +  1);	  c.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
59	[BUG]  [BUGGY]  c.inline(c.varName,  Integer.toString(numUseWithinUseCfgNode));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  Integer.toString(numUseWithinUseCfgNode));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  Integer.toString(numUseWithinUseCfgNode));	  c.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
60	[BUG]  [BUGGY]  c.inline(c.varName,  numUseWithinUseCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  numUseWithinUseCfgNode,  reachingUses);	  c.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
61	[BUG]  [BUGGY]  c.inline(c,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c,  numUseWithinUseCfgNode);	  c.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
62	[BUG]  [BUGGY]  c.inline(c.varName,  numUseWithinUseCfgNode  *  2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  numUseWithinUseCfgNode  *  2);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  numUseWithinUseCfgNode  *  2);	  c.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  n,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  arrivingUses).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  arrivingUses).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  arrivingUses).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
68	[BUG]  [BUGGY]  Node  c  =  c.getVar(varName);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getVar(varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getVar(varName);	  Node    c    =    c.getNode();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
69	[BUG]  [BUGGY]  Node  c  =  c.getParentNode();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getParentNode();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getParentNode();	  Node    c    =    c.getNode();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
70	[BUG]  [BUGGY]  Node  c  =  c.getParent();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getParent();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getParent();	  Node    c    =    c.getNode();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
71	[BUG]  [BUGGY]  c.defMetadata.removeChild(c.varName);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.removeChild(c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.removeChild(c.varName);	  c.defMetadata.remove(c.varName);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
72	[BUG]  [BUGGY]  c.depends.add(c.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(c.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(c.getScope().getVar(c.varName));	  c.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
73	[BUG]  [BUGGY]  c.depends.add(t.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(t.getScope().getVar(c.varName),  cfg);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(t.getScope().getVar(c.varName),  cfg);	  c.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
74	[BUG]  [BUGGY]  c.depends.add(t.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(t.getScope().getVar(c.varName),  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(t.getScope().getVar(c.varName),  c);	  c.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
75	[BUG]  [BUGGY]  c.depends.add(t.getScope().getVar(c.varName),  c.def);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(t.getScope().getVar(c.varName),  c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(t.getScope().getVar(c.varName),  c.def);	  c.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
76	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    if(inlinedNewDependencies.contains(c.def))    {    inlinedNewDependencies.add(t.getScope().getVar(c.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
77	[BUG]  [BUGGY]  if(c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    if(inlinedNewDependencies.contains(c.def))    {    inlinedNewDependencies.add(t.getScope().getVar(c.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
78	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    if(inlinedNewDependencies.contains(c.def))    {    inlinedNewDependencies.add(t.getScope().getVar(c.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
79	[BUG]  [BUGGY]  if(c.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    if(inlinedNewDependencies.contains(c.def))    {    inlinedNewDependencies.add(t.getScope().getVar(c.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
80	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.  [CE]  illegal  start  of  type  [FE]                                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    if(inlinedNewDependencies.contains(c.def))    {    inlinedNewDependencies.add(t.getScope().getVar(c.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
81	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(  [CE]  illegal  start  of  type  [FE]                                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    if(inlinedNewDependencies.contains(c.def))    {    inlinedNewDependencies.add(t.getScope().getVar(c.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
82	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c  [CE]  illegal  start  of  type  [FE]                                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    if(inlinedNewDependencies.contains(c.def))    {    inlinedNewDependencies.add(t.getScope().getVar(c.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
83	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName,  numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.varName,  numUseWithinUseCfgNode  +  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName,  numUseWithinUseCfgNode  +  1);	  c.defMetadata.depends.add(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
84	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName,  numUseWithinUseCfgNode  *  2);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.varName,  numUseWithinUseCfgNode  *  2);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName,  numUseWithinUseCfgNode  *  2);	  c.defMetadata.depends.add(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
85	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName,  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.varName,  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName,  1);	  c.defMetadata.depends.add(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
86	[BUG]  [BUGGY]  c.depends.add(c.varName,  numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(c.varName,  numUseWithinUseCfgNode  +  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(c.varName,  numUseWithinUseCfgNode  +  1);	  c.defMetadata.depends.add(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
87	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  cfg,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  cfg,  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getScope().getVar(c.varName),  cfg,  inlinedNewDependencies);	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    cfg);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(c.varName),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(c.varName),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getVar(c.varName),  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    c.getVar(varName));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(varName),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(varName),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getVar(varName),  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    c.getVar(varName));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getVar(varName));  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getVar(varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getVar(varName));	  NodeTraversal.traverse(compiler,    c.getVar(varName));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getVar(c.varName));	  NodeTraversal.traverse(compiler,    c.getVar(varName));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScopeRoot().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  t.getScopeRoot().getVar(c.varName));	  NodeTraversal.traverse(compiler,    c.getVar(varName));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(c.varName),  reachingUses);  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(c.varName),  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getVar(c.varName),  reachingUses);	  NodeTraversal.traverse(compiler,    c.getVar(varName));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(c.varName),  def);  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(c.varName),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getVar(c.varName),  def);	  NodeTraversal.traverse(compiler,    c.getVar(varName));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
95	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.getScopeRoot());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.getScopeRoot());	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
96	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.getLastChild());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.getLastChild());	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
97	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  t.getLastChild());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  t.getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getScope().getVar(c.varName),  t.getLastChild());	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
98	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  t.getScopeRoot(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  t.getScopeRoot(),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getScope().getVar(c.varName),  t.getScopeRoot(),  inlinedNewDependencies);	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
99	[BUG]  [BUGGY]  c.defMetadata.add(c.getVar(c.varName),  t.getScope(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getVar(c.varName),  t.getScope(),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getVar(c.varName),  t.getScope(),  inlinedNewDependencies);	  c.defMetadata.add(c.getVar(c.varName),    t.getScope());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
100	[BUG]  [BUGGY]  c.defMetadata.add(c.getVar(c.varName));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getVar(c.varName));	  c.defMetadata.add(c.getVar(c.varName),    t.getScope());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
101	[BUG]  [BUGGY]  c.defMetadata.add(c.getVar(c.varName),  t.getScope(),  def);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getVar(c.varName),  t.getScope(),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getVar(c.varName),  t.getScope(),  def);	  c.defMetadata.add(c.getVar(c.varName),    t.getScope());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
102	[BUG]  [BUGGY]  c.defMetadata.addChildToFront(c);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addChildToFront(c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addChildToFront(c);	  c.defMetadata.reset();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
103	[BUG]  [BUGGY]  c.defMetadata.inline();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline();	  c.defMetadata.reset();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
104	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  c.varName);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScopeRoot().getLastChild(),  c.varName);	  c.inlinePath(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
105	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  c);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScopeRoot().getLastChild(),  c);	  c.inlinePath(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
106	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getNext());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getNext());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScopeRoot().getNext());	  c.inlinePath(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName)  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName)  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName)	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    inlinedNewDependencies.add(t.getScope().getVar(c.varName)    	non-compiled	[CE]  <identifier>  expected	76	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    inlinedNewDependencies.add(t.getScope().getVar(c.varName)    	non-compiled	[CE]  <identifier>  expected	76	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName)  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName)  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName)	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    inlinedNewDependencies.add(t.getScope().getVar(c.varName)    	non-compiled	[CE]  <identifier>  expected	76	None	replace
110	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  cfg,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  cfg,  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  cfg,  inlinedNewDependencies);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    cfg);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
111	[BUG]  [BUGGY]  c.defMetadata.add(c.varName,  t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.varName,  t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.varName,  t.getScope().getVar(c.varName));	  c.defMetadata.add(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	83	None	replace
112	[BUG]  [BUGGY]  c.defMetadata.add(c.varName,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.varName,  t.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.varName,  t.getScopeRoot());	  c.defMetadata.add(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	83	None	replace
113	[BUG]  [BUGGY]  c.defMetadata.add(c.getName(),  t.getScope());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getName(),  t.getScope());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getName(),  t.getScope());	  c.defMetadata.add(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	83	None	replace
114	[BUG]  [BUGGY]  c.defMetadata.add(c.varName,  t.getScope(),  reachingUses);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.varName,  t.getScope(),  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.varName,  t.getScope(),  reachingUses);	  c.defMetadata.add(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	83	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(c.  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(c.  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(c.	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingUses).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
120	[BUG]  [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName),  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(c.getScope().getVar(c.varName),  c);	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	40	None	replace
121	[BUG]  [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName),  cfg);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(c.getScope().getVar(c.varName),  cfg);	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	40	None	replace
122	[BUG]  [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName),  c.def);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName),  c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(c.getScope().getVar(c.varName),  c.def);	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	40	None	replace
123	[BUG]  [BUGGY]  c.defMetadata.inline(c.getScope().getVar(c.varName),  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.getScope().getVar(c.varName),  t.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.getScope().getVar(c.varName),  t.getScopeRoot());	  c.defMetadata.inline(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
124	[BUG]  [BUGGY]  c.defMetadata.inline(c.getScope().getVar(c.varName),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.getScope().getVar(c.varName),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.getScope().getVar(c.varName),  inlinedNewDependencies);	  c.defMetadata.inline(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
125	[BUG]  [BUGGY]  c.defMetadata.inline(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);	  c.defMetadata.inline(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
126	[BUG]  [BUGGY]  c.defMetadata.inline(c.getScope().getVar(c.varName),  n);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.getScope().getVar(c.varName),  n);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.getScope().getVar(c.varName),  n);	  c.defMetadata.inline(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
127	[BUG]  [BUGGY]  c.defMetadata.add(c.varName,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.varName,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.varName,  numUseWithinUseCfgNode);	  c.defMetadata.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
128	[BUG]  [BUGGY]  c.defMetadata.add(c.varName,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.varName,  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.varName,  inlinedNewDependencies);	  c.defMetadata.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
129	[BUG]  [BUGGY]  c.defMetadata.addChildToFront(c.varName);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addChildToFront(c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addChildToFront(c.varName);	  c.defMetadata.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
130	[BUG]  [BUGGY]  c.defMetadata.add(c.varName,  n);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.varName,  n);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.varName,  n);	  c.defMetadata.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
131	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName,  inlinedNewDependencies,  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.varName,  inlinedNewDependencies,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName,  inlinedNewDependencies,  reachingUses);	  c.defMetadata.depends.add(c.varName,    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
132	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.varName,  numUseWithinCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName,  numUseWithinCfgNode);	  c.defMetadata.depends.add(c.varName,    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
133	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  inlinedNewDependencies,  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  inlinedNewDependencies,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  inlinedNewDependencies,  reachingUses);	  c.defMetadata.inline(c.varName,    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
134	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  reachingUses);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  reachingUses);	  c.defMetadata.inline(c.varName,    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
135	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  n,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  n,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  n,  reachingUses);	  c.defMetadata.inline(c.varName,    n);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
136	[BUG]  [BUGGY]  c.inlinePath(c.varName,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.varName,  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(c.varName,  inlinedNewDependencies);	  c.inlinePath(c.varName);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
137	[BUG]  [BUGGY]  c.inlinePath(c.varName,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.varName,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(c.varName,  numUseWithinUseCfgNode);	  c.inlinePath(c.varName);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
138	[BUG]  [BUGGY]  c.inlinePath(c.path);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.path);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(c.path);	  c.inlinePath(c.varName);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
139	[BUG]  [BUGGY]  c.inlinePath(c.varName,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.varName,  numUseWithinCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(c.varName,  numUseWithinCfgNode);	  c.inlinePath(c.varName);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
140	[BUG]  [BUGGY]  c.inlinePath(c.varName,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.varName,  t.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(c.varName,  t.getScopeRoot());	  c.inlinePath(c.varName);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
141	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  def,  reachingUses);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  def,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  def,  reachingUses);	  c.defMetadata.inline(c.varName,    def);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
142	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  reachingUses);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  reachingUses);	  c.inlineDependencies(t.getScope().getVar(c.varName),    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
143	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  inlinedNewDependencies,  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  inlinedNewDependencies,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  inlinedNewDependencies,  reachingUses);	  c.inlineDependencies(t.getScope().getVar(c.varName),    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
144	[BUG]  [BUGGY]  c.inlinePath(t.getScope().getVar(c.varName),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScope().getVar(c.varName),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScope().getVar(c.varName),  inlinedNewDependencies);	  c.inlinePath(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
145	[BUG]  [BUGGY]  c.inlinePath(t.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScope().getVar(c.varName),  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScope().getVar(c.varName),  c);	  c.inlinePath(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
146	[BUG]  [BUGGY]  c.inlinePath(t.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScope().getVar(c.varName),  cfg);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScope().getVar(c.varName),  cfg);	  c.inlinePath(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
147	[BUG]  [BUGGY]  c.inlinePath(t.getScope().getVar(c.varName),  c.def);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScope().getVar(c.varName),  c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScope().getVar(c.varName),  c.def);	  c.inlinePath(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
148	[BUG]  [BUGGY]  c.inlinePath(t.getScope().getVar(c.varName),  c.defMetadata);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScope().getVar(c.varName),  c.defMetadata);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScope().getVar(c.varName),  c.defMetadata);	  c.inlinePath(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
149	[BUG]  [BUGGY]  c.inlinePath(t.getScope().getVar(c.varName),  def);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScope().getVar(c.varName),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScope().getVar(c.varName),  def);	  c.inlinePath(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
150	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScope(),  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  t.getScope(),  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScope(),  reachingUses);	  c.inline(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	28	None	replace
151	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScope(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  t.getScope(),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScope(),  inlinedNewDependencies);	  c.inline(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	28	None	replace
152	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScope(),  def);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  t.getScope(),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScope(),  def);	  c.inline(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	28	None	replace
153	[BUG]  [BUGGY]  c.defMetadata.inlinePath(c.varName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlinePath(c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlinePath(c.varName);	  c.defMetadata.inlinePath();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
154	[BUG]  [BUGGY]  c.defMetadata.inlinePath(t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlinePath(t.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlinePath(t.getScopeRoot());	  c.defMetadata.inlinePath();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
155	[BUG]  [BUGGY]  c.defMetadata.inlineCfgNode();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlineCfgNode();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlineCfgNode();	  c.defMetadata.inlinePath();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
156	[BUG]  [BUGGY]  c.defMetadata.inlineChild(c.varName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlineChild(c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlineChild(c.varName);	  c.defMetadata.inlinePath();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
157	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot(),  c.varName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot(),  c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScopeRoot(),  c.varName);	  c.inlinePath(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
158	[BUG]  [BUGGY]  c.inline(t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(t.getScopeRoot());	  c.inlinePath(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
159	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot(),  c);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot(),  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScopeRoot(),  c);	  c.inlinePath(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
160	[BUG]  [BUGGY]  c.inlineChild(t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(t.getScopeRoot());	  c.inlinePath(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
161	[BUG]  [BUGGY]  c.inlinePath(c.getScopeRoot());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(c.getScopeRoot());	  c.inlinePath(t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
162	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  c.def,  reachingUses);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  c.def,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  c.def,  reachingUses);	  c.inlineDependencies(t.getScope().getVar(c.varName),    c.def);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
163	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =  def.getConstructor();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =  def.getConstructor();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =  def.getConstructor();	  FlowSensitiveInlineVariableDef    c    =    c.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
164	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getConstructor(n);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getConstructor(n);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =  c.getConstructor(n);	  FlowSensitiveInlineVariableDef    c    =    c.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
165	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.inline();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.inline();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =  c.inline();	  FlowSensitiveInlineVariableDef    c    =    c.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
166	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getFunction();  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getFunction();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =  c.getFunction();	  FlowSensitiveInlineVariableDef    c    =    c.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
167	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getCfgNode();  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getCfgNode();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =  c.getCfgNode();	  FlowSensitiveInlineVariableDef    c    =    c.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
168	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getCurrentNode();  [CE]  illegal  start  of  type  [FE]                                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getCurrentNode();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =  c.getCurrentNode();	  FlowSensitiveInlineVariableDef    c    =    c.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
169	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  inlinedNewDependencies,  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  inlinedNewDependencies,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getScope().getVar(c.varName),  inlinedNewDependencies,  reachingUses);	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
170	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
171	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c.defMetadata.depends.add(t.getScope().getVar(c.varName));	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	75	None	replace
172	[BUG]  [BUGGY]  inlineNewDependencies.add(t.getScope().getVar(c.varName),  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlineNewDependencies.add(t.getScope().getVar(c.varName),  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlineNewDependencies.add(t.getScope().getVar(c.varName),  c.defMetadata.depends.add(t.getScope().getVar(c.varName));	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	75	None	replace
173	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
174	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  else  {  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  else  {  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  else  {	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
175	[BUG]  [BUGGY]  inlineNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlineNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlineNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	75	None	replace
176	[BUG]  [BUGGY]  Node  c  =  t.getScopeRoot();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  t.getScopeRoot();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  t.getScopeRoot();	  Node    c    =    c.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
177	[BUG]  [BUGGY]  Node  c  =  c.getScopeRoot().getFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getScopeRoot().getFirstChild();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getScopeRoot().getFirstChild();	  Node    c    =    c.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
178	[BUG]  [BUGGY]  Node  c  =  c.getScopeRoot().getNext();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getScopeRoot().getNext();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getScopeRoot().getNext();	  Node    c    =    c.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
179	[BUG]  [BUGGY]  Node  c  =  c.getScopeRoot()  +  1;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getScopeRoot()  +  1;  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getScopeRoot()  +  1;	  Node    c    =    c.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
180	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName)+  1),  c.depends);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName)+  1),  c.depends);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName)+  1),  c.depends);	  c.inlineDependencies(t.getScope().getVar(c.varName),    c.depends);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
181	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  c,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  c,  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  c,  inlinedNewDependencies);	  c.inlineDependencies(t.getScope().getVar(c.varName),    c);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
182	[BUG]  [BUGGY]  c.defPath  =  c.getScopeRoot().getFirstChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defPath  =  c.getScopeRoot().getFirstChild();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defPath  =  c.getScopeRoot().getFirstChild();	  c.defPath    =    c.getScopeRoot().getLastChild();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
183	[BUG]  [BUGGY]  c.defPath  =  c.getScopeRoot().getNext();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defPath  =  c.getScopeRoot().getNext();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defPath  =  c.getScopeRoot().getNext();	  c.defPath    =    c.getScopeRoot().getLastChild();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
184	[BUG]  [BUGGY]  c.defPath  =  t.getScopeRoot().getLastChild();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defPath  =  t.getScopeRoot().getLastChild();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defPath  =  t.getScopeRoot().getLastChild();	  c.defPath    =    c.getScopeRoot().getLastChild();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
185	[BUG]  [BUGGY]  c.defPath  =  c.getScopeRoot().getLastChild().getString();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defPath  =  c.getScopeRoot().getLastChild().getString();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defPath  =  c.getScopeRoot().getLastChild().getString();	  c.defPath    =    c.getScopeRoot().getLastChild();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
186	[BUG]  [BUGGY]  c.defPath  =  c.getScopeRoot().getParent();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defPath  =  c.getScopeRoot().getParent();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defPath  =  c.getScopeRoot().getParent();	  c.defPath    =    c.getScopeRoot().getLastChild();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
187	[BUG]  [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);	  c.defMetadata.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	79	None	replace
188	[BUG]  [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  n);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  n);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getScope().getVar(c.varName),  n);	  c.defMetadata.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	79	None	replace
189	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinCfgNode  +  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  numUseWithinCfgNode  +  1);	  c.defMetadata.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
190	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinCfgNode,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  numUseWithinCfgNode,  reachingUses);	  c.defMetadata.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
191	[BUG]  [BUGGY]  c.defMetadata.inline(c,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c,  numUseWithinCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c,  numUseWithinCfgNode);	  c.defMetadata.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
192	[BUG]  [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  def);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getScope().getVar(c.varName),  def);	  c.defMetadata.add(c.getScope().getVar(c.varName),    c);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
193	[BUG]  [BUGGY]  c.defMetadata.addDependency(c.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(c.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(c.getScope().getVar(c.varName));	  c.defMetadata.addDependency(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
194	[BUG]  [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(t.getScope().getVar(c.varName),  inlinedNewDependencies);	  c.defMetadata.addDependency(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
195	[BUG]  [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);	  c.defMetadata.addDependency(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
196	[BUG]  [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName),  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(t.getScope().getVar(c.varName),  c);	  c.defMetadata.addDependency(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
197	[BUG]  [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName),  def);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(t.getScope().getVar(c.varName),  def);	  c.defMetadata.addDependency(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
198	[BUG]  [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName)+  1);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName)+  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(t.getScope().getVar(c.varName)+  1);	  c.defMetadata.addDependency(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
199	[BUG]  [BUGGY]  c.inlineChildren(c.varName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChildren(c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChildren(c.varName);	  c.inlineChildren();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
200	[BUG]  [BUGGY]  c.inlineCfgNode(c.varName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCfgNode(c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineCfgNode(c.varName);	  c.inlineChildren();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
201	[BUG]  [BUGGY]  c.inlineDependencies();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineDependencies();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies();	  c.inlineChildren();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
202	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  def);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getScope().getVar(c.varName),  def);	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    c);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
203	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  def,  reachingUses);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  def,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  def,  reachingUses);	  c.inlineDependencies(t.getScope().getVar(c.varName),    def);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
204	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName  +  2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.varName  +  2);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName  +  2);	  c.defMetadata.depends.add(c.varName    +    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
205	[BUG]  [BUGGY]  c.depends.add(c.varName,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(c.varName,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(c.varName,  numUseWithinUseCfgNode);	  c.depends.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
206	[BUG]  [BUGGY]  c.depends.add(c.varName)&&!c.defMetadata.depends.isEmpty();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(c.varName)&&!c.defMetadata.depends.isEmpty();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(c.varName)&&!c.defMetadata.depends.isEmpty();	  c.depends.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
207	[BUG]  [BUGGY]  c.depends.add(c.varName,  c.def);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(c.varName,  c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(c.varName,  c.def);	  c.depends.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
208	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.inline);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.inline);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.inline);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    c.useCfgNode);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
209	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode,  reachingUses);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    c.useCfgNode);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
210	[BUG]  [BUGGY]  if(c.useCfgNode)  {  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode);  }  else  {  inlinedNewDependencies.add(t.getScope().get  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.useCfgNode)  {  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode);  }  else  {  inlinedNewDependencies.add(t.getScope().get  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.useCfgNode)  {  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode);  }  else  {  inlinedNewDependencies.add(t.getScope().get	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    c.useCfgNode);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
211	[BUG]  [BUGGY]  if(c.useCfgNode)  {  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.useCfgNode)  {  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode);  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.useCfgNode)  {  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode);  }	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    c.useCfgNode);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
212	[BUG]  [BUGGY]  c.inlineChild(c,  reachingUses);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c,  reachingUses);	  c.inlineChild(c);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
213	[BUG]  [BUGGY]  c.inlineChild(c,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c,  inlinedNewDependencies);	  c.inlineChild(c);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
214	[BUG]  [BUGGY]  c.inlineChild(c,  def);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c,  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c,  def);	  c.inlineChild(c);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
215	[BUG]  [BUGGY]  c.inlineChild(t);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(t);	  c.inlineChild(c);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
216	[BUG]  [BUGGY]  c.depends.add(c.getVar(c.varName));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(c.getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(c.getVar(c.varName));	  c.depends.clear();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
217	[BUG]  [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName),  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(t.getScope().getVar(c.varName),  c);	  c.defMetadata.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	65	None	replace
218	[BUG]  [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(t.getScope().getVar(c.varName),  inlinedNewDependencies);	  c.defMetadata.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	65	None	replace
219	[BUG]  [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);	  c.defMetadata.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	65	None	replace
220	[BUG]  [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName),  cfg);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(t.getScope().getVar(c.varName),  cfg);	  c.defMetadata.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	65	None	replace
221	[BUG]  [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName),  c.depends);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName),  c.depends);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(t.getScope().getVar(c.varName),  c.depends);	  c.defMetadata.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	65	None	replace
222	[BUG]  [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName),  c.useCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName),  c.useCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(t.getScope().getVar(c.varName),  c.useCfgNode);	  c.defMetadata.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	65	None	replace
223	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c,  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c,  inlinedNewDependencies);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    c);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
224	[BUG]  [BUGGY]  c.inline(t.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScope().getVar(c.varName),  cfg);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(t.getScope().getVar(c.varName),  cfg);	  c.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
225	[BUG]  [BUGGY]  c.inline(t.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScope().getVar(c.varName),  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(t.getScope().getVar(c.varName),  c);	  c.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
226	[BUG]  [BUGGY]  c.inline(t.getScope().getVar(c.varName),  c.def);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScope().getVar(c.varName),  c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(t.getScope().getVar(c.varName),  c.def);	  c.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
227	[BUG]  [BUGGY]  c.inline(t.getScope().getVar(c.varName),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScope().getVar(c.varName),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(t.getScope().getVar(c.varName),  inlinedNewDependencies);	  c.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
228	[BUG]  [BUGGY]  c.inline(t.getScope().getVar(c.varName),  c.defMetadata);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScope().getVar(c.varName),  c.defMetadata);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(t.getScope().getVar(c.varName),  c.defMetadata);	  c.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
229	[BUG]  [BUGGY]  Node  c  =  c.getLastChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getLastChild();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getLastChild();	  Node    c    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
230	[BUG]  [BUGGY]  Node  c  =  c.getAncestor(1);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getAncestor(1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getAncestor(1);	  Node    c    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
231	[BUG]  [BUGGY]  c.inline(c.def,  reachingUses);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.def,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.def,  reachingUses);	  c.inline(c.def);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
232	[BUG]  [BUGGY]  c.inline(c.varName,  c.def);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  c.def);	  c.inline(c.def);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
233	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getScopeRoot(),  inlinedNewDependencies);	  c.defMetadata.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
234	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  reachingUses);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getScopeRoot(),  reachingUses);	  c.defMetadata.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
235	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getScopeRoot(),  numUseWithinUseCfgNode);	  c.defMetadata.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
236	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  def);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getScopeRoot(),  def);	  c.defMetadata.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
237	[BUG]  [BUGGY]  c.defMetadata.inline(c,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c,  t.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c,  t.getScopeRoot());	  c.defMetadata.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
238	[BUG]  [BUGGY]  c.defMetadata.addDependency(c.varName,  reachingUses,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(c.varName,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(c.varName,  reachingUses,  numUseWithinUseCfgNode);	  c.defMetadata.addDependency(c.varName,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
239	[BUG]  [BUGGY]  c.defMetadata.addDependency(c.varName,  reachingUses,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(c.varName,  reachingUses,  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(c.varName,  reachingUses,  inlinedNewDependencies);	  c.defMetadata.addDependency(c.varName,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
240	[BUG]  [BUGGY]  c.defMetadata.addDependency(c.varName,  reachingUses,  t.getScope());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(c.varName,  reachingUses,  t.getScope());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(c.varName,  reachingUses,  t.getScope());	  c.defMetadata.addDependency(c.varName,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
241	[BUG]  [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName),  reachingUses);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName),  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(t.getScope().getVar(c.varName),  reachingUses);	  c.defMetadata.addDependency(c.varName,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
242	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  cfg,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  cfg,  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  cfg,  inlinedNewDependencies);	  c.inlineDependencies(t.getScope().getVar(c.varName),    cfg);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
243	[BUG]  [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  cfg,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  cfg,  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getScope().getVar(c.varName),  cfg,  inlinedNewDependencies);	  c.defMetadata.add(c.getScope().getVar(c.varName),    cfg);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
244	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getScope(),  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  t.getScope(),  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getScope(),  reachingUses);	  c.defMetadata.inline(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
245	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getScope(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  t.getScope(),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getScope(),  inlinedNewDependencies);	  c.defMetadata.inline(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
246	[BUG]  [BUGGY]  c.defMetadata.inline(c,  t.getScope());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c,  t.getScope());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c,  t.getScope());	  c.defMetadata.inline(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
247	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getScope(),  def);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  t.getScope(),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getScope(),  def);	  c.defMetadata.inline(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
248	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
249	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  reachingUses);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  reachingUses);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
250	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  inlinedNewDependencies,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  inlinedNewDependencies,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  inlinedNewDependencies,  reachingUses);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
251	[BUG]  [BUGGY]  c.inline(c.varName,  inlinedNewDependencies,  reachingUses);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  inlinedNewDependencies,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  inlinedNewDependencies,  reachingUses);	  c.inline(c.varName,    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
252	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c);	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
253	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c.def);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c.def);	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
254	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c.defMetadata);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c.defMetadata);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  c.defMetadata);	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
255	[BUG]  [BUGGY]  c.inlineChild(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(t.getScope().getVar(c.varName));	  c.inlineChild(c.varName);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
256	[BUG]  [BUGGY]  c.inlineChild(c.varName,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c.varName,  t.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c.varName,  t.getScopeRoot());	  c.inlineChild(c.varName);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
257	[BUG]  [BUGGY]  c.inlineChild(c.varName,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c.varName,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c.varName,  numUseWithinUseCfgNode);	  c.inlineChild(c.varName);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
258	[BUG]  [BUGGY]  c.inlineChild(c.varName,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c.varName,  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c.varName,  inlinedNewDependencies);	  c.inlineChild(c.varName);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
259	[BUG]  [BUGGY]  c.inlineChild(c.varName,  c.def);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c.varName,  c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c.varName,  c.def);	  c.inlineChild(c.varName);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
260	[BUG]  [BUGGY]  c.inlineChild(c.varName,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c.varName,  numUseWithinCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c.varName,  numUseWithinCfgNode);	  c.inlineChild(c.varName);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
261	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode  +  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode  +  1);	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
262	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode,  reachingUses);	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
263	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName)+  1),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName)+  1),  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getScope().getVar(c.varName)+  1),  numUseWithinUseCfgNode);	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
264	[BUG]  [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  t.getScopeRoot(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  t.getScopeRoot(),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getScope().getVar(c.varName),  t.getScopeRoot(),  inlinedNewDependencies);	  c.defMetadata.add(c.getScope().getVar(c.varName),    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	85	None	replace
265	[BUG]  [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  t.getLastChild());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  t.getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getScope().getVar(c.varName),  t.getLastChild());	  c.defMetadata.add(c.getScope().getVar(c.varName),    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	85	None	replace
266	[BUG]  [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName),  c.getScopeRoot());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName),  c.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(t.getScope().getVar(c.varName),  c.getScopeRoot());	  c.defMetadata.add(c.getScope().getVar(c.varName),    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	85	None	replace
267	[BUG]  [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName)+  1),  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName)+  1),  t.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getScope().getVar(c.varName)+  1),  t.getScopeRoot());	  c.defMetadata.add(c.getScope().getVar(c.varName),    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	85	None	replace
268	[BUG]  [BUGGY]  c.inline(c.def,  c.varName,  reachingUses);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.def,  c.varName,  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.def,  c.varName,  reachingUses);	  c.inline(c.def,    c.varName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
269	[BUG]  [BUGGY]  c.inline(c,  c.varName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c,  c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c,  c.varName);	  c.inline(c.def,    c.varName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
270	[BUG]  [BUGGY]  c.inline(c.def,  c.varName,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.def,  c.varName,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.def,  c.varName,  numUseWithinUseCfgNode);	  c.inline(c.def,    c.varName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
271	[BUG]  [BUGGY]  c.inline(c.def,  c.varName,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.def,  c.varName,  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.def,  c.varName,  inlinedNewDependencies);	  c.inline(c.def,    c.varName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  n,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getNext());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
275	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getVar(c.varName),  t.getScope(),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.getVar(c.varName),  t.getScope(),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getVar(c.varName),  t.getScope(),  inlinedNewDependencies);	  c.defMetadata.depends.add(c.getVar(c.varName),    t.getScope());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
276	[BUG]  [BUGGY]  c.defMetadata.addDependency(c.varName,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(c.varName,  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(c.varName,  inlinedNewDependencies);	  c.defMetadata.addDependency(c.varName);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
277	[BUG]  [BUGGY]  c.defMetadata.addDependency(c.varName,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(c.varName,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(c.varName,  numUseWithinUseCfgNode);	  c.defMetadata.addDependency(c.varName);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
278	[BUG]  [BUGGY]  c.defMetadata.addDependency(c.varName,  def);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(c.varName,  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(c.varName,  def);	  c.defMetadata.addDependency(c.varName);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
279	[BUG]  [BUGGY]  c.defMetadata.inlinePath(t);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlinePath(t);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlinePath(t);	  c.defMetadata.inlinePath();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
280	[BUG]  [BUGGY]  c.depends.remove(c.varName)&&  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.remove(c.varName)&&  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.remove(c.varName)&&  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  c.depends.remove(c.varName);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
281	[BUG]  [BUGGY]  c.depends.remove(c.varName)&&!inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.remove(c.varName)&&!inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.remove(c.varName)&&!inlinedNewDependencies.add(t.getScope().getVar(c.varName));	  c.depends.remove(c.varName);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
282	[BUG]  [BUGGY]  c.inline(c.varName,  def);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  def);	  c.inline(c.def,    c.varName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
283	[BUG]  [BUGGY]  c.inline(c.def,  n);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.def,  n);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.def,  n);	  c.inline(c.def,    c.varName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
284	[BUG]  [BUGGY]  c.inline(c.def,  c.varName,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.def,  c.varName,  numUseWithinCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.def,  c.varName,  numUseWithinCfgNode);	  c.inline(c.def,    c.varName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
285	[BUG]  [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName),  def);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(t.getScope().getVar(c.varName),  def);	  c.defMetadata.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	65	None	replace
286	[BUG]  [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.name));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.name));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(t.getScope().getVar(c.name));	  c.defMetadata.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	65	None	replace
287	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getParent());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  t.getParent());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getParent());	  c.defMetadata.inline(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
288	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
289	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  def,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
290	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getFirstChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getFirstChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
291	[BUG]  [BUGGY]  c.defMetadata.inlineChild(c);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlineChild(c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlineChild(c);	  c.inlineChild(c);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
292	[BUG]  [BUGGY]  c.inlineChild(c.def);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c.def);	  c.inlineChild(c);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
293	[BUG]  [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName),  cfg);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(t.getScope().getVar(c.varName),  cfg);	  c.defMetadata.addDependency(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
294	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  def);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  def);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    c);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
295	[BUG]  [BUGGY]  c.inline(t.getScope().getVar(c.name));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScope().getVar(c.name));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(t.getScope().getVar(c.name));	  c.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  def);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild(),  def);	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getCurrentNode().getLastChild());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getCurrentNode().getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getCurrentNode().getLastChild());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
298	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getDependencyCfgNode().getLastChild());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getDependencyCfgNode().getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getDependencyCfgNode().getLastChild());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
299	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getImplicitReturn();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getImplicitReturn();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =  c.getImplicitReturn();	  FlowSensitiveInlineVariableDef    c    =    c.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
300	[BUG]  [BUGGY]  c.inlineChild(c.def,  c.varName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c.def,  c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c.def,  c.varName);	  c.inlineChild(c.varName);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
301	[BUG]  [BUGGY]  c.inlineChild(t,  c.varName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t,  c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(t,  c.varName);	  c.inlineChild(c.varName);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
302	[BUG]  [BUGGY]  c.inlineChild(c.sourceName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c.sourceName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c.sourceName);	  c.inlineChild(c.varName);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
303	[BUG]  [BUGGY]  c.inlineChild(c.varName,  def);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c.varName,  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c.varName,  def);	  c.inlineChild(c.varName);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
304	[BUG]  [BUGGY]  c.defMetadata.inline(varName,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(varName,  numUseWithinCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(varName,  numUseWithinCfgNode);	  c.defMetadata.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
305	[BUG]  [BUGGY]  c.defMetadata.inline(varName,  numUseWithinCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(varName,  numUseWithinCfgNode  +  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(varName,  numUseWithinCfgNode  +  1);	  c.defMetadata.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
306	[BUG]  [BUGGY]  c.inline(c.varName,  numUseWithinUseCfgNode  -  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  numUseWithinUseCfgNode  -  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  numUseWithinUseCfgNode  -  1);	  c.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
307	[BUG]  [BUGGY]  c.inlineCfgNode();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineCfgNode();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineCfgNode();	  c.inlineChildren();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
308	[BUG]  [BUGGY]  c.inlineChildren(c);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChildren(c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChildren(c);	  c.inlineChildren();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
309	[BUG]  [BUGGY]  c.inline(c.varName,  numUseWithinNewDependencies);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  numUseWithinNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  numUseWithinNewDependencies);	  c.inline(c.varName,    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
310	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  c.def);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild(),  c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScopeRoot().getLastChild(),  c.def);	  c.inlinePath(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
311	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName,  0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.varName,  0);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName,  0);	  c.defMetadata.depends.add(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
312	[BUG]  [BUGGY]  c.inline(c.getName(),  t.getScope());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.getName(),  t.getScope());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.getName(),  t.getScope());	  c.inline(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	28	None	replace
313	[BUG]  [BUGGY]  c.inline(c.def,  t.getScope());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.def,  t.getScope());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.def,  t.getScope());	  c.inline(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	28	None	replace
314	[BUG]  [BUGGY]  c.inline(c.defName,  t.getScope());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.defName,  t.getScope());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.defName,  t.getScope());	  c.inline(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	28	None	replace
315	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  c.depends,  c.def);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  c.depends,  c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  c.depends,  c.def);	  c.inlineDependencies(t.getScope().getVar(c.varName),    c.depends);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
316	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  numUseWithinUseCfgNode);	  c.inlineDependencies(t.getScope().getVar(c.varName),    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
317	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  n);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  n);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getScopeRoot(),  n);	  c.defMetadata.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
318	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  numUseWithinCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getScopeRoot(),  numUseWithinCfgNode);	  c.defMetadata.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
319	[BUG]  [BUGGY]  c.inlinePath(c.def);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(c.def);	  c.inlinePath(c.varName);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
320	[BUG]  [BUGGY]  c.depends.add(t.getScope().getVar(varName));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(t.getScope().getVar(varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(t.getScope().getVar(varName));	  c.depends.clear();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
321	[BUG]  [BUGGY]  c.depends.add(n);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(n);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(n);	  c.depends.clear();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
322	[BUG]  [BUGGY]  Node  c  =  c.getScopeNode();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getScopeNode();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getScopeNode();	  Node    c    =    c.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
323	[BUG]  [BUGGY]  Node  c  =  c.getScopeRoot().getLastChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getScopeRoot().getLastChild();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getScopeRoot().getLastChild();	  Node    c    =    c.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
324	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.inlineCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.inlineCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.inlineCfgNode);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    c.useCfgNode);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
325	[BUG]  [BUGGY]  Node  c  =  c.getAncestor(2);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getAncestor(2);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getAncestor(2);	  Node    c    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
326	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  else  {  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  else  {  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  else  {  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
327	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  else  {  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  else  {  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  else  {	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
328	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  else  {  c.defMetadata.depends.add(t.getScope().getVar(c.varName)  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  else  {  c.defMetadata.depends.add(t.getScope().getVar(c.varName)  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  else  {  c.defMetadata.depends.add(t.getScope().getVar(c.varName)	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
329	[BUG]  [BUGGY]  c.defMetadata.inlineCfgNode(c.varName,  def);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlineCfgNode(c.varName,  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlineCfgNode(c.varName,  def);	  c.defMetadata.inlineCfgNode(c.varName);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
330	[BUG]  [BUGGY]  c.defMetadata.inlineCfgNode(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlineCfgNode(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlineCfgNode(t.getScope().getVar(c.varName));	  c.defMetadata.inlineCfgNode(c.varName);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
331	[BUG]  [BUGGY]  c.defMetadata.inline(n,  c.varName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(n,  c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(n,  c.varName);	  c.defMetadata.inline(c.varName,    n);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
332	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  n,  def);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  n,  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  n,  def);	  c.defMetadata.inline(c.varName,    n);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
333	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName,  numUseWithinDependencies);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.varName,  numUseWithinDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName,  numUseWithinDependencies);	  c.defMetadata.depends.add(c.varName,    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
334	[BUG]  [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.name));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.name));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(t.getScope().getVar(c.name));	  c.defMetadata.add(t.getScope().getVar(c.varName),    c);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
335	[BUG]  [BUGGY]  c.inline(c.varName,  numUseWithinCfgNode  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  numUseWithinCfgNode  -  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  numUseWithinCfgNode  -  1);	  c.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
336	[BUG]  [BUGGY]  c.inline(c.varName,  0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  0);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  0);	  c.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
337	[BUG]  [BUGGY]  Node  c  =  c.node();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.node();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.node();	  Node    c    =    c.getCurrentNode();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
338	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScopeRoot(),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  t.getScopeRoot(),  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScopeRoot(),  numUseWithinUseCfgNode);	  c.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
339	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScopeRoot(),  c.def);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  t.getScopeRoot(),  c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScopeRoot(),  c.def);	  c.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
340	[BUG]  [BUGGY]  c.inline(c.sourceName,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.sourceName,  t.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.sourceName,  t.getScopeRoot());	  c.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
341	[BUG]  [BUGGY]  c.inline(c.getName(),  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.getName(),  t.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.getName(),  t.getScopeRoot());	  c.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
342	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinNewDependencies);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  numUseWithinNewDependencies);	  c.defMetadata.inline(c.varName,    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
343	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinDependencies);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  numUseWithinDependencies);	  c.defMetadata.inline(c.varName,    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
344	[BUG]  [BUGGY]  c.defMetadata.add(c.varName,  c.getScope());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.varName,  c.getScope());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.varName,  c.getScope());	  c.defMetadata.add(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	83	None	replace
345	[BUG]  [BUGGY]  c.defMetadata.add(c.varName,  c.getVar(c.varName));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.varName,  c.getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.varName,  c.getVar(c.varName));	  c.defMetadata.add(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	83	None	replace
346	[BUG]  [BUGGY]  c.defMetadata.add(c.varName,  c.getParent());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.varName,  c.getParent());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.varName,  c.getParent());	  c.defMetadata.add(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	83	None	replace
347	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  0);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  0);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
348	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  numUseWithinCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  numUseWithinCfgNode);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    inlinedNewDependencies.add(t.getScope().getVar(c.varName)    	non-compiled	[CE]  <identifier>  expected	76	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    inlinedNewDependencies.add(t.getScope().getVar(c.varName)    	non-compiled	[CE]  <identifier>  expected	76	None	replace
351	[BUG]  [BUGGY]  if(c.canInline())  {  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.canInline())  {  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  }	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
352	[BUG]  [BUGGY]  if(c.canInline())  {  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  }  else  {  inlinedNewDependencies.add(  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  }  else  {  inlinedNewDependencies.add(  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.canInline())  {  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  }  else  {  inlinedNewDependencies.add(	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
353	[BUG]  [BUGGY]  c.defMetadata.add(c.varName,  def);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.varName,  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.varName,  def);	  c.defMetadata.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
354	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inlinedNewDepen  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inlinedNewDepen  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inlinedNewDepen	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    if(inlinedNewDependencies.contains(c.def))    {    inlinedNewDependencies.add(t.getScope().getVar(c.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
355	[BUG]  [BUGGY]  if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    if(inlinedNewDependencies.contains(c.def))    {    inlinedNewDependencies.add(t.getScope().getVar(c.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
356	[BUG]  [BUGGY]  if(c.defMetadata!=  null)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inline  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.defMetadata!=  null)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inline  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.defMetadata!=  null)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inline	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    if(inlinedNewDependencies.contains(c.def))    {    inlinedNewDependencies.add(t.getScope().getVar(c.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
357	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inline  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inline  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inline	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    if(inlinedNewDependencies.contains(c.def))    {    inlinedNewDependencies.add(t.getScope().getVar(c.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
358	[BUG]  [BUGGY]  if(c.canInline())  {  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  cfg);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  cfg);  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.canInline())  {  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  cfg);  }	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    cfg);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
359	[BUG]  [BUGGY]  c.defMetadata.add(c);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c);	  c.defMetadata.clear();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
360	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  c.getLastChild());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  c.getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getScope().getVar(c.varName),  c.getLastChild());	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
361	[BUG]  [BUGGY]  c.inlinePath(t.getScope().getVar(c.name));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScope().getVar(c.name));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScope().getVar(c.name));	  c.inlinePath(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
362	[BUG]  [BUGGY]  c.inline(c.def,  t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.def,  t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.def,  t.getScope().getVar(c.varName));	  c.inline(c.varName,    t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
363	[BUG]  [BUGGY]  c.inline(c.defMetadata.depends,  t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.defMetadata.depends,  t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.defMetadata.depends,  t.getScope().getVar(c.varName));	  c.inline(c.varName,    t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
364	[BUG]  [BUGGY]  c.depends.add(c.varName)&&!c.defMetadata.depends.isEmpty());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(c.varName)&&!c.defMetadata.depends.isEmpty());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(c.varName)&&!c.defMetadata.depends.isEmpty());	  c.depends.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
365	[BUG]  [BUGGY]  c.depends.add(c.varName  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(c.varName  +  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(c.varName  +  1);	  c.depends.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
366	[BUG]  [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName),  c.getLastChild());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName),  c.getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(t.getScope().getVar(c.varName),  c.getLastChild());	  c.defMetadata.add(c.getScope().getVar(c.varName),    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	85	None	replace
367	[BUG]  [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  c.getLastChild());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  c.getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getScope().getVar(c.varName),  c.getLastChild());	  c.defMetadata.add(c.getScope().getVar(c.varName),    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	85	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  def);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  def);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(n.getScopeRoot().getLastChild());	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(varName),  def);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(varName),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getVar(varName),  def);	  NodeTraversal.traverse(compiler,    c.getVar(varName));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(varName),  this);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(varName),  this);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getVar(varName),  this);	  NodeTraversal.traverse(compiler,    c.getVar(varName));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getNameNode());  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getNameNode());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getNameNode());	  NodeTraversal.traverse(compiler,    c.getVar(varName));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
373	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName  +  1,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.varName  +  1,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName  +  1,  numUseWithinUseCfgNode);	  c.defMetadata.depends.add(c.varName    +    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
374	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.node.clone();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.node.clone();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.node.clone();	  FlowSensitiveInlineVariableDef    c    =(FlowSensitiveInlineVariableDef)c.clone();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
375	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.next();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.next();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.next();	  FlowSensitiveInlineVariableDef    c    =(FlowSensitiveInlineVariableDef)c.clone();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
376	[BUG]  [BUGGY]  c.defMetadata.inline(varName,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(varName,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(varName,  numUseWithinUseCfgNode);	  c.defMetadata.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
377	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinUseCfgNode  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinUseCfgNode  -  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  numUseWithinUseCfgNode  -  1);	  c.defMetadata.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
378	[BUG]  [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.name));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.name));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getScope().getVar(c.name));	  c.defMetadata.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	79	None	replace
379	[BUG]  [BUGGY]  c.defMetadata.addDependency(c.varName,  reachingUses,  def);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(c.varName,  reachingUses,  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(c.varName,  reachingUses,  def);	  c.defMetadata.addDependency(c.varName,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
380	[BUG]  [BUGGY]  c.defMetadata.addDependency(  reachingUses,  c.varName);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(  reachingUses,  c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(  reachingUses,  c.varName);	  c.defMetadata.addDependency(c.varName,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
381	[BUG]  [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.name));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.name));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(c.getScope().getVar(c.name));	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	40	None	replace
382	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName),  cfg);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName),  cfg);	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	40	None	replace
383	[BUG]  [BUGGY]  c.defMetadata.inline(c.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.getScope().getVar(c.varName),  cfg);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.getScope().getVar(c.varName),  cfg);	  c.defMetadata.inline(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	50	None	replace
384	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  cfg,  def);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  cfg,  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  cfg,  def);	  c.inlineDependencies(t.getScope().getVar(c.varName),    cfg);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
385	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  inlinedNewDependencies.add(t.getScope().getVar(	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  c);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  c);	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
387	[BUG]  [BUGGY]  c.defMetadata.addChildToBack(c);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addChildToBack(c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addChildToBack(c);	  c.defMetadata.reset();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
388	[BUG]  [BUGGY]  if(c.canInline())  {  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  c);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  c);  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.canInline())  {  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  c);  }	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    c);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
389	[BUG]  [BUGGY]  c.defMetadata.removeDependency(c.varName);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.removeDependency(c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.removeDependency(c.varName);	  c.defMetadata.addDependency(c.varName);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
390	[BUG]  [BUGGY]  c.defPath  =  c.getScopeRoot().getLastChild()  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defPath  =  c.getScopeRoot().getLastChild()  +  1;  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defPath  =  c.getScopeRoot().getLastChild()  +  1;	  c.defPath    =    c.getScopeRoot().getLastChild();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
391	[BUG]  [BUGGY]  c.inline(c.def,  def);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.def,  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.def,  def);	  c.inline(c.def);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
392	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  cfgNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  cfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  cfgNode);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    cfg);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
393	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.name));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.name));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.name));	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
394	[BUG]  [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(varName));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(c.getScope().getVar(varName));	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
395	[BUG]  [BUGGY]  Node  c  =  c.getDeepestCfgNode();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getDeepestCfgNode();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getDeepestCfgNode();	  Node    c    =    c.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
396	[BUG]  [BUGGY]  c.inline(t.getScope().getVar(c.varName)+  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScope().getVar(c.varName)+  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(t.getScope().getVar(c.varName)+  1);	  c.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(  t.getScope().getVar(  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(  t.getScope().getVar(  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(  t.getScope().getVar(	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
398	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(  t.getScope().get  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(  t.getScope().get  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(  t.getScope().get	  NodeTraversal.traverse(compiler,    cfg,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild());    inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
399	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  cfg,  def);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  cfg,  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  cfg,  def);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    cfg);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
400	[BUG]  [BUGGY]  if(!c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(!c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(!c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
401	[BUG]  [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
402	[BUG]  [BUGGY]  if(!c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  else  {  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(!c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  else  {  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(!c.canInline())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  }  else  {	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
403	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  c.depends,  c.defMetadata);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  c.depends,  c.defMetadata);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  c.depends,  c.defMetadata);	  c.inlineDependencies(t.getScope().getVar(c.varName),    c.depends);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
404	[BUG]  [BUGGY]  if(c.defMetadata.depends.isEmpty())  {  c.defMetadata.inline(c.getScope().getVar(c.varName));  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.defMetadata.depends.isEmpty())  {  c.defMetadata.inline(c.getScope().getVar(c.varName));  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.defMetadata.depends.isEmpty())  {  c.defMetadata.inline(c.getScope().getVar(c.varName));  }	  c.defMetadata.inline(c.getScope().getVar(c.varName));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
405	[BUG]  [BUGGY]  if(c.defMetadata.depends.isEmpty())  {  c.defMetadata.inline(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().get  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.defMetadata.depends.isEmpty())  {  c.defMetadata.inline(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().get  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.defMetadata.depends.isEmpty())  {  c.defMetadata.inline(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope().get	  c.defMetadata.inline(c.getScope().getVar(c.varName));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
406	[BUG]  [BUGGY]  if(c.defMetadata.depends.isEmpty())  {  c.defMetadata.inline(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.defMetadata.depends.isEmpty())  {  c.defMetadata.inline(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.defMetadata.depends.isEmpty())  {  c.defMetadata.inline(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScope	  c.defMetadata.inline(c.getScope().getVar(c.varName));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
407	[BUG]  [BUGGY]  if(c.defMetadata.depends.isEmpty())  {  c.defMetadata.inline(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScop  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.defMetadata.depends.isEmpty())  {  c.defMetadata.inline(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScop  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.defMetadata.depends.isEmpty())  {  c.defMetadata.inline(c.getScope().getVar(c.varName));  }  else  {  inlinedNewDependencies.add(t.getScop	  c.defMetadata.inline(c.getScope().getVar(c.varName));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
408	[BUG]  [BUGGY]  c.defMetadata.addDependency(c.getScope().getVar(c.varName),  def);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(c.getScope().getVar(c.varName),  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(c.getScope().getVar(c.varName),  def);	  c.defMetadata.addDependency(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
409	[BUG]  [BUGGY]  c.defMetadata.addDependency(c.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(c.getScope().getVar(c.varName),  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(c.getScope().getVar(c.varName),  c);	  c.defMetadata.addDependency(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
410	[BUG]  [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName),  c.depends);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName),  c.depends);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(t.getScope().getVar(c.varName),  c.depends);	  c.defMetadata.addDependency(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
411	[BUG]  [BUGGY]  c.inline(varName,  numUseWithinCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(varName,  numUseWithinCfgNode  +  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(varName,  numUseWithinCfgNode  +  1);	  c.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
412	[BUG]  [BUGGY]  c.inline(c.varName,  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  1);	  c.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
413	[BUG]  [BUGGY]  c.inline(n,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(n,  numUseWithinCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(n,  numUseWithinCfgNode);	  c.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
414	[BUG]  [BUGGY]  c.inline(varName,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(varName,  numUseWithinCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(varName,  numUseWithinCfgNode);	  c.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
415	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getFirstChild(),  c);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getFirstChild(),  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScopeRoot().getFirstChild(),  c);	  c.inlinePath(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
416	[BUG]  [BUGGY]  inlineDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlineDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlineDependencies.add(t.getScope().getVar(c.varName));	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	40	None	replace
417	[BUG]  [BUGGY]  inlineNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlineNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlineNewDependencies.add(t.getScope().getVar(c.varName));	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	40	None	replace
418	[BUG]  [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName),  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName),  t.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(c.getScope().getVar(c.varName),  t.getScopeRoot());	  inlinedNewDependencies.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	40	None	replace
419	[BUG]  [BUGGY]  c.depends  =  new  LinkedHashMap  <  String,Candidate>();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends  =  new  LinkedHashMap  <  String,Candidate>();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends  =  new  LinkedHashMap  <  String,Candidate>();	  c.depends.clear();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
420	[BUG]  [BUGGY]  c.depends  =  new  HashSet  <  String>();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends  =  new  HashSet  <  String>();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends  =  new  HashSet  <  String>();	  c.depends.clear();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
421	[BUG]  [BUGGY]  c.depends  =  new  LinkedHashMap  <  String,Candidate>(inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends  =  new  LinkedHashMap  <  String,Candidate>(inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends  =  new  LinkedHashMap  <  String,Candidate>(inlinedNewDependencies);	  c.depends.clear();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
422	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  t.getScope().getVar(c.varName));	  NodeTraversal.traverse(compiler,    c.getVar(varName));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope().getVar(varName));  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope().getVar(varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  t.getScope().getVar(varName));	  NodeTraversal.traverse(compiler,    c.getVar(varName));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
424	[BUG]  [BUGGY]  c.depends.add(c.varName)&&  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(c.varName)&&  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(c.varName)&&  c.defMetadata.depends.add(t.getScope().getVar(c.varName));	  c.depends.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
425	[BUG]  [BUGGY]  c.depends.add(c.varName,  t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(c.varName,  t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(c.varName,  t.getScope().getVar(c.varName));	  c.depends.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
426	[BUG]  [BUGGY]  c.depends.add(c.varName)&&  c.defMetadata.depends.contains(c.varName);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.depends.add(c.varName)&&  c.defMetadata.depends.contains(c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(c.varName)&&  c.defMetadata.depends.contains(c.varName);	  c.depends.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
427	[BUG]  [BUGGY]  c.inline(c.varName,  t.getParent());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  t.getParent());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getParent());	  c.inline(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	28	None	replace
428	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.remove();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.remove();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.remove();	  FlowSensitiveInlineVariableDef    c    =(FlowSensitiveInlineVariableDef)c.clone();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
429	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName)+  1),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName)+  1),  inlinedNewDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName)+  1),  inlinedNewDependencies);	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
430	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName  +  3);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.varName  +  3);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName  +  3);	  c.defMetadata.depends.add(c.varName    +    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
431	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName)+  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.varName)+  1;  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName)+  1;	  c.defMetadata.depends.add(c.varName    +    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
432	[BUG]  [BUGGY]  c.inline(varName,  numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(varName,  numUseWithinUseCfgNode  +  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(varName,  numUseWithinUseCfgNode  +  1);	  c.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
433	[BUG]  [BUGGY]  c.inline(n,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(n,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(n,  numUseWithinUseCfgNode);	  c.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
434	[BUG]  [BUGGY]  c.inline(varName,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(varName,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(varName,  numUseWithinUseCfgNode);	  c.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
435	[BUG]  [BUGGY]  inlineDependencies.add(t.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  inlineDependencies.add(t.getScope().getVar(c.varName),  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlineDependencies.add(t.getScope().getVar(c.varName),  c);	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
436	[BUG]  [BUGGY]  c.defMetadata.inlineDependencies(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlineDependencies(t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlineDependencies(t.getScope().getVar(c.varName));	  c.defMetadata.inlineCfgNode(c.varName);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
437	[BUG]  [BUGGY]  c.defMetadata.inlineCfgNode(c.varName,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlineCfgNode(c.varName,  t.getScopeRoot());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlineCfgNode(c.varName,  t.getScopeRoot());	  c.defMetadata.inlineCfgNode(c.varName);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
438	[BUG]  [BUGGY]  c.defMetadata.inlineVar(c.varName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inlineVar(c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlineVar(c.varName);	  c.defMetadata.inlineCfgNode(c.varName);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
439	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode,  def);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode,  def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode,  def);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName),    c.useCfgNode);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
440	[BUG]  [BUGGY]  c.defMetadata.inline(t.getScopeRoot().getVar(c.varName));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(t.getScopeRoot().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(t.getScopeRoot().getVar(c.varName));	  c.defMetadata.inline(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	65	None	replace
441	[BUG]  [BUGGY]  c.inlinePath(c.varName,  t.getScope());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(c.varName,  t.getScope());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(c.varName,  t.getScope());	  c.inlinePath(c.varName);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
442	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getVar(c.varName));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlinePath(t.getScopeRoot().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScopeRoot().getVar(c.varName));	  c.inlinePath(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	71	None	replace
443	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  0);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  0);	  c.defMetadata.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
444	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  1);	  c.defMetadata.inline(c.varName,    numUseWithinCfgNode);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
445	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName,  t.getScope());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.varName,  t.getScope());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName,  t.getScope());	  c.defMetadata.depends.add(c.varName,    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
446	[BUG]  [BUGGY]  c.defMetadata.inline(varName,  numUseWithinUseCfgNode  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(varName,  numUseWithinUseCfgNode  +  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(varName,  numUseWithinUseCfgNode  +  1);	  c.defMetadata.inline(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
447	[BUG]  [BUGGY]  c.defMetadata.inline(c.def);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.def);	  c.inline(c.def);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
448	[BUG]  [BUGGY]  c.defMetadata.add(c.def);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.def);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.def);	  c.inline(c.def);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
449	[BUG]  [BUGGY]  c.defMetadata.add(c.varName,  t.getParent());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.varName,  t.getParent());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.varName,  t.getParent());	  c.defMetadata.add(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	83	None	replace
450	[BUG]  [BUGGY]  c.defMetadata.add(c.varName,  t.getConstructor());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.varName,  t.getConstructor());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.varName,  t.getConstructor());	  c.defMetadata.add(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	83	None	replace
451	[BUG]  [BUGGY]  c.inline(c.varName,  numUseWithinDependencies);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  numUseWithinDependencies);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  numUseWithinDependencies);	  c.inline(c.varName,    inlinedNewDependencies);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
452	[BUG]  [BUGGY]  c.defMetadata.removeValue(c.varName);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.removeValue(c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.removeValue(c.varName);	  c.defMetadata.remove(c.varName);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
453	[BUG]  [BUGGY]  Node  c  =  c.nextDoc();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.nextDoc();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.nextDoc();	  Node    c    =    c.getCurrentNode();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
454	[BUG]  [BUGGY]  c.defMetadata.addDependency(c.varName,  reachingUses,  c.useCfgNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(c.varName,  reachingUses,  c.useCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(c.varName,  reachingUses,  c.useCfgNode);	  c.defMetadata.addDependency(c.varName,    reachingUses);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
455	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.getCurrentNode());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.getCurrentNode());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.getCurrentNode());	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
456	[BUG]  [BUGGY]  Node  c  =  c.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.removeFirstChild();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.removeFirstChild();	  Node    c    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
457	[BUG]  [BUGGY]  c.defMetadata.put(c.varName,  t);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.put(c.varName,  t);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.put(c.varName,  t);	  c.defMetadata.put(c.varName,    c);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
458	[BUG]  [BUGGY]  c.inline(t.getScopeRoot(),  c.varName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t.getScopeRoot(),  c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(t.getScopeRoot(),  c.varName);	  c.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
459	[BUG]  [BUGGY]  c.inline(c.varName,  t.getConstructor());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  t.getConstructor());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getConstructor());	  c.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
460	[BUG]  [BUGGY]  if(c.defMetadata!=  null)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.defMetadata!=  null)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.defMetadata!=  null)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    if(inlinedNewDependencies.contains(c.def))    {    inlinedNewDependencies.add(t.getScope().getVar(c.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
461	[BUG]  [BUGGY]  if(c.defMetadata!=  null)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inlinedNewDe  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.defMetadata!=  null)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inlinedNewDe  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.defMetadata!=  null)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inlinedNewDe	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    if(inlinedNewDependencies.contains(c.def))    {    inlinedNewDependencies.add(t.getScope().getVar(c.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
462	[BUG]  [BUGGY]  if(c.defMetadata.depends!=  null)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  if(c.defMetadata.depends!=  null)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	if(c.defMetadata.depends!=  null)  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  }	  inlinedNewDependencies.add(t.getScope().getVar(c.varName));    if(inlinedNewDependencies.contains(c.def))    {    inlinedNewDependencies.add(t.getScope().getVar(c.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
463	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getDeepestCfgNode().getLastChild());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getDeepestCfgNode().getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getDeepestCfgNode().getLastChild());	  NodeTraversal.traverse(compiler,    c.getScopeRoot().getLastChild());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
464	[BUG]  [BUGGY]  c.defMetadata.remove(c.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.remove(c.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.remove(c.getScope().getVar(c.varName));	  c.defMetadata.add(c.getScope().getVar(c.varName),    c);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
465	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.def.getConstructor();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.def.getConstructor();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =  c.def.getConstructor();	  FlowSensitiveInlineVariableDef    c    =    c.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
466	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getConstructor()  ||  c.defMetadata.depends.isEmpty();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getConstructor()  ||  c.defMetadata.depends.isEmpty();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =  c.getConstructor()  ||  c.defMetadata.depends.isEmpty();	  FlowSensitiveInlineVariableDef    c    =    c.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
467	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.canInline()?  c.getConstructor()  :  null;  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.canInline()?  c.getConstructor()  :  null;  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =  c.canInline()?  c.getConstructor()  :  null;	  FlowSensitiveInlineVariableDef    c    =    c.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
468	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getParent();  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getParent();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =  c.getParent();	  FlowSensitiveInlineVariableDef    c    =    c.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
469	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.varName,  t.getScope().getVar(c.varName),  cfg);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScope().getVar(c.varName),  cfg);	  c.inline(c.varName,    t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
470	[BUG]  [BUGGY]  c.inline(c.getName(),  t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.getName(),  t.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.getName(),  t.getScope().getVar(c.varName));	  c.inline(c.varName,    t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
471	[BUG]  [BUGGY]  c.inlineChild(c.varName,  t.getScope());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(c.varName,  t.getScope());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c.varName,  t.getScope());	  c.inlineChild(c.varName);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
472	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName)+  1,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName)+  1,  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName)+  1,  numUseWithinUseCfgNode);	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
473	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName)+  1),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName)+  1),  numUseWithinUseCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName)+  1),  numUseWithinUseCfgNode);	  c.defMetadata.depends.add(c.getScope().getVar(c.varName),    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
474	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName,  numUseWithinCfgNode  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.varName,  numUseWithinCfgNode  +  1);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName,  numUseWithinCfgNode  +  1);	  c.defMetadata.depends.add(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
475	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName,  n);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.depends.add(c.varName,  n);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName,  n);	  c.defMetadata.depends.add(c.varName,    numUseWithinUseCfgNode);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
476	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getConstructor());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  t.getConstructor());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getConstructor());	  c.defMetadata.inline(c.varName,    t.getScope());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
477	[BUG]  [BUGGY]  c.defMetadata.addDependency(c.varName,  t.getScope());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.addDependency(c.varName,  t.getScope());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(c.varName,  t.getScope());	  c.defMetadata.addDependency(c.varName);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
478	[BUG]  [BUGGY]  c.defMetadata.inline(t.getScopeRoot(),  c.varName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(t.getScopeRoot(),  c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(t.getScopeRoot(),  c.varName);	  c.defMetadata.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
479	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  c.useCfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  c.useCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getScopeRoot(),  c.useCfgNode);	  c.defMetadata.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
480	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  c);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  c);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getScopeRoot(),  c);	  c.defMetadata.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
481	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  c.type);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot(),  c.type);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getScopeRoot(),  c.type);	  c.defMetadata.inline(c.varName,    t.getScopeRoot());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
482	[BUG]  [BUGGY]  c.defMetadata.add(c.getParent().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(c.getParent().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getParent().getVar(c.varName));	  c.defMetadata.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	47	None	replace
483	[BUG]  [BUGGY]  c.inlineChild(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inlineChild(t.getScopeRoot().getLastChild());  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(t.getScopeRoot().getLastChild());	  c.inlineChildren();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
484	[BUG]  [BUGGY]  c.inline(def,  c.varName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(def,  c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(def,  c.varName);	  c.inline(c.def,    c.varName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
485	[BUG]  [BUGGY]  c.inline(n,  c.varName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(n,  c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(n,  c.varName);	  c.inline(c.def,    c.varName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
486	[BUG]  [BUGGY]  c.inline(c.def,  c.varName,  c.useCfgNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(c.def,  c.varName,  c.useCfgNode);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.def,  c.varName,  c.useCfgNode);	  c.inline(c.def,    c.varName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
487	[BUG]  [BUGGY]  c.inline(t,  c.varName);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.inline(t,  c.varName);  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(t,  c.varName);	  c.inline(c.def,    c.varName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
488	[BUG]  [BUGGY]  Node  c  =  c.getImmediateParentNode();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getImmediateParentNode();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getImmediateParentNode();	  Node    c    =    c.getNode();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
489	[BUG]  [BUGGY]  Node  c  =  c.getOwnerDocument();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  Node  c  =  c.getOwnerDocument();  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getOwnerDocument();	  Node    c    =    c.getNode();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
490	[BUG]  [BUGGY]  c.defMetadata.add(t.getScopeRoot().getVar(c.varName));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.add(t.getScopeRoot().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(t.getScopeRoot().getVar(c.varName));	  c.defMetadata.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	79	None	replace
491	[BUG]  [BUGGY]  c.defMetadata.put(varName,  c.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]        new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {      [BUGGY]  c.defMetadata.put(varName,  c.getScope().getVar(c.varName));  [BUGGY]              if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.put(varName,  c.getScope().getVar(c.varName));	  c.defMetadata.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	79	None	replace
