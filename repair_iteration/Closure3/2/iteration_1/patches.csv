bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  c);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  c);	  c.inlineDependencies(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
2	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  inlinedNewDependencies);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  inlinedNewDependencies);	  c.inlineDependencies(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
3	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  cfg);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  cfg);	  c.inlineDependencies(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
4	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  c.def);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  c.def);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  c.def);	  c.inlineDependencies(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
5	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  c.depends);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  c.depends);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  c.depends);	  c.inlineDependencies(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
6	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  t.getScopeRoot());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getScope().getVar(c.varName),  t.getScopeRoot());	  c.defMetadata.depends.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getScope().getVar(c.varName),  numUseWithinUseCfgNode);	  c.defMetadata.depends.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
8	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  cfg);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getScope().getVar(c.varName),  cfg);	  c.defMetadata.depends.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
9	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  inlinedNewDependencies);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getScope().getVar(c.varName),  inlinedNewDependencies);	  c.defMetadata.depends.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
10	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getVar(c.varName),  t.getScope());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.depends.add(c.getVar(c.varName),  t.getScope());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getVar(c.varName),  t.getScope());	  c.defMetadata.depends.add(c.getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getVar(c.varName),  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.depends.add(c.getVar(c.varName),  t.getScopeRoot());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getVar(c.varName),  t.getScopeRoot());	  c.defMetadata.depends.add(c.getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	6	None	replace
12	[BUG]  [BUGGY]  c.depends.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.depends.add(t.getScope().getVar(c.varName));  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(t.getScope().getVar(c.varName));	  c.defMetadata.depends.add(c.getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	6	None	replace
13	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.depends.add(c.varName,  numUseWithinUseCfgNode);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName,  numUseWithinUseCfgNode);	  c.defMetadata.depends.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.depends.add(c.varName,  inlinedNewDependencies);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName,  inlinedNewDependencies);	  c.defMetadata.depends.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  c.depends.add(c.varName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.depends.add(c.varName);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.add(c.varName);	  c.defMetadata.depends.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  c.depends.remove(c.varName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.depends.remove(c.varName);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.remove(c.varName);	  c.defMetadata.depends.remove(c.varName);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
17	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinUseCfgNode);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  numUseWithinUseCfgNode);	  c.defMetadata.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
18	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.inline(c.varName,  inlinedNewDependencies);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  inlinedNewDependencies);	  c.defMetadata.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
19	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.inline(c.varName,  numUseWithinCfgNode);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  numUseWithinCfgNode);	  c.defMetadata.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
20	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  n);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.inline(c.varName,  n);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  n);	  c.defMetadata.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
21	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getScope());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.inline(c.varName,  t.getScope());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getScope());	  c.defMetadata.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
22	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  def);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.inline(c.varName,  def);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  def);	  c.defMetadata.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
23	[BUG]  [BUGGY]  c.inline(c.varName,  numUseWithinUseCfgNode);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inline(c.varName,  numUseWithinUseCfgNode);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  numUseWithinUseCfgNode);	  c.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
24	[BUG]  [BUGGY]  c.inline(c.varName,  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inline(c.varName,  inlinedNewDependencies);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  inlinedNewDependencies);	  c.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
25	[BUG]  [BUGGY]  c.inline(c.varName,  numUseWithinCfgNode);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inline(c.varName,  numUseWithinCfgNode);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  numUseWithinCfgNode);	  c.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
26	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inline(c.varName,  t.getScope().getVar(c.varName));  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScope().getVar(c.varName));	  c.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
27	[BUG]  [BUGGY]  c.inline(c.def,  c.varName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inline(c.def,  c.varName);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.def,  c.varName);	  c.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
28	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScope());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inline(c.varName,  t.getScope());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScope());	  c.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
29	[BUG]  [BUGGY]  c.inline(c.varName,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inline(c.varName,  t.getScopeRoot());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.varName,  t.getScopeRoot());	  c.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inlinePath(t.getScopeRoot().getLastChild());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScopeRoot().getLastChild());	  c.inlinePath();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
31	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot());  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inlinePath(t.getScopeRoot());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScopeRoot());	  c.inlinePath();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
32	[BUG]  [BUGGY]  c.defMetadata.inlinePath();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.inlinePath();  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlinePath();	  c.inlinePath();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
33	[BUG]  [BUGGY]  c.inlinePath(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inlinePath(t.getScopeRoot().getFirstChild());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScopeRoot().getFirstChild());	  c.inlinePath();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
34	[BUG]  [BUGGY]  c.depends.clear();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.depends.clear();  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.depends.clear();	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
35	[BUG]  [BUGGY]  c.defMetadata.remove(c.varName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.remove(c.varName);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.remove(c.varName);	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
36	[BUG]  [BUGGY]  c.defMetadata.add(c.varName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.add(c.varName);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.varName);	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
37	[BUG]  [BUGGY]  c.defMetadata.reset();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.reset();  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.reset();	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
38	[BUG]  [BUGGY]  c.defMetadata.addDependency(c.varName);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.addDependency(c.varName);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(c.varName);	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
39	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName));	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
40	[BUG]  [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  inlinedNewDependencies.add(c.getScope().getVar(c.varName));  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(c.getScope().getVar(c.varName));	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getScopeRoot().getLastChild());	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
42	[BUG]  [BUGGY]  Node  c  =  c.getCurrentNode();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  Node  c  =  c.getCurrentNode();  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getCurrentNode();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(varName));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  NodeTraversal.traverse(compiler,  c.getVar(varName));  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  c.getVar(varName));	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
44	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
45	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  inlinedNewDependencies);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  inlinedNewDependencies);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  inlinedNewDependencies);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
46	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.depends.add(c.getScope().getVar(c.varName),  c);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.getScope().getVar(c.varName),  c);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
47	[BUG]  [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName));  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(t.getScope().getVar(c.varName));	  c.defMetadata.depends.add(c.getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.addDependency(t.getScope().getVar(c.varName));  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(t.getScope().getVar(c.varName));	  c.defMetadata.depends.add(c.getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	6	None	replace
49	[BUG]  [BUGGY]  c.defMetadata.depends.add(c.varName  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.depends.add(c.varName  +  1);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(c.varName  +  1);	  c.defMetadata.depends.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
50	[BUG]  [BUGGY]  c.defMetadata.inline(c.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.inline(c.getScope().getVar(c.varName));  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.getScope().getVar(c.varName));	  c.defMetadata.depends.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
51	[BUG]  [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  cfg);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getScope().getVar(c.varName),  cfg);	  c.defMetadata.depends.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
52	[BUG]  [BUGGY]  c.inline(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inline(t.getScope().getVar(c.varName));  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(t.getScope().getVar(c.varName));	  c.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
53	[BUG]  [BUGGY]  c.inline(c.def);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inline(c.def);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inline(c.def);	  c.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
54	[BUG]  [BUGGY]  c.inlineChild(c.varName);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inlineChild(c.varName);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c.varName);	  c.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
55	[BUG]  [BUGGY]  c.inlineChild(c);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inlineChild(c);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChild(c);	  c.inlinePath();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
56	[BUG]  [BUGGY]  c.inlineChildren();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inlineChildren();  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineChildren();	  c.inlinePath();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
57	[BUG]  [BUGGY]  c.defMetadata.clear();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.clear();  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.clear();	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
58	[BUG]  [BUGGY]  c.defMetadata.addDependency(c.varName,  reachingUses);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.addDependency(c.varName,  reachingUses);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.addDependency(c.varName,  reachingUses);	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
59	[BUG]  [BUGGY]  Node  c  =  c.getScopeRoot();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  Node  c  =  c.getScopeRoot();  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getScopeRoot();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
60	[BUG]  [BUGGY]  Node  c  =  c.getFirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  Node  c  =  c.getFirstChild();  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
61	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.clone();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.clone();  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =(FlowSensitiveInlineVariableDef)c.clone();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  Node  c  =  c.getNode();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  Node  c  =  c.getNode();  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	Node  c  =  c.getNode();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
63	[BUG]  [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getConstructor();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  FlowSensitiveInlineVariableDef  c  =  c.getConstructor();  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	FlowSensitiveInlineVariableDef  c  =  c.getConstructor();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  cfg);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  cfg);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  cfg);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
65	[BUG]  [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.inline(t.getScope().getVar(c.varName));  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(t.getScope().getVar(c.varName));	  c.defMetadata.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
66	[BUG]  [BUGGY]  c.defMetadata.inlineCfgNode(c.varName);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.inlineCfgNode(c.varName);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inlineCfgNode(c.varName);	  c.defMetadata.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
67	[BUG]  [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  def);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inlineDependencies(t.getScope().getVar(c.varName),  def);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlineDependencies(t.getScope().getVar(c.varName),  def);	  c.inlineDependencies(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
68	[BUG]  [BUGGY]  c.defMetadata.add(c.getVar(c.varName),  t.getScope());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.add(c.getVar(c.varName),  t.getScope());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getVar(c.varName),  t.getScope());	  c.defMetadata.depends.add(c.getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	6	None	replace
69	[BUG]  [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.inline(c.varName,  t.getScopeRoot());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.inline(c.varName,  t.getScopeRoot());	  c.defMetadata.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
70	[BUG]  [BUGGY]  c.inlinePath(c.varName);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inlinePath(c.varName);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(c.varName);	  c.inline(c.varName);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
71	[BUG]  [BUGGY]  c.inlinePath(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.inlinePath(t.getScope().getVar(c.varName));  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.inlinePath(t.getScope().getVar(c.varName));	  c.inlinePath();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
72	[BUG]  [BUGGY]  c.defPath  =  c.getScopeRoot().getLastChild();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defPath  =  c.getScopeRoot().getLastChild();  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defPath  =  c.getScopeRoot().getLastChild();	  c.inlinePath();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName));	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
75	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName));  c.defMetadata.depends.add(t.getScope().getVar(c.varName));	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName)  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName)  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild());  inlinedNewDependencies.add(t.getScope().getVar(c.varName)	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
78	[BUG]  [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inlinedNewDependencies.add(t.getScope().getVar(c.  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inlinedNewDependencies.add(t.getScope().getVar(c.  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	inlinedNewDependencies.add(t.getScope().getVar(c.varName));  if(inlinedNewDependencies.contains(c.def))  {  inlinedNewDependencies.add(t.getScope().getVar(c.	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
79	[BUG]  [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName));  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getScope().getVar(c.varName));	  c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
80	[BUG]  [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  c);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getScope().getVar(c.varName),  c);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
81	[BUG]  [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName),  c);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.add(t.getScope().getVar(c.varName),  c);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(t.getScope().getVar(c.varName),  c);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
82	[BUG]  [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.depends.add(t.getScope().getVar(c.varName),  c.useCfgNode);	  c.defMetadata.depends.add(t.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
83	[BUG]  [BUGGY]  c.defMetadata.add(c.varName,  t.getScope());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.add(c.varName,  t.getScope());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.varName,  t.getScope());	  c.defMetadata.depends.add(c.varName);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
84	[BUG]  [BUGGY]  c.defMetadata.put(c.varName,  c);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.put(c.varName,  c);  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.put(c.varName,  c);	  c.defMetadata.depends.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
85	[BUG]  [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  t.getScopeRoot());  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {    [BUGGY]  c.defMetadata.add(c.getScope().getVar(c.varName),  t.getScopeRoot());  [BUGGY]            if  (!c.defMetadata.depends.isEmpty())  {  inlinedNewDependencies.add(t.getScope().getVar(c.varName));  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.3273268353539886	156	156	3	replace	c.defMetadata.add(c.getScope().getVar(c.varName),  t.getScopeRoot());	  c.defMetadata.depends.add(c.getScope().getVar(c.varName));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
