bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  def);  [BUGGY]  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	replace	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  def);	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
2	[BUG]  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScopeRoot(),  compiler);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScopeRoot(),  compiler);  [BUGGY]  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	replace	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScopeRoot(),  compiler);	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
3	[BUG]  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  reachingDef);  [BUGGY]  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	replace	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  reachingDef);	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
4	[BUG]  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScopeRoot(),  def);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScopeRoot(),  def);  [BUGGY]  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	replace	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScopeRoot(),  def);	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
5	[BUG]  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  mapping);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  mapping);  [BUGGY]  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	replace	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  mapping);	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
6	[BUG]  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  mappingNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  mappingNode);  [BUGGY]  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	replace	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  mappingNode);	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
7	[BUG]  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  parser);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  parser);  [BUGGY]  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	replace	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  parser);	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError  [CONTEXT]  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]    [BUGGY]  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	replace	  	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
9	[BUG]  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getCfgNode(),  compiler);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getCfgNode(),  compiler);  [BUGGY]  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	replace	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getCfgNode(),  compiler);	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
10	[BUG]  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getParent(),  compiler);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getParent(),  compiler);  [BUGGY]  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	replace	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getParent(),  compiler);	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
11	[BUG]  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  DEF_METADATA);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  DEF_METADATA);  [BUGGY]  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	replace	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  DEF_METADATA);	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
12	[BUG]  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  this);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  this);  [BUGGY]  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	replace	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  this);	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
13	[BUG]  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScopeRoot(),  this);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [BUGGY]  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScopeRoot(),  this);  [BUGGY]  reachingDef.analyze();  candidates  =  Lists.newLinkedList();    new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	142	142	3	replace	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScopeRoot(),  this);	reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
