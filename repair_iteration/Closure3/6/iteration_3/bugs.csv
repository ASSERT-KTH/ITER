bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  For(Node  cur  =  p.getPrevious();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getPrevious();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.getPrevious();  cur!=  null;  cur  =  cur.getParent())  {	  For(Node    cur    =    p.getPrevious();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
2	[BUG]  [BUGGY]  for(Node  cur  =  p.getLastChild();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getLastChild();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getLastChild();  cur!=  null;  cur  =  cur.getParent())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
3	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getLastChild())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getLastChild())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getLastChild())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
4	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getNext();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getNext();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  <  Node>  cur  =  predicate.getNext();	  Predicate    <    Node>    cur    =    p.getNext();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
5	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getLastChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.getLastChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  <  Node>  cur  =  p.getLastChild();	  Predicate    <    Node>    cur    =    p.getNext();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
6	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getPrevious();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.getPrevious();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  <  Node>  cur  =  p.getPrevious();	  Predicate    <    Node>    cur    =    p.getNext();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
7	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getNext()  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.getNext()  +  1;  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  <  Node>  cur  =  p.getNext()  +  1;	  Predicate    <    Node>    cur    =    p.getNext();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
8	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getCurrentNode();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.getCurrentNode();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  <  Node>  cur  =  p.getCurrentNode();	  Predicate    <    Node>    cur    =    p.getNext();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
9	[BUG]  [BUGGY]  for(Node  curr  =  p.getFirstChild();  cur!=  null;  curr  =  curr.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  curr  =  p.getFirstChild();  cur!=  null;  curr  =  curr.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  curr  =  p.getFirstChild();  cur!=  null;  curr  =  curr.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    curr    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
10	[BUG]  [BUGGY]  for(Node  cur  =  p.getLastChild();  cur!=  null;  curr  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getLastChild();  cur!=  null;  curr  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getLastChild();  cur!=  null;  curr  =  cur.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    curr    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
11	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  >=  null;  curr  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  >=  null;  curr  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getFirstChild();  cur  >=  null;  curr  =  cur.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    curr    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
12	[BUG]  [BUGGY]  for(Node  curr  =  p.getFirstChild();  cur  >=  null;  curr  =  curr.getNext())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  curr  =  p.getFirstChild();  cur  >=  null;  curr  =  curr.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  curr  =  p.getFirstChild();  cur  >=  null;  curr  =  curr.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    curr    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
13	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  ==  null;  curr  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  ==  null;  curr  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getFirstChild();  cur  ==  null;  curr  =  cur.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    curr    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
14	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  null;  curr  =  curr.getNext())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  null;  curr  =  curr.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getFirstChild();  cur!=  null;  curr  =  curr.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    curr    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
15	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  >=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  >=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getFirstChild();  cur  >=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur    ==    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
16	[BUG]  [BUGGY]  Node  cur  =  p.getCurrentNode();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.getCurrentNode();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Node  cur  =  p.getCurrentNode();	  Node    cur    =    p.getParent();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
17	[BUG]  [BUGGY]  Node  cur  =  p.getPrevious();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.getPrevious();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Node  cur  =  p.getPrevious();	  Node    cur    =    p.getParent();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
18	[BUG]  [BUGGY]  Node  cur  =  p.getName();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.getName();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Node  cur  =  p.getName();	  Node    cur    =    p.getParent();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
19	[BUG]  [BUGGY]  Predicate  cur  =  p.getLastChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  cur  =  p.getLastChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  cur  =  p.getLastChild();	  Predicate    cur    =    p.getParent();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
20	[BUG]  [BUGGY]  Predicate  cur  =  p.getPredicate();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  cur  =  p.getPredicate();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  cur  =  p.getPredicate();	  Predicate    cur    =    p.getParent();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
21	[BUG]  [BUGGY]  Predicate  cur  =  p.getName();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  cur  =  p.getName();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  cur  =  p.getName();	  Predicate    cur    =    p.getParent();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
22	[BUG]  [BUGGY]  Node  cur  =  p.getNext()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.getNext()  +  1;  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Node  cur  =  p.getNext()  +  1;	  Node    cur    =    p.getNext();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
23	[BUG]  [BUGGY]  For(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getParent())  {	  For(Node    cur    =    p.getFirstChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
24	[BUG]  [BUGGY]  For(Node  cur  =  predicate.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  predicate.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  predicate.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getFirstChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
25	[BUG]  [BUGGY]  For(Node  cur  =  p.getFirstChild();  cur  ==  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getFirstChild();  cur  ==  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.getFirstChild();  cur  ==  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getFirstChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
26	[BUG]  [BUGGY]  For(Node  cur  =  n.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  n.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  n.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getFirstChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
27	[BUG]  [BUGGY]  For(Node  cur  =  p.getName();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getName();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.getName();  cur!=  null;  cur  =  cur.getParent())  {	  For(Node    cur    =    p.getName();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
28	[BUG]  [BUGGY]  For(Node  cur  =  predicate.getName();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  predicate.getName();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  predicate.getName();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getName();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
29	[BUG]  [BUGGY]  For(Node  cur  =  p.getName()  +  1;  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getName()  +  1;  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.getName()  +  1;  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getName();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
30	[BUG]  [BUGGY]  For(Node  cur  =  p.getName();  cur  ==  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getName();  cur  ==  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.getName();  cur  ==  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getName();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
31	[BUG]  [BUGGY]  For(Node  cur  =  p.getParent();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getParent();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.getParent();  cur!=  null;  cur  =  cur.getParent())  {	  For(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
32	[BUG]  [BUGGY]  For(Node  cur  =  predicate.getLastChild();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  predicate.getLastChild();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  predicate.getLastChild();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getLastChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
33	[BUG]  [BUGGY]  For(Node  cur  =  p.getFirstChild();  cur  >=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getFirstChild();  cur  >=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.getFirstChild();  cur  >=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getLastChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
34	[BUG]  [BUGGY]  Node  cur  =  predicate.getLastChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  predicate.getLastChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Node  cur  =  predicate.getLastChild();	  Node    cur    =    p.getLastChild();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
35	[BUG]  [BUGGY]  Node  cur  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  n.getLastChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Node  cur  =  n.getLastChild();	  Node    cur    =    p.getLastChild();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
36	[BUG]  [BUGGY]  Node  cur  =  p.next();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.next();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Node  cur  =  p.next();	  Node    cur    =    p.getLastChild();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
37	[BUG]  [BUGGY]  Node  cur  =  p.getPreviousChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.getPreviousChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Node  cur  =  p.getPreviousChild();	  Node    cur    =    p.getLastChild();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
38	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getParent();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getParent();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  <  Node>  cur  =  predicate.getParent();	  Predicate    <    Node>    cur    =    p.getParent();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
39	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getName();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.getName();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  <  Node>  cur  =  p.getName();	  Predicate    <    Node>    cur    =    p.getParent();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
40	[BUG]  [BUGGY]  Predicate  cur  =  predicate.getFirstChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  cur  =  predicate.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  cur  =  predicate.getFirstChild();	  Predicate    cur    =    p.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
41	[BUG]  [BUGGY]  Predicate  cur  =  p.getPreviousChild();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  cur  =  p.getPreviousChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  cur  =  p.getPreviousChild();	  Predicate    cur    =    p.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
42	[BUG]  [BUGGY]  Predicate  cur  =  p.getCurrentNode();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  cur  =  p.getCurrentNode();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  cur  =  p.getCurrentNode();	  Predicate    cur    =    p.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
43	[BUG]  [BUGGY]  Node  cur  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  n.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Node  cur  =  n.getFirstChild();	  Node    cur    =    p.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
44	[BUG]  [BUGGY]  Predicate  cur  =  predicate.getNext();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  cur  =  predicate.getNext();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  cur  =  predicate.getNext();	  Predicate    cur    =    p.getNext();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
45	[BUG]  [BUGGY]  Predicate  cur  =  p.getNext()  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  cur  =  p.getNext()  +  1;  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  cur  =  p.getNext()  +  1;	  Predicate    cur    =    p.getNext();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
46	[BUG]  [BUGGY]  Predicate  cur  =  p.getPrevious();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  cur  =  p.getPrevious();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  cur  =  p.getPrevious();	  Predicate    cur    =    p.getNext();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
47	[BUG]  [BUGGY]  for(Node  cur  =  p.getfirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getfirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getfirstChild();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getLastChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
48	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  predicate.getFirstChild();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  predicate.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  <  Node>  cur  =  predicate.getFirstChild();	  Predicate    <    Node>    cur    =    p.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
49	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getPreviousChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.getPreviousChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  <  Node>  cur  =  p.getPreviousChild();	  Predicate    <    Node>    cur    =    p.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
50	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getQualifiedName();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.getQualifiedName();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  <  Node>  cur  =  p.getQualifiedName();	  Predicate    <    Node>    cur    =    p.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
51	[BUG]  [BUGGY]  for(Node  cur  =  n.getNext();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getNext();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  n.getNext();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    n.getNext();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
52	[BUG]  [BUGGY]  for(Node  cur  =  n.getFirstChild();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getFirstChild();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  n.getFirstChild();  cur!=  null;  cur  =  cur.getParent())  {	  for(Node    cur    =    n.getNext();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
53	[BUG]  [BUGGY]  for(Node  cur  =  p.first();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.first();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.first();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.next();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
54	[BUG]  [BUGGY]  for(Node  cur  =  p.next();  cur  ==  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.next();  cur  ==  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.next();  cur  ==  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.next();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
55	[BUG]  [BUGGY]  For(Node  cur  =  predicate.getNext();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  predicate.getNext();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  predicate.getNext();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    n.getNext();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
56	[BUG]  [BUGGY]  for(Node  cur  =  predicate.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  predicate.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  predicate.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    n.getFirstChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
57	[BUG]  [BUGGY]  for(Node  cur  =  p.getName();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getName();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getName();  cur!=  null;  cur  =  cur.getParent())  {	  for(Node    cur    =    p.getName();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
58	[BUG]  [BUGGY]  for(Node  cur  =  p.getName()  +  1;  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getName()  +  1;  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getName()  +  1;  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getName();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
59	[BUG]  [BUGGY]  for(Node  cur  =  p.getName();  cur  ==  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getName();  cur  ==  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getName();  cur  ==  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getName();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
60	[BUG]  [BUGGY]  For(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getParent())  {	  For(Node    cur    =    p.next();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
61	[BUG]  [BUGGY]  For(Node  cur  =  p.first();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.first();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.first();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.next();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
62	[BUG]  [BUGGY]  For(Node  cur  =  p.next();  cur  ==  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.next();  cur  ==  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.next();  cur  ==  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.next();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
63	[BUG]  [BUGGY]  For(Node  cur  =  n.getLastChild();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  n.getLastChild();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  n.getLastChild();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getLastChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
64	[BUG]  [BUGGY]  For(Node  cur  =  p.getfirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getfirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.getfirstChild();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getLastChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
65	[BUG]  [BUGGY]  For(Node  cur  =  expressionRoot.getName();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  expressionRoot.getName();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  expressionRoot.getName();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getName();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
66	[BUG]  [BUGGY]  Node  cur  =  p.getNameNode();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.getNameNode();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Node  cur  =  p.getNameNode();	  Node    cur    =    p.getParent();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
67	[BUG]  [BUGGY]  for(Node  cur  =  n.getLastChild();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getLastChild();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  n.getLastChild();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getLastChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
68	[BUG]  [BUGGY]  For(Node  cur  =  p.getParent();  cur  ==  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getParent();  cur  ==  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.getParent();  cur  ==  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getNext();    cur    ==    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
69	[BUG]  [BUGGY]  for(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getName())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getName())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.next();  cur!=  null;  cur  =  cur.getName())  {	  for(Node    cur    =    p.next();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
70	[BUG]  [BUGGY]  for(Node  cur  =  predicate.getName();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  predicate.getName();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  predicate.getName();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getName();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
71	[BUG]  [BUGGY]  For(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getPrevious())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getPrevious())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getPrevious())  {	  For(Node    cur    =    p.getFirstChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
72	[BUG]  [BUGGY]  Predicate  cur  =  p.getGrandparent();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  cur  =  p.getGrandparent();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  cur  =  p.getGrandparent();	  Predicate    cur    =    predicate.getParent();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
73	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  null;  curr  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  null;  curr  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getFirstChild();  cur!=  null;  curr  =  cur.getParent())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    curr    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
74	[BUG]  [BUGGY]  For(Node  cur  =  p.getFirstChild();  cur!=  null;  curr  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getFirstChild();  cur!=  null;  curr  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.getFirstChild();  cur!=  null;  curr  =  cur.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    curr    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
75	[BUG]  [BUGGY]  Predicate  cur  =  p.getCurrent();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  cur  =  p.getCurrent();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  cur  =  p.getCurrent();	  Predicate    cur    =    p.getNext();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
76	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  p.getPredicate();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  p.getPredicate();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  <  Node>  cur  =  p.getPredicate();	  Predicate    <    Node>    cur    =    p.getNext();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
77	[BUG]  [BUGGY]  Node  cur  =  predicate.getFirstChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  predicate.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Node  cur  =  predicate.getFirstChild();	  Node    cur    =    p.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
78	[BUG]  [BUGGY]  For(Node  cur  =  expressionRoot.getNext();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  expressionRoot.getNext();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  expressionRoot.getNext();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    n.getNext();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
79	[BUG]  [BUGGY]  For(Node  cur  =  p.getNext();  cur  >=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  p.getNext();  cur  >=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.getNext();  cur  >=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    n.getNext();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
80	[BUG]  [BUGGY]  For(Node  cur  =  expressionRoot.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  expressionRoot.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  expressionRoot.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getFirstChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
81	[BUG]  [BUGGY]  Node  cur  =  p.removeFirstChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Node  cur  =  p.removeFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Node  cur  =  p.removeFirstChild();	  Node    cur    =    p.getLastChild();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
82	[BUG]  [BUGGY]  For(Node  cur  =  n.next();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  n.next();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  n.next();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.next();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
83	[BUG]  [BUGGY]  For(Node  cur  =  n.getName();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  n.getName();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  n.getName();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getName();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
84	[BUG]  [BUGGY]  for(Node  cur  =  n.getFirstChild();  cur  ==  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getFirstChild();  cur  ==  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  n.getFirstChild();  cur  ==  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur    ==    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
85	[BUG]  [BUGGY]  For(Node  cur  =  n.getNext();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  n.getNext();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  n.getNext();  cur!=  null;  cur  =  cur.getParent())  {	  For(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
86	[BUG]  [BUGGY]  For(Node  cur  =  expressionRoot.getNext();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  expressionRoot.getNext();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  expressionRoot.getNext();  cur!=  null;  cur  =  cur.getParent())  {	  For(Node    cur    =    p.getNext();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
87	[BUG]  [BUGGY]  for(Node  cur  =  n.getName();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getName();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  n.getName();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getName();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
88	[BUG]  [BUGGY]  Predicate  cur  =  p.removeFirstChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  cur  =  p.removeFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  cur  =  p.removeFirstChild();	  Predicate    cur    =    p.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
89	[BUG]  [BUGGY]  for(Node  curr  =  p.getFirstChild();  cur  <  null;  curr  =  curr.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  curr  =  p.getFirstChild();  cur  <  null;  curr  =  curr.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  curr  =  p.getFirstChild();  cur  <  null;  curr  =  curr.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    curr    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
90	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  <  null;  curr  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur  <  null;  curr  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getFirstChild();  cur  <  null;  curr  =  cur.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    curr    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
91	[BUG]  [BUGGY]  for(Node  cur  =  n.getFirstChild();  cur!=  null;  curr  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getFirstChild();  cur!=  null;  curr  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  n.getFirstChild();  cur!=  null;  curr  =  cur.getNext())  {	  for(Node    cur    =    p.getFirstChild();    cur!=    null;    curr    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
92	[BUG]  [BUGGY]  Predicate  <  Node>  cur  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  Predicate  <  Node>  cur  =  n.getFirstChild();  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	Predicate  <  Node>  cur  =  n.getFirstChild();	  Predicate    <    Node>    cur    =    p.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
93	[BUG]  [BUGGY]  for(Node  cur  =  n.getParent();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getParent();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  n.getParent();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    n.getNext();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
94	[BUG]  [BUGGY]  for(Node  cur  =  n.getPrevious();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getPrevious();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  n.getPrevious();  cur!=  null;  cur  =  cur.getParent())  {	  for(Node    cur    =    p.getPrevious();    cur!=    null;    cur    =    cur.getParent())    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
95	[BUG]  [BUGGY]  for(Node  cur  =  n.next();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.next();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  n.next();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.next();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
96	[BUG]  [BUGGY]  For(Node  cur  =  n.getParent();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  For(Node  cur  =  n.getParent();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  n.getParent();  cur!=  null;  cur  =  cur.getNext())  {	  For(Node    cur    =    p.getParent();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
97	[BUG]  [BUGGY]  for(Node  cur  =  n.getPrevious();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  n.getPrevious();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  n.getPrevious();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    p.getPrevious();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
98	[BUG]  [BUGGY]  for(Node  cur  =  expressionRoot.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {      [BUGGY]  for(Node  cur  =  expressionRoot.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]      if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  expressionRoot.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {	  for(Node    cur    =    n.getFirstChild();    cur!=    null;    cur    =    cur.getNext())    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
