bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  cur  =  p.getParent();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  [BUGGY]  for(Node  cur  =  p.getParent();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getParent();  cur!=  null;  cur  =  cur.getNext())  {	for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  	non-compiled	[CE]  <identifier>  expected	11	None	replace
2	[BUG]  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  [BUGGY]  for(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getFirstChild();  cur!=  null;  cur  =  cur.getNext())  {	for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  	non-compiled	[CE]  <identifier>  expected	11	None	replace
3	[BUG]  [BUGGY]  for(Node  cur  =  p.getNext();  cur!=  null;  cur  =  cur.getParent())  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  [BUGGY]  for(Node  cur  =  p.getNext();  cur!=  null;  cur  =  cur.getParent())  {  [BUGGY]  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	for(Node  cur  =  p.getNext();  cur!=  null;  cur  =  cur.getParent())  {	for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  	non-compiled	[CE]  <identifier>  expected	11	None	replace
4	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  [BUGGY]    [BUGGY]  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	  	for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  For(Node  cur  =  p.getNext();  cur!=  null;  cur  =  cur.getNext())  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  private  static  boolean  checkRightOf(  Node  n,  Node  expressionRoot,  Predicate<Node>  predicate)  {  for  (Node  p  =  n;  p  !=  expressionRoot;  p  =  p.getParent())  {  [BUGGY]  For(Node  cur  =  p.getNext();  cur!=  null;  cur  =  cur.getNext())  {  [BUGGY]  if  (predicate.apply(cur))  {  return  true;  }  }  }  return  false;  }  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  checkRightOf  [RETURN_TYPE]  boolean  Node  n  Node  expressionRoot  Node>  predicate  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  c  cfgNode  cur  def  defParent  expressionRoot  externs  input  lhs  n  p  parant  parent  rhs  root  use  useCfgNode  useParent  Definition  def  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  name  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  predicate  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2773500981126145	504	504	3	replace	For(Node  cur  =  p.getNext();  cur!=  null;  cur  =  cur.getNext())  {	for  (Node  cur  =  p.getNext();  cur  !=  null;  cur  =  cur.getNext())  {  	non-compiled	[CE]  <identifier>  expected	11	None	replace
