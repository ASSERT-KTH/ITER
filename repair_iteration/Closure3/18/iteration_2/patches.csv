bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarName()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarName()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarName()  ||  Character.isDigit(t.getScope().getVarCount()))  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()    ||    Character.isDigit(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
2	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  &&  Character.isDigit(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  &&  Character.isDigit(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  &&  Character.isDigit(t.getScope().getVarCount()))  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()    ||    Character.isDigit(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
3	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()    ||    Character.isDigit(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
4	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()    ||    Character.isDigit(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
5	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()    ||    Character.isDigit(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
6	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()    ||    Character.isDigit(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
7	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (numUseWithinUseCfgNode  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (numUseWithinUseCfgNode  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (numUseWithinUseCfgNode  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
8	[BUG]  [BUGGY]  if((  t.getScope()!=  null)||(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)||(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)||(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
9	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())	  if((    t.getScope()!=    null)&&    (MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
10	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
12	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
13	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  2)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
14	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  T.getScopeRoot().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  T.getScopeRoot().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  T.getScopeRoot().getVarCount()  >  2)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
15	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  +  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  +  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  +  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
16	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  *  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  *  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  *  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
17	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
18	[BUG]  [BUGGY]  if((  t.getScope()!=  null)||(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)||(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)||(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
19	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalyze.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalyze.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(liveVariablesAnalyze.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
20	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScope().getType()  ==  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScope().getType()  ==  Token.FUNCTION))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScope().getType()  ==  Token.FUNCTION))  {	  if((    t.getScope()!=    null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
21	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  numUseWithinCfgNode);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  numUseWithinCfgNode);	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
22	[BUG]  [BUGGY]  cfg.process(t,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  cfg.process(t,  t.getScopeRoot().getFirstChild());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(t,  t.getScopeRoot().getFirstChild());	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
23	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild()  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild()  +  1);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild()  +  1);	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
24	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
25	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount()))  {	  if(T.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
26	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
27	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(T.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(T.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(T.getScope().getVarCount()))  {	  if(T.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
28	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  <=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  <=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  <=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
29	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  ==  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  ==  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  ==  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
30	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount())||  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount())||  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount())||  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount()))  {	  if(T.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
31	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount())||  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount())  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount())||  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount())  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount())||  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount())	  if(T.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
32	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  1)  {	  if(t.getScope().getVarCount()    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
33	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
34	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  2  ||  t.getScope().getVarCount()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  2  ||  t.getScope().getVarCount()  <  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  2  ||  t.getScope().getVarCount()  <  1)  {	  if(t.getScope().getVarCount()    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
35	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >=  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >=  1)  {	  if(t.getScope().getVarCount()    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
36	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  1)  {	  if(t.getScope().getVarCount()    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
37	[BUG]  [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
38	[BUG]  [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
39	[BUG]  [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
40	[BUG]  [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
41	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
42	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  ==  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  ==  1)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
43	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
44	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  ==  2)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
45	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()!=  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()!=  1)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.NAME);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.NAME);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.VAR);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.VAR);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.CALL);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.CALL);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
52	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {	  if(t.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
53	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScopeRoot().getVarCount()  >  1)  {	  if(t.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
54	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {	  if(t.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
55	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {	  if(t.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
56	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {	  if(t.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
57	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  1  ||  t.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  1  ||  t.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  1  ||  t.getScopeRoot().getVarCount()  >  1)  {	  if(t.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
58	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  +  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  +  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  +  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
59	[BUG]  [BUGGY]  if((  t.getScope()!=  null)||(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)||(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)||(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
60	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >  0))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >  0))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >  0))  {	  if((    t.getScope()!=    null)&&    (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
61	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScope().getType()  ==  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScope().getType()  ==  Token.FUNCTION))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScope().getType()  ==  Token.FUNCTION))  {	  if((    t.getScope()!=    null)&&    (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
62	[BUG]  [BUGGY]  if(t.getScope()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope()!=  null)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope()!=  null)  {	  if(liveVariables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
63	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ||  liveVariables!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(numUseWithinUseCfgNode  ||  liveVariables!=  null)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(numUseWithinUseCfgNode  ||  liveVariables!=  null)  {	  if(liveVariables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
64	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(numUseWithinUseCfgNode)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(numUseWithinUseCfgNode)  {	  if(liveVariables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
65	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ||  liveVariables  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(numUseWithinUseCfgNode  ||  liveVariables  ==  null)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(numUseWithinUseCfgNode  ||  liveVariables  ==  null)  {	  if(liveVariables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
66	[BUG]  [BUGGY]  if(visibility  ==  Token.VAR  &&  liveVariables!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(visibility  ==  Token.VAR  &&  liveVariables!=  null)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(visibility  ==  Token.VAR  &&  liveVariables!=  null)  {	  if(liveVariables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
67	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  >  0)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(numUseWithinUseCfgNode  >  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(numUseWithinUseCfgNode  >  0)  {	  if(liveVariables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
68	[BUG]  [BUGGY]  if(t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.inGlobalScope())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.inGlobalScope())  {	  if(liveVariables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
69	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScopeRoot().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
70	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  >>  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  >>  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  >>  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScopeRoot().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
71	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScopeRoot().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
72	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  1)  {	  if(t.getScopeRoot().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
73	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MIN_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MIN_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MIN_VARIABLES_TO_ANALYZE)  {	  if(t.getScopeRoot().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
74	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
75	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {	  if(t.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
76	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
77	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
78	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {	  if(t.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
79	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  2)  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  2)  {	  if(t.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
80	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {	  if(t.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
81	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
82	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
83	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
84	[BUG]  [BUGGY]  if(T.getScope().getVarCount()!=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()!=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()!=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
85	[BUG]  [BUGGY]  if(Vars.MAX_VALUE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VALUE  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VALUE  ==  t.getScope().getVarCount())  {	  if(Vars.MAX_VALUE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
86	[BUG]  [BUGGY]  if(Vars.MAX_VALUE  <  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VALUE  <  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VALUE  <  t.getScopeRoot().getVarCount())  {	  if(Vars.MAX_VALUE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
87	[BUG]  [BUGGY]  if(Vars.MAX_VALUE  <  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VALUE  <  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VALUE  <  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {	  if(Vars.MAX_VALUE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
88	[BUG]  [BUGGY]  if(Vars.MAX_VALUE!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VALUE!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VALUE!=  t.getScope().getVarCount())  {	  if(Vars.MAX_VALUE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
89	[BUG]  [BUGGY]  if(Vars.MAX_VALUE  >=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VALUE  >=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VALUE  >=  t.getScope().getVarCount())  {	  if(Vars.MAX_VALUE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
90	[BUG]  [BUGGY]  if(Vars.MAX_VALUE  <  t.getScope().getVarCount()  ||  Character.isUpperCase(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VALUE  <  t.getScope().getVarCount()  ||  Character.isUpperCase(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VALUE  <  t.getScope().getVarCount()  ||  Character.isUpperCase(t.getScope().getVarCount()))  {	  if(Vars.MAX_VALUE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
91	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
92	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
93	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
94	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
95	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
96	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  ==  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  ==  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
97	[BUG]  [BUGGY]  if(Variables.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Variables.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Variables.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {	  if(Variables.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
98	[BUG]  [BUGGY]  if(Variables.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Variables.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Variables.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {	  if(Variables.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
99	[BUG]  [BUGGY]  if(Variables.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Variables.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Variables.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {	  if(Variables.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
100	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  Variables.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  Variables.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  Variables.MAX_VARIABLES_TO_ANALYZE)  {	  if(Variables.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
101	[BUG]  [BUGGY]  if(Variables.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Variables.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Variables.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {	  if(Variables.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
102	[BUG]  [BUGGY]  if(Variables.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Variables.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Variables.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {	  if(Variables.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
103	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {	  if(numUseWithinUseCfgNode    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
104	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ==  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(numUseWithinUseCfgNode  ==  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(numUseWithinUseCfgNode  ==  t.getScopeRoot().getVarCount())  {	  if(numUseWithinUseCfgNode    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
105	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {	  if(numUseWithinUseCfgNode    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
106	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScopeRoot().getVarCount())  {	  if(numUseWithinUseCfgNode    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
107	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >=  t.getScope().getVarCount())  {	  if(numUseWithinUseCfgNode    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
108	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {	  if(numUseWithinUseCfgNode    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
109	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScope().getVarCount()  >  1)  {	  if(T.getScope().getVarCount()    <=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
110	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
111	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  2)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  2)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
112	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  1)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
113	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    >    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
114	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    >    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
115	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    >    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  def);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  t,  def);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  c,  this);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  def);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  def);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  t,  this,  def);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  null);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  null);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  t,  this,  null);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNodes);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNodes);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNodes);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
123	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
124	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  T.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  T.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  T.getScopeRoot().getVarCount()  >  1)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
125	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
126	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
127	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
128	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
129	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  2  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  2  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  2  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
130	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  1  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  1  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  1  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
131	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  +  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  +  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  +  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
132	[BUG]  [BUGGY]  if((  t.getScope()!=  null)||(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)||(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)||(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
133	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >  0))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >  0))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >  0))  {	  if((    t.getScope()!=    null)&&    (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
134	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScope().getVar  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScope().getVar  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScope().getVar	  if((    t.getScope()!=    null)&&    (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isFunction());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isFunction());	  Preconditions.checkState(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isConstructor());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isGlobal());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isGlobal());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().isGlobal());	  Preconditions.checkState(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isVarCount());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isVarCount());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().isVarCount());	  Preconditions.checkState(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isConstructor());  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isConstructor());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.getScopeRoot().isConstructor());	  Preconditions.checkState(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern());  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isExtern());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().isExtern());	  Preconditions.checkState(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
141	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getCfgNode();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getCfgNode();  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getCfgNode();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
142	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getCfg();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getCfg();  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getCfg();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
143	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.inGlobalScope();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.inGlobalScope();  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.inGlobalScope();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
144	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConstructor();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConstructor();  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getConstructor();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
145	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getParent();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getParent();  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getParent();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
146	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getVarCount();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getVarCount();  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getVarCount();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
147	[BUG]  [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {	  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
148	[BUG]  [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {	  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
149	[BUG]  [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {	  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
150	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {	  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
151	[BUG]  [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isUpperCase(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isUpperCase(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isUpperCase(t.getScope().getVarCount()))  {	  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
152	[BUG]  [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount())  {	  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
153	[BUG]  [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
154	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  Vector.MAX_VARIABLES_TO_ANALYZE)  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
155	[BUG]  [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  ||!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  ||!t.inGlobalScope());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(!t.inGlobalScope()  ||!t.inGlobalScope());	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScopeRoot()));	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(!t.inGlobalScope();  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(!t.inGlobalScope();	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!t.inGlobalScope());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(!t.inGlobalScope()  &&!t.inGlobalScope());	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getParentNode()));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getParentNode()));  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getParentNode()));	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.VAR);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.VAR);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.VAR);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.VAR);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.NAME);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.NAME);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()!=  Token.VAR);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()!=  Token.VAR);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.BLOCK);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.BLOCK);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
167	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyName(varName,  t.getScopeRoot().getLastChild());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyName(varName,  t.getScopeRoot().getLastChild());	  NodeUtil.copyName(varName,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
168	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  cfg);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  cfg);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  cfg);	  NodeUtil.copyName(varName,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
169	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  c);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  c);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  c);	  NodeUtil.copyName(varName,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
170	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  numUseWithinCfgNode);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  numUseWithinCfgNode);	  NodeUtil.copyName(varName,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
171	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  cfgNode);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  cfgNode);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  cfgNode);	  NodeUtil.copyName(varName,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
172	[BUG]  [BUGGY]  NodeUtil.copyName(name,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyName(name,  t.getScopeRoot().getFirstChild());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyName(name,  t.getScopeRoot().getFirstChild());	  NodeUtil.copyName(varName,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
173	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    ==    liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
174	[BUG]  [BUGGY]  if(liveVariablesAnalysis.getVarCount()  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariablesAnalysis.getVarCount()  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariablesAnalysis.getVarCount()  ==  t.getScope().getVarCount())  {	  if(t.getScope().getVarCount()    ==    liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
175	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    ==    liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
176	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  numUseWithinCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  numUseWithinCfgNode)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  numUseWithinCfgNode)  {	  if(t.getScope().getVarCount()    ==    liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
177	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()!=  numUseWithinCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()!=  numUseWithinCfgNode)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()!=  numUseWithinCfgNode)  {	  if(t.getScope().getVarCount()    ==    liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
178	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  numUseWithinUseCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  numUseWithinUseCfgNode)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  numUseWithinUseCfgNode)  {	  if(t.getScope().getVarCount()    ==    liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
179	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    &&    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
180	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    &&    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
181	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    &&    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
182	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    &&    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
183	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
184	[BUG]  [BUGGY]  if((  t.getScope()!=  null)||(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)||(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)||(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
185	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  +  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  +  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  +  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
186	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >  0))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >  0))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >  0))  {	  if((    t.getScope()!=    null)&&    (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
187	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScope().getVarType()  ==  Token.FUNCTION))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScope().getVarType()  ==  Token.FUNCTION))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScope().getVarType()  ==  Token.FUNCTION))  {	  if((    t.getScope()!=    null)&&    (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
188	[BUG]  [BUGGY]  if(liveVariables.size()  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables.size()  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables.size()  ==  t.getScope().getVarCount())  {	  if(t.getScope().getVarCount()    ==    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
189	[BUG]  [BUGGY]  if(liveVariables!=  null  ||  t.getScope().getVarCount()  ==  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  ||  t.getScope().getVarCount()  ==  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  ||  t.getScope().getVarCount()  ==  liveVariables.size())  {	  if(t.getScope().getVarCount()    ==    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
190	[BUG]  [BUGGY]  if(liveVariables.size()!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables.size()!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables.size()!=  t.getScope().getVarCount())  {	  if(t.getScope().getVarCount()    ==    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
191	[BUG]  [BUGGY]  if(liveVariables.size()  >=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables.size()  >=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables.size()  >=  t.getScope().getVarCount())  {	  if(t.getScope().getVarCount()    ==    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
192	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  ==  liveVariables.size())  {	  if(t.getScope().getVarCount()    ==    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
193	[BUG]  [BUGGY]  cfg.process(t,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  cfg.process(t,  t.getScopeRoot());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(t,  t.getScopeRoot());	  cfg.process(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
194	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  <  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  <  1)  {	  if(T.getScope().getVarCount()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
195	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  ==  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  ==  2)  {	  if(T.getScope().getVarCount()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
196	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  >  2)  {	  if(T.getScope().getVarCount()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
197	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  >=  2)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  >=  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  >=  2)  {	  if(T.getScope().getVarCount()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
198	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <=  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <=  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <=  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
199	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
200	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >=  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >=  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >=  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
201	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
202	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
203	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
204	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  2)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
205	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  2)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
206	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >=  2)  {  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >=  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >=  2)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
207	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  Variables.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  Variables.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  Variables.MAX_VARIABLES_TO_ANALYZE)  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
208	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >=  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >=  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  >=  t.getScopeRoot().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
209	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
210	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
211	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  >  t.getScopeRoot().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
212	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  Vector.MAX_VARIABLES_TO_ANALYZE)  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
213	[BUG]  [BUGGY]  if(liveVariables!=  null  ||  t.getScope().getVarCount()  >=  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  ||  t.getScope().getVarCount()  >=  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  ||  t.getScope().getVarCount()  >=  liveVariables.size())  {	  if(t.getScope().getVarCount()    >=    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
214	[BUG]  [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()  -  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()  -  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()  -  1)  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    >    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
215	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  2)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  2)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
216	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  1)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
217	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
218	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(varName,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyNameAnnotations(varName,  t.getScopeRoot());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyNameAnnotations(varName,  t.getScopeRoot());	  NodeUtil.copyNameAnnotations(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
219	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyNameAnnotations(name,  t.getScopeRoot());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyNameAnnotations(name,  t.getScopeRoot());	  NodeUtil.copyNameAnnotations(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
220	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(cfg,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyNameAnnotations(cfg,  t.getScopeRoot());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyNameAnnotations(cfg,  t.getScopeRoot());	  NodeUtil.copyNameAnnotations(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
221	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(null,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyNameAnnotations(null,  t.getScopeRoot().getFirstChild());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyNameAnnotations(null,  t.getScopeRoot().getFirstChild());	  NodeUtil.copyNameAnnotations(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
222	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(compiler,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyNameAnnotations(compiler,  t.getScopeRoot());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyNameAnnotations(compiler,  t.getScopeRoot());	  NodeUtil.copyNameAnnotations(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
223	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(nameNode,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyNameAnnotations(nameNode,  t.getScopeRoot());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyNameAnnotations(nameNode,  t.getScopeRoot());	  NodeUtil.copyNameAnnotations(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
224	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&	  if((    t.getScope()!=    null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())||(t.getScopeRoot()!=    null)&&    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
225	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(TaskVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(TaskVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(TaskVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&	  if((    t.getScope()!=    null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())||(t.getScopeRoot()!=    null)&&    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
226	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&	  if((    t.getScope()!=    null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())||(t.getScopeRoot()!=    null)&&    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
227	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&	  if((    t.getScope()!=    null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())||(t.getScopeRoot()!=    null)&&    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
228	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(2  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(2  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(2  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&	  if((    t.getScope()!=    null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())||(t.getScopeRoot()!=    null)&&    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
229	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()  -  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()  -  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()  -  1)  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    >    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
230	[BUG]  [BUGGY]  if(liveVariables.size()  <  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables.size()  <  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables.size()  <  t.getScopeRoot().getVarCount())  {	  if(t.getScopeRoot().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
231	[BUG]  [BUGGY]  if(liveVariables!=  null  &&  t.getScopeRoot().getVarCount()  <  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  &&  t.getScopeRoot().getVarCount()  <  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  &&  t.getScopeRoot().getVarCount()  <  liveVariables.size())  {	  if(t.getScopeRoot().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
232	[BUG]  [BUGGY]  if(liveVariables!=  null  ||  t.getScopeRoot().getVarCount()  <  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  ||  t.getScopeRoot().getVarCount()  <  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  ||  t.getScopeRoot().getVarCount()  <  liveVariables.size())  {	  if(t.getScopeRoot().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
233	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  >=  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  >=  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  >=  liveVariables.size())  {	  if(t.getScopeRoot().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
234	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  liveVariables.size()  -  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  liveVariables.size()  -  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  liveVariables.size()  -  1)  {	  if(t.getScopeRoot().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
235	[BUG]  [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  numUseWithinCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  numUseWithinCfgNode)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  numUseWithinCfgNode)  {	  if(liveVariables!=    null    &&    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
236	[BUG]  [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  numUseWithinUseCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  numUseWithinUseCfgNode)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  numUseWithinUseCfgNode)  {	  if(liveVariables!=    null    &&    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
237	[BUG]  [BUGGY]  if(liveVariables!=  null  ||  liveVariables.size()  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  ||  liveVariables.size()  <  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  ||  liveVariables.size()  <  t.getScope().getVarCount())  {	  if(liveVariables!=    null    &&    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
238	[BUG]  [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  >=  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  >=  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  &&  t.getScope().getVarCount()  >=  liveVariables.size())  {	  if(liveVariables!=    null    &&    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
239	[BUG]  [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  ==  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  ==  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  &&  t.getScope().getVarCount()  ==  liveVariables.size())  {	  if(liveVariables!=    null    &&    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
240	[BUG]  [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  2)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  2)  {	  if(liveVariables!=    null    &&    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
241	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  <  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  liveVariables.size()  <  t.getScope().getVarCount())  {	  if(liveVariables    ==    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
242	[BUG]  [BUGGY]  if(liveVariables  ==  null  &&  t.getScope().getVarCount()  <  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  &&  t.getScope().getVarCount()  <  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  &&  t.getScope().getVarCount()  <  liveVariables.size())  {	  if(liveVariables    ==    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
243	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  <  numUseWithinCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  <  numUseWithinCfgNode)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  liveVariables.size()  <  numUseWithinCfgNode)  {	  if(liveVariables    ==    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
244	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  >  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  liveVariables.size()  >  0)  {	  if(liveVariables    ==    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
245	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  <  numUseWithinUseCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  <  numUseWithinUseCfgNode)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  liveVariables.size()  <  numUseWithinUseCfgNode)  {	  if(liveVariables    ==    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
246	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
247	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
248	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScopeRoot().getVarCount()    <=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
249	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  2)  {	  if(t.getScope().getVarCount()    >    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
250	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {	  if(t.getScope().getVarCount()    <=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
251	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  <  1)  {	  if(T.getScope().getVarCount()    >    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
252	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScopeRoot().getVarCount()    >=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
253	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  [Delete]  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  [Delete]  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  [Delete]  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScopeRoot().getVarCount()    >=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
254	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >  0)  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
255	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
256	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
257	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
258	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
259	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isUpperCase(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isUpperCase(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isUpperCase(t.getScope().getVarCount()))  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
260	[BUG]  [BUGGY]  cfg.process(t,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  cfg.process(t,  t.getScopeRoot().getLastChild());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(t,  t.getScopeRoot().getLastChild());	  cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
261	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild(),  numUseWithinCfgNode);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild(),  numUseWithinCfgNode);	  cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
262	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getNext());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  cfg.process(null,  t.getScopeRoot().getNext());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(null,  t.getScopeRoot().getNext());	  cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
263	[BUG]  [BUGGY]  if(liveVariables!=  null  ||  t.getScope().getVarCount()!=  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  ||  t.getScope().getVarCount()!=  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  ||  t.getScope().getVarCount()!=  liveVariables.size())  {	  if(t.getScope().getVarCount()!=    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
264	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <=  Variables.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <=  Variables.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <=  Variables.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    Variables.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
265	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >=  Variables.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >=  Variables.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >=  Variables.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    Variables.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
266	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  Variables.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  Variables.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  Variables.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    Variables.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
267	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  Variables.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  Variables.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  Variables.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    Variables.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
268	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  Variables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  Variables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  Variables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    Variables.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
269	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {	  if(T.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
270	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  Character.isDigit(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  Character.isDigit(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  Character.isDigit(t.getScope().getVarCount()))  {	  if(T.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
271	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  2)  {	  if(T.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  c);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  c);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  def);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  def);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  t.getSourceFile());	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
276	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceReference());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceReference());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  t.getSourceReference());	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
277	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
278	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VariablesAnalyzer.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
279	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VarsAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
280	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScopeRoot().getVarCount()    <=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
281	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {	  if(T.getScopeRoot().getVarCount()    <=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
282	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScopeRoot().getVarCount())  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
283	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE!=  t.getScopeRoot().getVarCount())  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
284	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
285	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >>  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >>  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >>  t.getScope().getVarCount())  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
286	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
287	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
288	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
289	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
290	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    liveVariables.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
291	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >=  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >=  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >=  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    liveVariables.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
292	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    liveVariables.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
293	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {	  if(t.getScope().getVarCount()    <    liveVariables.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
294	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {	  if(t.getScope().getVarCount()    <    liveVariables.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
295	[BUG]  [BUGGY]  if(liveVariables!=  null  ||  liveVariables.size()  <  numUseWithinCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  ||  liveVariables.size()  <  numUseWithinCfgNode)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  ||  liveVariables.size()  <  numUseWithinCfgNode)  {	  if(liveVariables!=    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
296	[BUG]  [BUGGY]  if(liveVariables!=  null  ||  liveVariables.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  ||  liveVariables.size()  >  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  ||  liveVariables.size()  >  0)  {	  if(liveVariables!=    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
297	[BUG]  [BUGGY]  if(liveVariables!=  null  ||  liveVariables.size()  <  numUseWithinUseCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  ||  liveVariables.size()  <  numUseWithinUseCfgNode)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  ||  liveVariables.size()  <  numUseWithinUseCfgNode)  {	  if(liveVariables!=    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
298	[BUG]  [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >>  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >>  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >>  t.getScope().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    >=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
299	[BUG]  [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  [Delete]  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  [Delete]  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  [Delete]  t.getScope().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    >=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
300	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  >=  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    >=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
301	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()!=  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()!=  1)  {	  if(t.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
302	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()!=  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()!=  1)  {	  if(t.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
303	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()!=  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()!=  2)  {	  if(t.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.VAR);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.VAR);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.NAME);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.NAME);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
310	[BUG]  [BUGGY]  if(liveVariables.size()  <  t.getScope().getVarCount()  ||  liveVariables.contains(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables.size()  <  t.getScope().getVarCount()  ||  liveVariables.contains(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables.size()  <  t.getScope().getVarCount()  ||  liveVariables.contains(t.getScope().getVarCount()))  {	  if(liveVariables.size()    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
311	[BUG]  [BUGGY]  if(t.getScope().size()  <  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().size()  <  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().size()  <  liveVariables.size())  {	  if(liveVariables.size()    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
312	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  BaseVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  BaseVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  BaseVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
313	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    >    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
314	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  1)  {	  if(t.getScope().getVarCount()    >    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
315	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()  -  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()  -  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()  -  1)  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    >    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
316	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  2  ||  t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  2  ||  t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  2  ||  t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
317	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >>  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >>  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  >>  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
318	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  [Delete]  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  [Delete]  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  [Delete]  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||  t.inGlobalScope());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.inGlobalScope()  ||  t.inGlobalScope());	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope().isFunction());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.inGlobalScope().isFunction());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.inGlobalScope().isFunction());	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.inGlobalScope();  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.inGlobalScope();	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
322	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||!t.inGlobalScope());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.inGlobalScope()  ||!t.inGlobalScope());	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope()  }  );  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.inGlobalScope()  }  );  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.inGlobalScope()  }  );	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
324	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >>  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >>  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >>  t.getScope().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    >=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
325	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
326	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
327	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
328	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScopeRoot().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
329	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount()  ||  Character.isDigit(t.getScopeRoot().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount()  ||  Character.isDigit(t.getScopeRoot().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount()  ||  Character.isDigit(t.getScopeRoot().getVarCount()))  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
330	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScopeRoot().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScopeRoot().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
331	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <=  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <=  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <=  Vector.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    Vector.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
332	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  Vector.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    Vector.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
333	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  Vector.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    Vector.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
334	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >=  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >=  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >=  Vector.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    Vector.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
335	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  Vector.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  Vector.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  Vector.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    Vector.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
336	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  1  ||  t.getScope().getVarCount()  <  2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  1  ||  t.getScope().getVarCount()  <  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  1  ||  t.getScope().getVarCount()  <  2)  {	  if(t.getScope().getVarCount()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
337	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  2)  {	  if(t.getScope().getVarCount()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
338	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  2  ||  t.getScope().getVarCount()  <  2)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  2  ||  t.getScope().getVarCount()  <  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  2  ||  t.getScope().getVarCount()  <  2)  {	  if(t.getScope().getVarCount()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
339	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  2  ||  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  2  ||  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  2  ||  t.getScope().getVarCount()  ==  2)  {	  if(t.getScope().getVarCount()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
340	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >=  2)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >=  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >=  2)  {	  if(t.getScope().getVarCount()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
341	[BUG]  [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getParent())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getParent())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getParent())  {	  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
342	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <=  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <=  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <=  Vector.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    Vector.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
343	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MIN_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MIN_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MIN_VARIABLES_TO_ANALYZE)  {	  if(t.getScopeRoot().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
344	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  2)  {	  if(t.getScopeRoot().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
345	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  1)  {	  if(t.getScopeRoot().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
346	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getParent())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getParent())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getParent())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
347	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.inGlobalScope());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.inGlobalScope());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
350	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()  ==  null)&&  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()  ==  null)&&  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()  ==  null)&&	  if((    t.getScope()!=    null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())||(t.getScopeRoot()!=    null)&&    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
351	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  t.getScope().getVarCount()  ==  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  t.getScope().getVarCount()  ==  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  t.getScope().getVarCount()  ==  liveVariables.size())  {	  if(t.getScope().getVarCount()    ==    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
352	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
353	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
354	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isISOControl(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isISOControl(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isISOControl(t.getScope().getVarCount()))  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()    ||    Character.isDigit(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
355	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(t.getScopeRoot()));	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
356	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t));  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t));	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
357	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  t.getScope().getVarCount()!=  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  t.getScope().getVarCount()!=  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  t.getScope().getVarCount()!=  liveVariables.size())  {	  if(t.getScope().getVarCount()!=    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
358	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()!=  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()!=  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()!=  liveVariables.size())  {	  if(t.getScope().getVarCount()!=    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
359	[BUG]  [BUGGY]  if(VariablesAnalysis.MIN_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MIN_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MIN_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    >    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
360	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <=  t.getScope().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    >    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
361	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
362	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.VARIES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.VARIES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VariablesAnalyzer.VARIES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
363	[BUG]  [BUGGY]  if(liveVariables!=  null  ||  liveVariables.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  ||  liveVariables.size()  ==  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  ||  liveVariables.size()  ==  0)  {	  if(liveVariables!=    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
364	[BUG]  [BUGGY]  if(liveVariables!=  null  ||  liveVariables.size()  >=  numUseWithinUseCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  ||  liveVariables.size()  >=  numUseWithinUseCfgNode)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  ||  liveVariables.size()  >=  numUseWithinUseCfgNode)  {	  if(liveVariables!=    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
365	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild()  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild()  +  1);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild()  +  1);	  cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
366	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
367	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  3)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  3)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  3)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
368	[BUG]  [BUGGY]  if(Vars.MAX_VALUES_TO_ANALYZE  <=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VALUES_TO_ANALYZE  <=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VALUES_TO_ANALYZE  <=  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
369	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getLastChild())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getLastChild())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getLastChild())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
370	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariables.length  ||  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariables.length  ||  t.getScope().getVarCount()  >  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  liveVariables.length  ||  t.getScope().getVarCount()  >  0)  {	  if(t.getScope().getVarCount()    <=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
371	[BUG]  [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  >  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  >  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  &&  t.getScope().getVarCount()  >  liveVariables.size())  {	  if(liveVariables!=    null    &&    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
372	[BUG]  [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  liveVariables.length)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  liveVariables.length)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  liveVariables.length)  {	  if(liveVariables!=    null    &&    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
373	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.DEFAULT_VARIABLES)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.DEFAULT_VARIABLES)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.DEFAULT_VARIABLES)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
374	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScopeRoot().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScopeRoot().getVarCount()  ==  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScopeRoot().getVarCount()  ==  1)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
375	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScopeRoot().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScopeRoot().getVarCount()  ==  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScopeRoot().getVarCount()  ==  1)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
376	[BUG]  [BUGGY]  if(Vars.MIN_VALUE  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MIN_VALUE  <  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MIN_VALUE  <  t.getScope().getVarCount())  {	  if(Vars.MAX_VALUE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
377	[BUG]  [BUGGY]  if(Vars.MAX_VALUE  >  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VALUE  >  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VALUE  >  t.getScope().getVarCount())  {	  if(Vars.MAX_VALUE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
378	[BUG]  [BUGGY]  if(Vars.MAX_VALUE  <  t.getScope().getMask())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VALUE  <  t.getScope().getMask())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VALUE  <  t.getScope().getMask())  {	  if(Vars.MAX_VALUE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
379	[BUG]  [BUGGY]  if(t.getScope()!=  null  &&  Variables.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope()!=  null  &&  Variables.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope()!=  null  &&  Variables.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
380	[BUG]  [BUGGY]  if(Vars.MAX_VALUES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VALUES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VALUES_TO_ANALYZE!=  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
381	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
382	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
383	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
384	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
385	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.inGlobalScope(),  numUseWithinCfgNode);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.inGlobalScope(),  numUseWithinCfgNode);	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
386	[BUG]  [BUGGY]  Preconditions.checkNotNull(t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkNotNull(t.inGlobalScope());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkNotNull(t.inGlobalScope());	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
387	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(liveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
388	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MIN_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MIN_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MIN_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
389	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&	  if((    t.getScope()!=    null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
390	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
391	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME,  t.getScopeRoot().getFirstChild());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME,  t.getScopeRoot().getFirstChild());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME,  cfg);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME,  cfg);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME,  cfg);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
393	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  >=  numUseWithinUseCfgNode)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  >=  numUseWithinUseCfgNode)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  liveVariables.size()  >=  numUseWithinUseCfgNode)  {	  if(liveVariables    ==    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
394	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.contains(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.contains(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  liveVariables.contains(t.getScope().getVarCount()))  {	  if(liveVariables    ==    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
395	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  >=  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  liveVariables.size()  >=  0)  {	  if(liveVariables    ==    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
396	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()!=  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  liveVariables.size()!=  0)  {	  if(liveVariables    ==    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
397	[BUG]  [BUGGY]  if(Variables.MAX_VALUE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Variables.MAX_VALUE  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Variables.MAX_VALUE  ==  t.getScope().getVarCount())  {	  if(Variables.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
398	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlineNewDependencies);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  t,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
399	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  t);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  t);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  cfg,  t);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
400	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  t);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  n,  t);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
401	[BUG]  [BUGGY]  if(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(t.getScope().getVarCount()    ==    liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
402	[BUG]  [BUGGY]  if(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {	  if(t.getScope().getVarCount()    ==    liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
403	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  4)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  4)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  4)  {	  if(t.getScope().getVarCount()    ==    liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
404	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.inGlobalScope())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.inGlobalScope())  {	  if(t.getScope().getVarCount()    ==    liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
405	[BUG]  [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <=  t.getScope().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    >    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
406	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ==  t.getScope().getChildCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(numUseWithinUseCfgNode  ==  t.getScope().getChildCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(numUseWithinUseCfgNode  ==  t.getScope().getChildCount())  {	  if(numUseWithinUseCfgNode    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
407	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <=  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <=  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <=  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
408	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
409	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(null,  t.getScopeRoot(),  cfg);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyNameAnnotations(null,  t.getScopeRoot(),  cfg);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyNameAnnotations(null,  t.getScopeRoot(),  cfg);	  NodeUtil.copyNameAnnotations(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
410	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(root,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyNameAnnotations(root,  t.getScopeRoot());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyNameAnnotations(root,  t.getScopeRoot());	  NodeUtil.copyNameAnnotations(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
411	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(t,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyNameAnnotations(t,  t.getScopeRoot());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyNameAnnotations(t,  t.getScopeRoot());	  NodeUtil.copyNameAnnotations(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
412	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
413	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
414	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
415	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getLastChild())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getLastChild())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getLastChild())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
416	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
417	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  ==  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  ==  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  ==  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
418	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  <  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <  1)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
419	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
420	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  2)  {	  if(t.getScope().getVarCount()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
421	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  2)  {	  if(t.getScope().getVarCount()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
422	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScope().getVarCount()  >  1)  {	  if(T.getScope().getVarCount()    <=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
423	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    liveVariables.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
424	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    liveVariables.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
425	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    liveVariables.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
426	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(LiveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(LiveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(LiveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
427	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  <  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <  2)  {	  if(T.getScope().getVarCount()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
428	[BUG]  [BUGGY]  if(T.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()!=  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()!=  2)  {	  if(T.getScope().getVarCount()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
429	[BUG]  [BUGGY]  if(VariablesAnalyzer.valueOf(t.getScope().getVarCount())  ==  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.valueOf(t.getScope().getVarCount())  ==  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.valueOf(t.getScope().getVarCount())  ==  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
430	[BUG]  [BUGGY]  if(VariablesAnalyzer.VARIES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.VARIES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.VARIES_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
431	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VALUE_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.MAX_VALUE_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VALUE_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
432	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getParent())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getParent())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getParent())  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
433	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  Variables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  Variables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  Variables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    Variables.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
434	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  t.getScope().getVarCount()  >=  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  t.getScope().getVarCount()  >=  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  t.getScope().getVarCount()  >=  liveVariables.size())  {	  if(t.getScope().getVarCount()    >=    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
435	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
436	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  >=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  >=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  >=  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
437	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  T.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  T.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  T.getScope().getVarCount())  {	  if(T.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
438	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  T.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  T.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  T.getScope().getVarCount())  {	  if(T.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
439	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  T.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  T.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  T.getScope().getVarCount())  {	  if(T.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
440	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  ==  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  ==  1)  {	  if(T.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
441	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  ==  LiveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  ==  LiveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  ==  LiveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE)  {	  if(T.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
442	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScope().getVarCount()  ==  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScope().getVarCount()  ==  1)  {	  if(T.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
443	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(numUseWithinUseCfgNode  >  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(numUseWithinUseCfgNode  >  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(numUseWithinUseCfgNode  >  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
444	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(numUseWithinUseCfgNode  >  0)&&(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(numUseWithinUseCfgNode  >  0)&&(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(numUseWithinUseCfgNode  >  0)&&(MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
445	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
446	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
447	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getParent())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getParent())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getParent())  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()!=  Token.FUNCTION);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()!=  Token.FUNCTION);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
449	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.GETPROP);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
450	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isInitializingDependency());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isInitializingDependency());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().isInitializingDependency());	  Preconditions.checkState(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
451	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.inGlobalScope());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction()  ||  t.inGlobalScope());	  Preconditions.checkState(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isInline());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isInline());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().isInline());	  Preconditions.checkState(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
453	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {	  if(t.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
454	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {	  if(t.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
455	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {	  if(t.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
456	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScope().getVarCount()  >  1)  {	  if(T.getScope().getVarCount()    >    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
457	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  T.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  T.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  T.getScope().getVarCount())  {	  if(T.getScope().getVarCount()    >    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
458	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    >    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
459	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    >    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
460	[BUG]  [BUGGY]  if(liveVariables.size()  >  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables.size()  >  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables.size()  >  t.getScope().getVarCount())  {	  if(liveVariables.size()    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
461	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  [Delete]  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  [Delete]  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  [Delete]  t.getScope().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    >=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
462	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScopeNode();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScopeNode();  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getScopeNode();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
463	[BUG]  [BUGGY]  if(growingUses!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(growingUses!=  null)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(growingUses!=  null)  {	  if(liveVariables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
464	[BUG]  [BUGGY]  if(visitedVariables!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(visitedVariables!=  null)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(visitedVariables!=  null)  {	  if(liveVariables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
465	[BUG]  [BUGGY]  if(vingUses!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(vingUses!=  null)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(vingUses!=  null)  {	  if(liveVariables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
466	[BUG]  [BUGGY]  if(  reachingUses!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(  reachingUses!=  null)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(  reachingUses!=  null)  {	  if(liveVariables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
467	[BUG]  [BUGGY]  if(visitedVariables  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(visitedVariables  ==  null)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(visitedVariables  ==  null)  {	  if(liveVariables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
468	[BUG]  [BUGGY]  if(visibility  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(visibility  ==  Token.VAR)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(visibility  ==  Token.VAR)  {	  if(liveVariables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
469	[BUG]  [BUGGY]  if(t.getScope()!=  null  &&  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope()!=  null  &&  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope()!=  null  &&  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
470	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
471	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  false);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  false);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  false);	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
472	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  true);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  true);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  true);	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
473	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  t.getScopeRoot().getVarCount()  <  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  t.getScopeRoot().getVarCount()  <  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  t.getScopeRoot().getVarCount()  <  liveVariables.size())  {	  if(t.getScopeRoot().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
474	[BUG]  [BUGGY]  if(VarsAnalysis.MAX_VALUES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalysis.MAX_VALUES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MAX_VALUES_TO_ANALYZE!=  t.getScope().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
475	[BUG]  [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getParent())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getParent())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getParent())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
476	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  1)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
477	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  1)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
478	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  4  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  4  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  4  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    liveVariables.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
479	[BUG]  [BUGGY]  if(VariablesAnalyzer.class.isAssignableFrom(t.getScope().getVarCount())||  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.class.isAssignableFrom(t.getScope().getVarCount())||  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.class.isAssignableFrom(t.getScope().getVarCount())||  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
480	[BUG]  [BUGGY]  if(VariablesAnalyzer.class.isAssignableFrom(t.getScope())||  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.class.isAssignableFrom(t.getScope())||  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.class.isAssignableFrom(t.getScope())||  VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
481	[BUG]  [BUGGY]  if(VariablesAnalyzer.DEFAULT_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.DEFAULT_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.DEFAULT_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
482	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (numUseWithinCfgNode  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (numUseWithinCfgNode  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (numUseWithinCfgNode  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
483	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(numUseWithinCfgNode  >  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(numUseWithinCfgNode  >  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(numUseWithinCfgNode  >  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
484	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME,  t.getScopeRoot());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME,  t.getScopeRoot());	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
485	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.	  if(t.getScopeRoot().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
486	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.DEFAULT_VARIABLES)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.DEFAULT_VARIABLES)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.DEFAULT_VARIABLES)  {	  if(t.getScopeRoot().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
487	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount()  ||!NodeUtil.mayHaveSideEffects(t.getScopeRoot().getVarCount()))  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScopeRoot().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
488	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
489	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <  2  ||  T.getScopeRoot().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  <  2  ||  T.getScopeRoot().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <  2  ||  T.getScopeRoot().getVarCount()  >  2)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
490	[BUG]  [BUGGY]  if(Vars.MIN_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MIN_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MIN_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
491	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(inlinedVariables,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyNameAnnotations(inlinedVariables,  t.getScopeRoot());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyNameAnnotations(inlinedVariables,  t.getScopeRoot());	  NodeUtil.copyNameAnnotations(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
492	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(inlinedDependencies,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyNameAnnotations(inlinedDependencies,  t.getScopeRoot());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyNameAnnotations(inlinedDependencies,  t.getScopeRoot());	  NodeUtil.copyNameAnnotations(null,    t.getScopeRoot());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
493	[BUG]  [BUGGY]  if(t.getScope().hasVar(varName)||  t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().hasVar(varName)||  t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().hasVar(varName)||  t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
494	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
495	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScopeRoot().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScopeRoot().getVarCount()  ==  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScopeRoot().getVarCount()  ==  2)  {	  if(t.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
496	[BUG]  [BUGGY]  if(Vars.MAX_VALUE  <=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MAX_VALUE  <=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VALUE  <=  t.getScope().getVarCount())  {	  if(Vars.MAX_VALUE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
497	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild(),  t.getScopeRoot());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild(),  t.getScopeRoot());	  cfg.process(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
498	[BUG]  [BUGGY]  if(VarsAnalyzer.VARIES_TO_ANALYZE  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalyzer.VARIES_TO_ANALYZE  <  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalyzer.VARIES_TO_ANALYZE  <  t.getScope().getVarCount())  {	  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
499	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  liveVariables.length  ||  t.getScope().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <  liveVariables.length  ||  t.getScope().getVarCount()  >  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  liveVariables.length  ||  t.getScope().getVarCount()  >  2)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.CATCH);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.CATCH);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
501	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR  ||  t.getScopeRoot().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
502	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)||(t.getScopeRoot()!=  null)&&  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)||(t.getScopeRoot()!=  null)&&  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)||(t.getScopeRoot()!=  null)&&	  if((    t.getScope()!=    null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())||(t.getScopeRoot()!=    null)&&    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
503	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(t.getScope().getVarCount()  >  0)||(t.getScopeRoot()!=  null)&&  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(t.getScope().getVarCount()  >  0)||(t.getScopeRoot()!=  null)&&  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(t.getScope().getVarCount()  >  0)||(t.getScopeRoot()!=  null)&&	  if((    t.getScope()!=    null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())||(t.getScopeRoot()!=    null)&&    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
504	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)||(t.getScopeRoot()!=  null)&&  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)||(t.getScopeRoot()!=  null)&&  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)||(t.getScopeRoot()!=  null)&&	  if((    t.getScope()!=    null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())||(t.getScopeRoot()!=    null)&&    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
505	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  >  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  >  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  >  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
506	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <=  T.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <=  T.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <=  T.getScope().getVarCount())  {	  if(T.getScope().getVarCount()    <    VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
507	[BUG]  [BUGGY]  if(VarsAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
508	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  2)  {	  if(T.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
509	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  ==  2)  {	  if(T.getScope().getVarCount()    ==    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
510	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <=  2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  <=  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <=  2)  {	  if(t.getScope().getVarCount()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
511	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  def);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild(),  def);	  NodeUtil.copyName(varName,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
512	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(varName,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeUtil.copyNameAnnotations(varName,  t.getScopeRoot().getFirstChild());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyNameAnnotations(varName,  t.getScopeRoot().getFirstChild());	  NodeUtil.copyName(varName,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
513	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  <=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  <=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  liveVariables.size()  <=  t.getScope().getVarCount())  {	  if(liveVariables!=    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
514	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  <  2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.size()  <  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  liveVariables.size()  <  2)  {	  if(liveVariables!=    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
515	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  >  1)  {	  if(T.getScope().getVarCount()    >    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
516	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  >  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  liveVariables.size())  {	  if(t.getScope().getVarCount()    >=    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
517	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  >  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  >  0)  {	  if(t.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
518	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
519	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  liveVariables.length  ||  t.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  liveVariables.length  ||  t.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  liveVariables.length  ||  t.getScopeRoot().getVarCount()  >  1)  {	  if(t.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
520	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isAll());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().isAll());	  Preconditions.checkState(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
521	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().isDefine());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().isDefine());	  Preconditions.checkState(t.getScopeRoot().isFunction());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
522	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    ==    liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
523	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.contains(t.getScope().getVarCount())  <  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables  ==  null  ||  liveVariables.contains(t.getScope().getVarCount())  <  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  liveVariables.contains(t.getScope().getVarCount())  <  liveVariables.size())  {	  if(liveVariables    ==    null    ||    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
524	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  ==  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES  ||  t.getScope().getVarCount()  ==  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
525	[BUG]  [BUGGY]  if(VariablesAnalyzer.VARIES_TO_ANALYZE  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalyzer.VARIES_TO_ANALYZE  <  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.VARIES_TO_ANALYZE  <  t.getScope().getVarCount())  {	  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
526	[BUG]  [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  4)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  4)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  4)  {	  if(liveVariables!=    null    &&    t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
527	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  t.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  t.getLastChild());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  t.getLastChild());	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
528	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild(),  t.getScopeRoot());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild(),  t.getScopeRoot());	  cfg.process(null,    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
529	[BUG]  [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()!=  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()!=  liveVariables.size())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  &&  t.getScope().getVarCount()!=  liveVariables.size())  {	  if(t.getScope().getVarCount()!=    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
530	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  1)  {	  if(t.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
531	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScopeFactory();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScopeFactory();  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getScopeFactory();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
532	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConfig();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConfig();  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getConfig();	  ControlFlowGraph    <    Node>    cfg    =    t.getScopeRoot();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
533	[BUG]  [BUGGY]  if(Variables.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  Character.isDigit(t.getScopeRoot().getLastChild()))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Variables.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  Character.isDigit(t.getScopeRoot().getLastChild()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Variables.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  Character.isDigit(t.getScopeRoot().getLastChild()))  {	  if(Variables.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
534	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  0)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  0)  {	  if(t.getScopeRoot().getVarCount()    <=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
535	[BUG]  [BUGGY]  if(VariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
536	[BUG]  [BUGGY]  if(VarsAnalysis.MIN_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VarsAnalysis.MIN_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MIN_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    >    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
537	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  Vars.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  Vars.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  Vars.MAX_VARIABLES_TO_ANALYZE)  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
538	[BUG]  [BUGGY]  if(Vars.MIN_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(Vars.MIN_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MIN_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE!=    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
539	[BUG]  [BUGGY]  if(VariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
540	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  Character.isUpperCase(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  Character.isUpperCase(t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount()  ||  Character.isUpperCase(t.getScope().getVarCount()))  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
541	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.AUTO_MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.AUTO_MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(liveVariablesAnalysis.AUTO_MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
542	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
543	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineGlobalDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineGlobalDependencies);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlineGlobalDependencies);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
544	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScopeRoot().getVarCount()  <  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
545	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <  2  ||  T.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(T.getScopeRoot().getVarCount()  <  2  ||  T.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <  2  ||  T.getScopeRoot().getVarCount()  >  1)  {	  if(T.getScopeRoot().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    T.getScopeRoot().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
546	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  2)  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()!=  2)  {	  if(T.getScope().getVarCount()!=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
547	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope(),  t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(!t.inGlobalScope(),  t.getScopeRoot().isFunction());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(!t.inGlobalScope(),  t.getScopeRoot().isFunction());	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
548	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!t.isFunction());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!t.isFunction());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(!t.inGlobalScope()  &&!t.isFunction());	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
549	[BUG]  [BUGGY]  if(inlinedVariables.size()  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if(inlinedVariables.size()  <  t.getScope().getVarCount())  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(inlinedVariables.size()  <  t.getScope().getVarCount())  {	  if(liveVariables.size()    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
550	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.CATCH);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.CATCH);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
551	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.BLOCK);  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION  ||  t.getScopeRoot().getType()  ==  Token.BLOCK);	  Preconditions.checkState(t.getScopeRoot().getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
552	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||  t.isFunction());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  Preconditions.checkState(t.inGlobalScope()  ||  t.isFunction());  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.inGlobalScope()  ||  t.isFunction());	  Preconditions.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
553	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  *  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }      [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  *  t.getScope().getVarCount()))  {  [BUGGY]      t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  *  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
