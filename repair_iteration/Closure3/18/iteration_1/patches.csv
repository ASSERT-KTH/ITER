bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
3	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
4	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if((  t.getScope()!=  null)&&  (MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  if(liveVariables.size()  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(liveVariables.size()  <  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables.size()  <  t.getScope().getVarCount())  {	  if(t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  if(liveVariables!=  null  ||  t.getScope().getVarCount()  <  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(liveVariables!=  null  ||  t.getScope().getVarCount()  <  liveVariables.size())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  ||  t.getScope().getVarCount()  <  liveVariables.size())  {	  if(t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  liveVariables.size())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null  &&  t.getScope().getVarCount()  <  liveVariables.size())  {	  if(t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariables.size())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  liveVariables.size())  {	  if(t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >=  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  >=  liveVariables.size())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >=  liveVariables.size())  {	  if(t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
10	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()!=  liveVariables.size())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  liveVariables.size())  {	  if(t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
11	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
13	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  <  1)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  1)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
17	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    >=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
18	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(T.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(T.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(T.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  <  2)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  2)  {	  if(T.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  <  2)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(T.getScope().getVarCount()  <  2)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  <  2)  {	  if(T.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  Preconditions.checkState(t.inGlobalScope());  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.inGlobalScope());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION);  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  Preconditions.checkState(!t.inGlobalScope());  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(!t.inGlobalScope());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR);  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.VAR);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
27	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyName(varName,  t.getScopeRoot().getFirstChild());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME);  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().getType()  ==  Token.NAME);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  Preconditions.checkState(t.getScopeRoot().isFunction());  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	Preconditions.checkState(t.getScopeRoot().isFunction());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
33	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  &&  t.getScope().getVarCount()  >  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  liveVariables.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  ==  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
36	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  2)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
38	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
41	[BUG]  [BUGGY]  if(Variables.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(Variables.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Variables.MAX_VARIABLES_TO_ANALYZE  ==  t.getScope().getVarCount())  {	  if(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
42	[BUG]  [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  <  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  VarsAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
45	[BUG]  [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  Variables.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  <  Variables.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  Variables.MAX_VARIABLES_TO_ANALYZE)  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
48	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
49	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
50	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()  ||  Character.isDigit(t.getScope().getVarCount()))  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
51	[BUG]  [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalyzer.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
52	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
53	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
54	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >=  t.getScope().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
55	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScopeRoot().getVarCount())  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
56	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(T.getScope().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  <  VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
57	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
58	[BUG]  [BUGGY]  if(Vars.MAX_VALUE  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(Vars.MAX_VALUE  <  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VALUE  <  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
59	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    >=    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
60	[BUG]  [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VariablesAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {	  if(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {	  if(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
62	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES)  {	  if(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
63	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
64	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  NodeTraversal.traverse(compiler,  t);  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  t);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
66	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScopeRoot();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScopeRoot();  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getScopeRoot();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  NodeTraversal.traverse(compiler,  t,  this);  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeTraversal.traverse(compiler,  t,  this);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
68	[BUG]  [BUGGY]  if(T.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(T.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
69	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
70	[BUG]  [BUGGY]  if(T.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(T.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
71	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(T.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(T.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
72	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
73	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()!=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  0)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
75	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if((  t.getScope()!=  null)&&  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  >  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
76	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&  (LiveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if((  t.getScope()!=  null)&&  (LiveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&  (LiveVariablesAnalysis.DEFAULT_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
77	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if((  t.getScope()!=  null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())||(t.getScopeRoot()!=  null)&&	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
78	[BUG]  [BUGGY]  if(liveVariables  ==  null  ||  t.getScope().getVarCount()  <  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(liveVariables  ==  null  ||  t.getScope().getVarCount()  <  liveVariables.size())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables  ==  null  ||  t.getScope().getVarCount()  <  liveVariables.size())  {	  if(t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
79	[BUG]  [BUGGY]  if(liveVariables!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(liveVariables!=  null)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(liveVariables!=  null)  {	  if(t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
80	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <=  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
81	[BUG]  [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE!=  t.getScope().getVarCount())  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
82	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  <  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  <  Vector.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  <  Vector.MAX_VARIABLES_TO_ANALYZE)  {	  if(VarsAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
83	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  ==  liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ==    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
84	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  liveVariables.size())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScopeRoot().getVarCount()  <  liveVariables.size())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  liveVariables.size())  {	  if(t.getScope().getVarCount()    <    liveVariables.size())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
85	[BUG]  [BUGGY]  if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScopeRoot().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
86	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(null,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  NodeUtil.copyNameAnnotations(null,  t.getScopeRoot());  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	NodeUtil.copyNameAnnotations(null,  t.getScopeRoot());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
87	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  cfg.process(null,  t.getScopeRoot());  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	cfg.process(null,  t.getScopeRoot());	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
88	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  1)  {	  if(T.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
89	[BUG]  [BUGGY]  if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(T.getScopeRoot().getVarCount()  <  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  T.getScopeRoot().getVarCount()  >  2)  {	  if(T.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
90	[BUG]  [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(t.getScope().getVarCount()  >  LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  ||  t.getScope().getVarCount()  >  1)  {	  if(t.getScope().getVarCount()    <    LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
91	[BUG]  [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if(Vars.MAX_VARIABLES_TO_ANALYZE  <=  t.getScope().getVarCount())  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if(Vars.MAX_VARIABLES_TO_ANALYZE  <=  t.getScope().getVarCount())  {	  if(Vars.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
92	[BUG]  [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }    [BUGGY]  if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {  [BUGGY]    t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	131	132	3	replace	if((  t.getScope()!=  null)&&(liveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount()))  {	  if((    t.getScope()!=    null)&&    (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE    <    t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
