bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  void  enterScope(NodeTraversal  t)  {  [BUGGY]  if(!t.inGlobalScope())  {  [BUGGY]  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope())  {	if  (t.inGlobalScope())  {  	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
2	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  void  enterScope(NodeTraversal  t)  {  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1)  {  [BUGGY]  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1)  {	if  (t.inGlobalScope())  {  	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
3	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  void  enterScope(NodeTraversal  t)  {  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1)  {  [BUGGY]  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1)  {	if  (t.inGlobalScope())  {  	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
4	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  void  enterScope(NodeTraversal  t)  {  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope())  {	if  (t.inGlobalScope())  {  	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
5	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  public  void  enterScope(NodeTraversal  t)  {  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2)  {  [BUGGY]  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2)  {	if  (t.inGlobalScope())  {  	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
6	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  public  void  enterScope(NodeTraversal  t)  {  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2)  {  [BUGGY]  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2)  {	if  (t.inGlobalScope())  {  	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  public  void  enterScope(NodeTraversal  t)  {  [BUGGY]    [BUGGY]  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	  	if  (t.inGlobalScope())  {  	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
8	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  void  enterScope(NodeTraversal  t)  {  [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.inGlobalScope())  {	if  (t.inGlobalScope())  {  	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
9	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  void  enterScope(NodeTraversal  t)  {  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount())  {  [BUGGY]  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarCount())  {	if  (t.inGlobalScope())  {  	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
10	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  void  enterScope(NodeTraversal  t)  {  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >  1)  {	if  (t.inGlobalScope())  {  	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
11	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  void  enterScope(NodeTraversal  t)  {  [BUGGY]  if(t.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]  return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  c.inGlobalScope())  {	if  (t.inGlobalScope())  {  	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
