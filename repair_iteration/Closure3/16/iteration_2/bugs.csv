bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(c.inGlobalScope()  ||  t.inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  t.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&  c.inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(c.inGlobalScope()  ||  t.getScope().inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  t.getScope().inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  if(!c.inGlobalScope()  ||  t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!c.inGlobalScope()  ||  t.inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!c.inGlobalScope()  ||  t.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(c,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  NodeUtil.copyCurrentScope(c,  t.getScope());  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(c,  t.getScope());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount());  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyName(varName,  t.getScope().getVarCount());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  cfa.enterScope(t);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  cfa.enterScope(t);  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	cfa.enterScope(t);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  NodeTraversal.traverse(compiler,  t);  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfa);  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfa);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope());  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t.getScope());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
13	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  NodeUtil.copyCurrentScope(c);  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(c);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
14	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >  1)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >  1)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
16	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  <  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  <  1)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  <  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
17	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  1)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
18	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
19	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  &&!t.inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&!t.inGlobalScope())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
23	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().hasVarCount())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
24	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasVarCount())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
25	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.getScope().inGlobalScope()  ||  t.getScope().hasVarCount())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
26	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
27	[BUG]  [BUGGY]  if(s.inGlobalScope()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(s.inGlobalScope()  ||  t.getScope().hasVarCount())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(s.inGlobalScope()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
28	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope()))  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope()))  {	  if(!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope()))  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope()))  {	  if(!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()))  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()))  {	  if(!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
31	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope()))  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope()))  {	  if(!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
32	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  2)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
35	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
37	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
38	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
39	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()!=  1)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()!=  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
40	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  1)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
41	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.inGlobalScope())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
45	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  2)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
46	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
47	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
48	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  2)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
49	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasVarCount())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().hasVarCount())  {	  if(!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
50	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isGlobal())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isGlobal())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().isGlobal())  {	  if(!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
51	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t))  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t))  {	  if(!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
52	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasVarCount())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().hasVarCount())  {	  if(!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
53	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getScope()))  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getScope()))  {	  if(!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  this);  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t,  this);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
55	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&!NodeUtil.mayHaveSideEffects(t);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&!NodeUtil.mayHaveSideEffects(t);  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t)&&!NodeUtil.mayHaveSideEffects(t);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
56	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >  0;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >  0;  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >  0;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
57	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(t);  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
58	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasChildren())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasChildren())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
59	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVars())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVars())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVars())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
60	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarStart())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarStart())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarStart())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  if(t.getScope()!=  null  ||!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.getScope()!=  null  ||!t.getScope().inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()!=  null  ||!t.getScope().inGlobalScope())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
62	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  t.isGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(c.inGlobalScope()  ||  t.isGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  t.isGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
63	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
64	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped)  {	  if(t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
65	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  0)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  0)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
66	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >  2)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
67	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope())  {	  if(!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isExtern())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isExtern())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().isExtern())  {	  if(!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
69	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
70	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >  0)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >  0)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
71	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()!=  1)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()!=  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
72	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
73	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
74	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  4)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  4)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  4)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
75	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  2)  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
76	[BUG]  [BUGGY]  if(t.getScope()!=  null  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(t.getScope()!=  null  ||!t.inGlobalScope())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()!=  null  ||!t.inGlobalScope())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
77	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
78	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScope();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScope();  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getScope();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
79	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t,  c);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  NodeUtil.mayHaveSideEffects(t,  c);  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t,  c);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
80	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {    [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getScope());  [BUGGY]    return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfg,  t.getScope());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
