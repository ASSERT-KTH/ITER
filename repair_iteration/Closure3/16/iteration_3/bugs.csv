bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.getScope().hasVarCount())  {	  if(!t.inGlobalScope()    ||!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
2	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {	  if(!t.inGlobalScope()    ||!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
3	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  >  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  >  0)  {	  if(!t.inGlobalScope()    ||!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
4	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasVarCount()  ||  0  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasVarCount()  ||  0  <  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().hasVarCount()  ||  0  <  t.getScope().getVarCount())  {	  if(!t.inGlobalScope()    ||!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
5	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVar(varName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVar(varName))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVar(varName))  {	  if(t.inGlobalScope()    ||    t.getScope().hasVars())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
6	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVars())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVars())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().hasVars())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVars())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
7	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().hasVars())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().hasVars())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().hasVars())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVars())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
8	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasVars())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasVars())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().hasVars())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVars())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
9	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  ||  t.getScope().hasVars())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().inGlobalScope()  ||  t.getScope().hasVars())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  ||  t.getScope().hasVars())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVars())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
10	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  &&!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().inGlobalScope()  &&!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  &&!t.getScope().inGlobalScope())  {	  if(t.getScope().inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
11	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||  numUseWithinUseCfgNode  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||  numUseWithinUseCfgNode  >  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||  numUseWithinUseCfgNode  >  0)  {	  if(t.getScope().inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
12	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  ||!t.getScope().isGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().inGlobalScope()  ||!t.getScope().isGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  ||!t.getScope().isGlobalScope())  {	  if(t.getScope().inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
13	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {	  if(t.getScope().inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
14	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  numUseWithinUseCfgNode);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyName(varName,  t.getScope().getVarCount(),  numUseWithinUseCfgNode);	  NodeUtil.copyName(varName,    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
15	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  cfa);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  cfa);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyName(varName,  t.getScope().getVarCount(),  cfa);	  NodeUtil.copyName(varName,    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
16	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount()  +  1);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount()  +  1);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyName(varName,  t.getScope().getVarCount()  +  1);	  NodeUtil.copyName(varName,    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  numUseWithinCfgNode);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyName(varName,  t.getScope().getVarCount(),  numUseWithinCfgNode);	  NodeUtil.copyName(varName,    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
18	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  c);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  c);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyName(varName,  t.getScope().getVarCount(),  c);	  NodeUtil.copyName(varName,    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
19	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  cfg);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  cfg);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyName(varName,  t.getScope().getVarCount(),  cfg);	  NodeUtil.copyName(varName,    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  1);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  1);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyName(varName,  t.getScope().getVarCount(),  1);	  NodeUtil.copyName(varName,    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  c.isGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  c.isGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  c.isGlobalScope())  {	  if(c.inGlobalScope()    ||    t.isGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
22	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  t.getScope().isGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  t.getScope().isGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  t.getScope().isGlobalScope())  {	  if(c.inGlobalScope()    ||    t.isGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
23	[BUG]  [BUGGY]  if(!c.inGlobalScope()  ||  t.isGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!c.inGlobalScope()  ||  t.isGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!c.inGlobalScope()  ||  t.isGlobalScope())  {	  if(c.inGlobalScope()    ||    t.isGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
24	[BUG]  [BUGGY]  if(!c.inGlobalScope()  &&  t.isGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!c.inGlobalScope()  &&  t.isGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!c.inGlobalScope()  &&  t.isGlobalScope())  {	  if(c.inGlobalScope()    ||    t.isGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
25	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  c.isGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  c.isGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  c.isGlobalScope())  {	  if(c.inGlobalScope()    ||    t.isGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
26	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  t.isGlobalScope()  ||  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  t.isGlobalScope()  ||  t.getScope().getVarCount()  ==  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  t.isGlobalScope()  ||  t.getScope().getVarCount()  ==  1)  {	  if(c.inGlobalScope()    ||    t.isGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
27	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isGlobal())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isGlobal())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().isGlobal())  {	  if(!t.inGlobalScope()    ||!t.getScope().isGlobal())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
28	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isGlobal()  ||!t.getVarCount().isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isGlobal()  ||!t.getVarCount().isEmpty())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().isGlobal()  ||!t.getVarCount().isEmpty())  {	  if(!t.inGlobalScope()    ||!t.getScope().isGlobal())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
29	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.getScope().isGlobal())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.getScope().isGlobal())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.getScope().isGlobal())  {	  if(!t.inGlobalScope()    ||!t.getScope().isGlobal())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
30	[BUG]  [BUGGY]  if(!t.getScope().inGlobalScope()  ||!t.getScope().isGlobal())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.getScope().inGlobalScope()  ||!t.getScope().isGlobal())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.getScope().inGlobalScope()  ||!t.getScope().isGlobal())  {	  if(!t.inGlobalScope()    ||!t.getScope().isGlobal())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
31	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isGlobal()  ||!t.getScope().isGlobal())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isGlobal()  ||!t.getScope().isGlobal())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().isGlobal()  ||!t.getScope().isGlobal())  {	  if(!t.inGlobalScope()    ||!t.getScope().isGlobal())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
32	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isGlobal()  ||!t.getVarCount().isLocal())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isGlobal()  ||!t.getVarCount().isLocal())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().isGlobal()  ||!t.getVarCount().isLocal())  {	  if(!t.inGlobalScope()    ||!t.getScope().isGlobal())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
33	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >=  2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >=  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >=  2)  {	  if(t.inGlobalScope()    &&    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
34	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  &&  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  &&  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  &&  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    &&    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
35	[BUG]  [BUGGY]  if(!c.inGlobalScope()  &&  t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!c.inGlobalScope()  &&  t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!c.inGlobalScope()  &&  t.inGlobalScope())  {	  if(c.inGlobalScope()    ||    t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
36	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  c.inGlobalScope())  {	  if(c.inGlobalScope()    ||    t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
37	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {	  if(c.inGlobalScope()    ||    t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  if(t.getScope()!=  null  &&!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope()!=  null  &&!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()!=  null  &&!t.getScope().inGlobalScope())  {	  if(t.getScope()!=    null    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
39	[BUG]  [BUGGY]  if(!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.getScope().inGlobalScope())  {	  if(t.getScope()!=    null    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
40	[BUG]  [BUGGY]  if(t.getScope()  ==  null  ||!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope()  ==  null  ||!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()  ==  null  ||!t.getScope().inGlobalScope())  {	  if(t.getScope()!=    null    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
41	[BUG]  [BUGGY]  if(t.getScope()!=  null  ||!t.getScope().isGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope()!=  null  ||!t.getScope().isGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()!=  null  ||!t.getScope().isGlobalScope())  {	  if(t.getScope()!=    null    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
42	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >=  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >=  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
43	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >=  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >=  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    >=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  c,  this);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  def);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t,  def);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfa,  this);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidates);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t,  this,  candidates);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
49	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  def);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t,  this,  def);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
51	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {	  if(!t.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
52	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  0  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  0  <  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  0  <  t.getScope().getVarCount())  {	  if(!t.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
53	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  >  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  >  0)  {	  if(!t.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
54	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||!t.inGlobalScope()  ||  t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||!t.inGlobalScope()  ||  t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||!t.inGlobalScope()  ||  t.inGlobalScope())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
55	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
56	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
57	[BUG]  [BUGGY]  cfa.enterScope(t,  c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  cfa.enterScope(t,  c);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	cfa.enterScope(t,  c);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
58	[BUG]  [BUGGY]  cfa.enterScope(t,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  cfa.enterScope(t,  def);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	cfa.enterScope(t,  def);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
59	[BUG]  [BUGGY]  cfa.enterScope(t,  null);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  cfa.enterScope(t,  null);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	cfa.enterScope(t,  null);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
60	[BUG]  [BUGGY]  cfa.enterScope(t,  this);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  cfa.enterScope(t,  this);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	cfa.enterScope(t,  this);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  cfa.enterScope(t,  candidate);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  cfa.enterScope(t,  candidate);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	cfa.enterScope(t,  candidate);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
62	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
63	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
64	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
65	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
66	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  c.inGlobalScope()  ||  t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  c.inGlobalScope()  ||  t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  c.inGlobalScope()  ||  t.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
67	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  c.inGlobalScope()  ||!c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  c.inGlobalScope()  ||!c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  c.inGlobalScope()  ||!c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
68	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  0)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
69	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  0)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
70	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  0)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
71	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  t.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
72	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  t.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
73	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  t.inGlobalScope()  ||!c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  t.inGlobalScope()  ||!c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  t.inGlobalScope()  ||!c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
75	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  c.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  c.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  c.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
76	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!TestUtil.isFunctionDeclaration(t))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!TestUtil.isFunctionDeclaration(t))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!TestUtil.isFunctionDeclaration(t))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
77	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!TestUtil.isFunctionDeclaration(t))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!TestUtil.isFunctionDeclaration(t))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!TestUtil.isFunctionDeclaration(t))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
78	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
79	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isExpressionNode(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isExpressionNode(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isExpressionNode(t.getScope()))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
80	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.mayHaveSideEffects(t))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.mayHaveSideEffects(t))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.mayHaveSideEffects(t))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
81	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t,  c))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t,  c))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t,  c))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
82	[BUG]  [BUGGY]  if(t.getScope()  ==  null  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope()  ==  null  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()  ==  null  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {	  if(t.getScope()!=    null    ||!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
83	[BUG]  [BUGGY]  if(t.getScope()!=  null  &&!t.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope()!=  null  &&!t.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()!=  null  &&!t.inGlobalScope()  ||!t.inGlobalScope())  {	  if(t.getScope()!=    null    ||!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
84	[BUG]  [BUGGY]  if(!t.getScope().isGlobal()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.getScope().isGlobal()  ||!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.getScope().isGlobal()  ||!t.inGlobalScope())  {	  if(t.getScope()!=    null    ||!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
85	[BUG]  [BUGGY]  if(!t.getScope().inGlobalScope()  &&!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.getScope().inGlobalScope()  &&!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.getScope().inGlobalScope()  &&!t.getScope().inGlobalScope())  {	  if(!t.getScope().inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
86	[BUG]  [BUGGY]  if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {	  if(!t.getScope().inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
87	[BUG]  [BUGGY]  if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getVarCount()  >  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getVarCount()  >  0)  {	  if(!t.getScope().inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
88	[BUG]  [BUGGY]  if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getCurrentScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getCurrentScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getCurrentScope().inGlobalScope())  {	  if(!t.getScope().inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
89	[BUG]  [BUGGY]  if(!s.inGlobalScope()  &&  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!s.inGlobalScope()  &&  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!s.inGlobalScope()  &&  t.getScope().hasVarCount())  {	  if(s.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
90	[BUG]  [BUGGY]  if(s.inGlobalScope()  &&  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(s.inGlobalScope()  &&  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(s.inGlobalScope()  &&  t.getScope().hasVarCount())  {	  if(s.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
91	[BUG]  [BUGGY]  if(!s.inGlobalScope()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!s.inGlobalScope()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!s.inGlobalScope()  ||  t.getScope().hasVarCount())  {	  if(s.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
92	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().hasDeclaredVariables())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().hasDeclaredVariables())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().hasDeclaredVariables())  {	  if(t.inGlobalScope()    ||    t.getScope().hasDeclaredVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
93	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasDeclaredVariables())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasDeclaredVariables())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().hasDeclaredVariables())  {	  if(t.inGlobalScope()    ||    t.getScope().hasDeclaredVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
94	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables())  {	  if(t.inGlobalScope()    ||    t.getScope().hasDeclaredVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
95	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  ||  t.getScope().hasDeclaredVariables())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().inGlobalScope()  ||  t.getScope().hasDeclaredVariables())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  ||  t.getScope().hasDeclaredVariables())  {	  if(t.inGlobalScope()    ||    t.getScope().hasDeclaredVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
96	[BUG]  [BUGGY]  if(s.inGlobalScope()  ||  t.getScope().hasDeclaredVariables())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(s.inGlobalScope()  ||  t.getScope().hasDeclaredVariables())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(s.inGlobalScope()  ||  t.getScope().hasDeclaredVariables())  {	  if(t.inGlobalScope()    ||    t.getScope().hasDeclaredVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
97	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables()  ||  numUseWithinUseCfgNode  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables()  ||  numUseWithinUseCfgNode  >  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables()  ||  numUseWithinUseCfgNode  >  0)  {	  if(t.inGlobalScope()    ||    t.getScope().hasDeclaredVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
98	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.inGlobalScope()  ||!t.inGlobalScope())  {	  if(!t.inGlobalScope()    &&!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
99	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope()))  {	  if(!t.inGlobalScope()    &&!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
100	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScope()))  {	  if(!t.inGlobalScope()    &&!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
101	[BUG]  [BUGGY]  if(!t.getScope().inGlobalScope()  &&!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.getScope().inGlobalScope()  &&!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.getScope().inGlobalScope()  &&!t.inGlobalScope())  {	  if(!t.inGlobalScope()    &&!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
102	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  0)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    4)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
103	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  3)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  3)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  3)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    4)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
104	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()!=  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()!=  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    4)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
105	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  ==  0;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  ==  0;  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  ==  0;	  NodeUtil.mayHaveSideEffects(t)&&    numUseWithinUseCfgNode    >    0;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
106	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >=  0;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >=  0;  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >=  0;	  NodeUtil.mayHaveSideEffects(t)&&    numUseWithinUseCfgNode    >    0;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
107	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >  1;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >  1;  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >  1;	  NodeUtil.mayHaveSideEffects(t)&&    numUseWithinUseCfgNode    >    0;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
108	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  <=  0;  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  <=  0;  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  <=  0;	  NodeUtil.mayHaveSideEffects(t)&&    numUseWithinUseCfgNode    >    0;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
109	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode!=  0;  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode!=  0;  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode!=  0;	  NodeUtil.mayHaveSideEffects(t)&&    numUseWithinUseCfgNode    >    0;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
110	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t)||  numUseWithinUseCfgNode  >  0;  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(t)||  numUseWithinUseCfgNode  >  0;  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t)||  numUseWithinUseCfgNode  >  0;	  NodeUtil.mayHaveSideEffects(t)&&    numUseWithinUseCfgNode    >    0;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
111	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&  numUseWithinUseCfgNode  >  0;  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&  numUseWithinUseCfgNode  >  0;  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(c)&&  numUseWithinUseCfgNode  >  0;	  NodeUtil.mayHaveSideEffects(t)&&    numUseWithinUseCfgNode    >    0;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
112	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  &&!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().inGlobalScope()  &&!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  &&!t.inGlobalScope())  {	  if(t.inGlobalScope()    &&!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
113	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfa,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfa,  t.getScope());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfa,  t.getScope());	  NodeUtil.copyCurrentScope(c,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
114	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(c,  t.getScope(),  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(c,  t.getScope(),  inlinedNewDependencies);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(c,  t.getScope(),  inlinedNewDependencies);	  NodeUtil.copyCurrentScope(c,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
115	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(c,  t.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(c,  t.getScope(),  def);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(c,  t.getScope(),  def);	  NodeUtil.copyCurrentScope(c,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
116	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(c,  t.getScope(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(c,  t.getScope(),  numUseWithinUseCfgNode);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(c,  t.getScope(),  numUseWithinUseCfgNode);	  NodeUtil.copyCurrentScope(c,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
117	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(c,  t.getScope(),  n);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(c,  t.getScope(),  n);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(c,  t.getScope(),  n);	  NodeUtil.copyCurrentScope(c,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
118	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(c,  t.getScope(),  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(c,  t.getScope(),  inlineNewDependencies);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(c,  t.getScope(),  inlineNewDependencies);	  NodeUtil.copyCurrentScope(c,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
119	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().hasVarStart())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().hasVarStart())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().hasVarStart())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarStart())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
120	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarStart())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarStart())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().hasVarStart())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarStart())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
121	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasVarStart())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasVarStart())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().hasVarStart())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarStart())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
122	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarEnd())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarEnd())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarEnd())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarStart())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
123	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarName())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarName())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarName())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarStart())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
124	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!NodeUtil.isExpressionNode(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!NodeUtil.isExpressionNode(t.getScope().getVarCount()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!NodeUtil.isExpressionNode(t.getScope().getVarCount()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
125	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope().getVarCount()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope().getVarCount()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
126	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isFunction(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isFunction(t.getScope().getVarCount()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isFunction(t.getScope().getVarCount()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
127	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!NodeUtil.isExpressionNode(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!NodeUtil.isExpressionNode(t.getScope().getVarCount()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!NodeUtil.isExpressionNode(t.getScope().getVarCount()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
128	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()  +  1))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()  +  1))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()  +  1))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
129	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()  -  1))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()  -  1))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()  -  1))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
130	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()!=  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()!=  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2    ||    t.getScope().getVarCount()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
131	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()!=  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()!=  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2    ||    t.getScope().getVarCount()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
132	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  4  ||  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  4  ||  t.getScope().getVarCount()!=  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  4  ||  t.getScope().getVarCount()!=  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2    ||    t.getScope().getVarCount()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
133	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2    ||    t.getScope().getVarCount()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
134	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  2  &&  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  2  &&  t.getScope().getVarCount()!=  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  2  &&  t.getScope().getVarCount()!=  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2    ||    t.getScope().getVarCount()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
135	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()  >=  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()  >=  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2    ||    t.getScope().getVarCount()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
136	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2)  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
137	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  4)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  4)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  4)  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
138	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  &&!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  &&!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  &&!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2)  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
139	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  &&  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().inGlobalScope()  &&  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  &&  t.getScope().hasVarCount())  {	  if(t.getScope().inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
140	[BUG]  [BUGGY]  if(!t.getScope().inGlobalScope()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.getScope().inGlobalScope()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.getScope().inGlobalScope()  ||  t.getScope().hasVarCount())  {	  if(t.getScope().inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
141	[BUG]  [BUGGY]  if(!t.getScope().inGlobalScope()  &&  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.getScope().inGlobalScope()  &&  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.getScope().inGlobalScope()  &&  t.getScope().hasVarCount())  {	  if(t.getScope().inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
142	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  ||  t.getScope().hasVarName())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().inGlobalScope()  ||  t.getScope().hasVarName())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  ||  t.getScope().hasVarName())  {	  if(t.getScope().inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
143	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  ||  t.getScope().hasVarType())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().inGlobalScope()  ||  t.getScope().hasVarType())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  ||  t.getScope().hasVarType())  {	  if(t.getScope().inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
144	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1)  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
145	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1)  {	  if(!t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
146	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  1)  {	  if(!t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
147	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {	  if(!t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
148	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  &&  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  &&  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  &&  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
149	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
150	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
151	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
152	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  4  ||  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  4  ||  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  4  ||  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
153	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarName()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarName()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarName()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
154	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
155	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
156	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
157	[BUG]  [BUGGY]  if(s.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(s.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(s.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
158	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarType()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarType()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarType()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
159	[BUG]  [BUGGY]  if(t.getScope()!=  null  &&!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope()!=  null  &&!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()!=  null  &&!t.inGlobalScope())  {	  if(t.getScope()!=    null    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
160	[BUG]  [BUGGY]  if(t.getScope()  ==  null  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope()  ==  null  ||!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()  ==  null  ||!t.inGlobalScope())  {	  if(t.getScope()!=    null    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
161	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
162	[BUG]  [BUGGY]  if(t.getScope().isGlobal()  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().isGlobal()  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().isGlobal()  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
163	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isExtern())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isExtern())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().isExtern())  {	  if(!t.inGlobalScope()    &&!t.getScope().isExtern())    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
164	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isFunctionDeclaration())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().isFunctionDeclaration())  {	  if(!t.inGlobalScope()    &&!t.getScope().isExtern())    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
165	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isConstructor())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isConstructor())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().isConstructor())  {	  if(!t.inGlobalScope()    &&!t.getScope().isExtern())    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
166	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isLocal())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isLocal())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().isLocal())  {	  if(!t.inGlobalScope()    &&!t.getScope().isExtern())    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
167	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isExtern()  ||!t.getScope().isFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isExtern()  ||!t.getScope().isFunctionDeclaration())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().isExtern()  ||!t.getScope().isFunctionDeclaration())  {	  if(!t.inGlobalScope()    &&!t.getScope().isExtern())    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
168	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isExtern()  ||!t.getScope().isExtern())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isExtern()  ||!t.getScope().isExtern())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().isExtern()  ||!t.getScope().isExtern())  {	  if(!t.inGlobalScope()    &&!t.getScope().isExtern())    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
169	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||!t.inGlobalScope())  {	  if(!t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
170	[BUG]  [BUGGY]  if(!c.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!c.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!c.inGlobalScope()  ||!t.inGlobalScope())  {	  if(!t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
171	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  c.inGlobalScope()  ||  numUseWithinUseCfgNode  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  c.inGlobalScope()  ||  numUseWithinUseCfgNode  >  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  c.inGlobalScope()  ||  numUseWithinUseCfgNode  >  0)  {	  if(!t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
172	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getScope(),  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getScope(),  inlinedNewDependencies);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfg,  t.getScope(),  inlinedNewDependencies);	  NodeUtil.copyCurrentScope(cfg,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
173	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getScope(),  def);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfg,  t.getScope(),  def);	  NodeUtil.copyCurrentScope(cfg,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
174	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getScope(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getScope(),  numUseWithinUseCfgNode);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfg,  t.getScope(),  numUseWithinUseCfgNode);	  NodeUtil.copyCurrentScope(cfg,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
175	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfg,  cfa,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfg,  cfa,  t.getScope());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfg,  cfa,  t.getScope());	  NodeUtil.copyCurrentScope(cfg,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
176	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getScope(),  n);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getScope(),  n);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfg,  t.getScope(),  n);	  NodeUtil.copyCurrentScope(cfg,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
177	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(vfg,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(vfg,  t.getScope());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(vfg,  t.getScope());	  NodeUtil.copyCurrentScope(cfg,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
178	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getConstructor());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getConstructor());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfg,  t.getConstructor());	  NodeUtil.copyCurrentScope(cfg,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfg,  this);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  def);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfa,  def);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  def);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  def);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfg,  def);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  null);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  null);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfg,  null);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  null);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  null);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfa,  null);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
185	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  ||!t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  ||!t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  ||!t.getScope().hasVarCount())  {	  if(!t.inGlobalScope()    &&!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
186	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  &&  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  &&  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  &&  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {	  if(!t.inGlobalScope()    &&!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
187	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {	  if(!t.inGlobalScope()    &&!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
188	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  &&  numUseWithinUseCfgNode  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  &&  numUseWithinUseCfgNode  >  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  &&  numUseWithinUseCfgNode  >  0)  {	  if(!t.inGlobalScope()    &&!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
189	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  &&  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  &&  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  &&  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    numUseWithinUseCfgNode    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
190	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarName()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarName()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarName()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    numUseWithinUseCfgNode    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
191	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    numUseWithinUseCfgNode    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
192	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  >=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  >=  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  >=  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    numUseWithinUseCfgNode    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
193	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    numUseWithinUseCfgNode    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
194	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  >  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  >  1)  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
195	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  <  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  <  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  <  1)  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
196	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >  2)  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
197	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  ||!t.inGlobalVariables())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  ||!t.inGlobalVariables())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.inGlobalScope()  ||!t.inGlobalVariables())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
198	[BUG]  [BUGGY]  if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
199	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
200	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalVariables()  ||!t.inGlobalVariables())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalVariables()  ||!t.inGlobalVariables())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.inGlobalVariables()  ||!t.inGlobalVariables())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
201	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalVars())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalVars())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalVars())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
202	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2)  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
203	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >=  2)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >=  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >=  2)  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
204	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2)  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
205	[BUG]  [BUGGY]  if(!c.inGlobalScope()  &&  t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!c.inGlobalScope()  &&  t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!c.inGlobalScope()  &&  t.getScope().inGlobalScope())  {	  if(c.inGlobalScope()    ||    t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
206	[BUG]  [BUGGY]  if(!c.inGlobalScope()  ||  t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!c.inGlobalScope()  ||  t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!c.inGlobalScope()  ||  t.getScope().inGlobalScope())  {	  if(c.inGlobalScope()    ||    t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
207	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  c.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  c.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  c.getScope().inGlobalScope())  {	  if(c.inGlobalScope()    ||    t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
208	[BUG]  [BUGGY]  if(c.inGlobalScope()  &&  t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  &&  t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  &&  t.getScope().inGlobalScope())  {	  if(c.inGlobalScope()    ||    t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
209	[BUG]  [BUGGY]  if(s.inGlobalScope()  ||  t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(s.inGlobalScope()  ||  t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(s.inGlobalScope()  ||  t.getScope().inGlobalScope())  {	  if(c.inGlobalScope()    ||    t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
210	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  &&  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  &&  t.getScope().getVarCount()!=  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  &&  t.getScope().getVarCount()!=  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
211	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
212	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1  &&  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1  &&  t.getScope().getVarCount()!=  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1  &&  t.getScope().getVarCount()!=  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
213	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  >=  2)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  >=  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  >=  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
214	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
215	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()!=  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()!=  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
216	[BUG]  [BUGGY]  if(escaped  ||!t.inGlobalScope()  ||  t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(escaped  ||!t.inGlobalScope()  ||  t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(escaped  ||!t.inGlobalScope()  ||  t.inGlobalScope())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    escaped)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
217	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  escaped)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  escaped)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  escaped)  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    escaped)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
218	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  escaped.inGlobalScope()  ||  numUseWithinUseCfgNode)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  escaped.inGlobalScope()  ||  numUseWithinUseCfgNode)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  escaped.inGlobalScope()  ||  numUseWithinUseCfgNode)  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    escaped)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
219	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  instanceof  GlobalVariable)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  instanceof  GlobalVariable)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  instanceof  GlobalVariable)  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    escaped)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  c);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  def);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  def);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
223	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfa,  t);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlineNewDependencies);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
225	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasChildren())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().hasChildren())  {	  if(t.inGlobalScope()    ||    t.getScope().hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
226	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().hasChildren())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().hasChildren())  {	  if(t.inGlobalScope()    ||    t.getScope().hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
227	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().hasChildren())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().hasChildren())  {	  if(t.inGlobalScope()    ||    t.getScope().hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
228	[BUG]  [BUGGY]  if(inGlobalScope()  ||  t.getScope().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(inGlobalScope()  ||  t.getScope().hasChildren())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(inGlobalScope()  ||  t.getScope().hasChildren())  {	  if(t.inGlobalScope()    ||    t.getScope().hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
229	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasChildren()  ||  numUseWithinCfgNode  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasChildren()  ||  numUseWithinCfgNode  >  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasChildren()  ||  numUseWithinCfgNode  >  0)  {	  if(t.inGlobalScope()    ||    t.getScope().hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
230	[BUG]  [BUGGY]  if(!c.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!c.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!c.inGlobalScope()  ||  c.inGlobalScope())  {	  if(!c.inGlobalScope()    ||    t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
231	[BUG]  [BUGGY]  if(!cfa.inGlobalScope()  ||  t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!cfa.inGlobalScope()  ||  t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!cfa.inGlobalScope()  ||  t.inGlobalScope())  {	  if(!c.inGlobalScope()    ||    t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
232	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!c.inGlobalScope())  {	  if(!c.inGlobalScope()    ||    t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
233	[BUG]  [BUGGY]  if(!c.inGlobalScope()  ||  c.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!c.inGlobalScope()  ||  c.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!c.inGlobalScope()  ||  c.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1)  {	  if(!c.inGlobalScope()    ||    t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
234	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getCfg();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getCfg();  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getCfg();	  ControlFlowGraph    <    Node>    cfg    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
235	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getCfgNode();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getCfgNode();  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getCfgNode();	  ControlFlowGraph    <    Node>    cfg    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
236	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConfig().getScope();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConfig().getScope();  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getConfig().getScope();	  ControlFlowGraph    <    Node>    cfg    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
237	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConstructor();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConstructor();  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getConstructor();	  ControlFlowGraph    <    Node>    cfg    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
238	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConfiguration();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConfiguration();  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getConfiguration();	  ControlFlowGraph    <    Node>    cfg    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
239	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  c.getScope();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  c.getScope();  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	ControlFlowGraph  <  Node>  cfg  =  c.getScope();	  ControlFlowGraph    <    Node>    cfg    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
240	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    2    &&    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
241	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    2    &&    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
242	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    2    &&    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
243	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    2    &&    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
244	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()  ==  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()  ==  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    2    &&    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
245	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  2  &&  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  2  &&  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  2  &&  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    2    &&    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
246	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  <  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  <  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()  <  1)  {	  if(t.inGlobalScope()    &&    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
247	[BUG]  [BUGGY]  NodeUtil.safeMultiply(t.getScope().getVarCount(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.safeMultiply(t.getScope().getVarCount(),  numUseWithinUseCfgNode);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.safeMultiply(t.getScope().getVarCount(),  numUseWithinUseCfgNode);	  NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
248	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(cfa);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(cfa);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(cfa);	  NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
249	[BUG]  [BUGGY]  NodeUtil.safeMultiply(t.getScope().getVarCount()  -  1);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.safeMultiply(t.getScope().getVarCount()  -  1);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.safeMultiply(t.getScope().getVarCount()  -  1);	  NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
250	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  t);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(cfg,  t);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(cfg,  t);	  NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
251	[BUG]  [BUGGY]  NodeUtil.safeMultiply(t.getScope().getVarCount(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.safeMultiply(t.getScope().getVarCount(),  numUseWithinCfgNode);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.safeMultiply(t.getScope().getVarCount(),  numUseWithinCfgNode);	  NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
252	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    numUseWithinUseCfgNode    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
253	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode  >=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode  >=  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode  >=  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    numUseWithinUseCfgNode    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
254	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    numUseWithinUseCfgNode    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
255	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    numUseWithinUseCfgNode    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
256	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode  >  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode  >  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  numUseWithinUseCfgNode  >  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    numUseWithinUseCfgNode    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
257	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  <  2)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  <  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  <  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
258	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
259	[BUG]  [BUGGY]  if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
260	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inLocalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inLocalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inLocalScope())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
261	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  >  0)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
262	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >  0)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
263	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  >=  0)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
264	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().inGlobalScope())  {	  if(!t.inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
265	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().isGlobalScope())  {	  if(!t.inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
266	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.getScope().inGlobalScope())  {	  if(!t.inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
267	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getVarCount()  >  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getVarCount()  >  0)  {	  if(!t.inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
268	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!NodeUtil.isFunctionDeclaration(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!NodeUtil.isFunctionDeclaration(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!NodeUtil.isFunctionDeclaration(t.getScope()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
269	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
270	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope())||!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope())||!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope())||!NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
271	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isAssignmentOp(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isAssignmentOp(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isAssignmentOp(t.getScope()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
272	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!NodeUtil.isFunctionDeclaration(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!NodeUtil.isFunctionDeclaration(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!NodeUtil.isFunctionDeclaration(t.getScope()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
273	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  NodeUtil.isExpressionNode(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  NodeUtil.isExpressionNode(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  NodeUtil.isExpressionNode(t.getScope()))  {	  if(!t.inGlobalScope()    &&    NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
274	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&    NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
275	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScope()))  {	  if(!t.inGlobalScope()    &&    NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
276	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.isFunction(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.isFunction(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  NodeUtil.isFunction(t.getScope()))  {	  if(!t.inGlobalScope()    &&    NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
277	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.isAssignmentOp(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.isAssignmentOp(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  NodeUtil.isAssignmentOp(t.getScope()))  {	  if(!t.inGlobalScope()    &&    NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
278	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  NodeUtil.isExpressionNode(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  NodeUtil.isExpressionNode(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  NodeUtil.isExpressionNode(t.getScope()))  {	  if(!t.inGlobalScope()    &&    NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
279	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getParent()))  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getParent()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getParent()))  {	  if(!t.inGlobalScope()    &&    NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
280	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!NodeUtil.isExpressionNode(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!NodeUtil.isExpressionNode(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!NodeUtil.isExpressionNode(t.getScope()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
281	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isFunction(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isFunction(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isFunction(t.getScope()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
282	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope())||!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope())||!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope())||!NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
283	[BUG]  [BUGGY]  if(inGlobalScope()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(inGlobalScope()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(inGlobalScope()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    &&    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
284	[BUG]  [BUGGY]  if(cfg.inGlobalScope()  &&  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(cfg.inGlobalScope()  &&  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(cfg.inGlobalScope()  &&  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    &&    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
285	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(c,  cfa);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(c,  cfa);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(c,  cfa);	  NodeUtil.copyCurrentScope(c);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
286	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfa);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfa);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfa);	  NodeUtil.copyCurrentScope(c);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
287	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(c,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(c,  inlinedNewDependencies);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(c,  inlinedNewDependencies);	  NodeUtil.copyCurrentScope(c);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
288	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(c,  t);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(c,  t);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(c,  t);	  NodeUtil.copyCurrentScope(c);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
289	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(c,  def);  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(c,  def);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(c,  def);	  NodeUtil.copyCurrentScope(c);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
290	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(c,  n);  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(c,  n);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(c,  n);	  NodeUtil.copyCurrentScope(c);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
291	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t)||!NodeUtil.mayHaveSideEffects(t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(t)||!NodeUtil.mayHaveSideEffects(t);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t)||!NodeUtil.mayHaveSideEffects(t);	  NodeUtil.mayHaveSideEffects(t)&&!NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
292	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!NodeUtil.mayHaveSideEffects(t);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c)&&!NodeUtil.mayHaveSideEffects(t);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(c)&&!NodeUtil.mayHaveSideEffects(t);	  NodeUtil.mayHaveSideEffects(t)&&!NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t.getScope());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfa,  t.getScope());	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
294	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  inlinedNewDependencies);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t.getScope(),  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  this);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  this);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t.getScope(),  this);	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  def);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t.getScope(),  def);	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  candidates);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  candidates);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t.getScope(),  candidates);	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
298	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  candidate);  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  candidate);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t.getScope(),  candidate);	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
299	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  inlineNewDependencies);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t.getScope(),  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
300	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  t);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(c,  t);	  NodeUtil.mayHaveSideEffects(t,    c);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
301	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  t));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  t));  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(c,  t));	  NodeUtil.mayHaveSideEffects(t,    c);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
302	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(c);	  NodeUtil.mayHaveSideEffects(t,    c);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
303	[BUG]  [BUGGY]  NodeUtil.clearSideEffects(c,  t);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.clearSideEffects(c,  t);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.clearSideEffects(c,  t);	  NodeUtil.mayHaveSideEffects(t,    c);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
304	[BUG]  [BUGGY]  NodeUtil.throwAsSideEffects(c,  t);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.throwAsSideEffects(c,  t);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.throwAsSideEffects(c,  t);	  NodeUtil.mayHaveSideEffects(t,    c);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
305	[BUG]  [BUGGY]  NodeUtil.removeChild(c);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.removeChild(c);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.removeChild(c);	  NodeUtil.mayHaveSideEffects(t,    c);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
306	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2    &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
307	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2    &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
308	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  2  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2    &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
309	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2    &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
310	[BUG]  [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  &&  t.getScope().getVarCount()  >  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
311	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!TestUtil.isFunctionDeclaration(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!TestUtil.isFunctionDeclaration(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!TestUtil.isFunctionDeclaration(t.getScope()))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
312	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!TestUtil.isFunctionDeclaration(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!TestUtil.isFunctionDeclaration(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!TestUtil.isFunctionDeclaration(t.getScope()))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
313	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isAssignmentOp(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isAssignmentOp(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isAssignmentOp(t.getScope()))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
314	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isConstructorOp(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isConstructorOp(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isConstructorOp(t.getScope()))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
315	[BUG]  [BUGGY]  if(!c.inGlobalScope()  &&!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!c.inGlobalScope()  &&!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!c.inGlobalScope()  &&!t.inGlobalScope())  {	  if(!t.inGlobalScope()    &&    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
316	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  c.isGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  c.isGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  c.isGlobalScope())  {	  if(!t.inGlobalScope()    &&    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
317	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  c.inGlobalScope()  ||!c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  c.inGlobalScope()  ||!c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  c.inGlobalScope()  ||!c.inGlobalScope())  {	  if(!t.inGlobalScope()    &&    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
318	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||!t.inGlobalScope()  &&  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||!t.inGlobalScope()  &&  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||!t.inGlobalScope()  &&  t.getScope().hasVarCount())  {	  if(!t.inGlobalScope()    &&    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
319	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  &&  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  &&  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  &&  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {	  if(!t.inGlobalScope()    &&    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
320	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfgNode,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfgNode,  t.getScope());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfgNode,  t.getScope());	  NodeUtil.copyCurrentScope(c,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
321	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
322	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
323	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalScope()  ||  t.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
324	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(!t.inGlobalScope()    &&!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
325	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
326	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!LiveVariablesAnalysis.MIN_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!LiveVariablesAnalysis.MIN_VARIABLES_TO_ANALYZE)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!LiveVariablesAnalysis.MIN_VARIABLES_TO_ANALYZE)  {	  if(!t.inGlobalScope()    &&!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
327	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  t.inGlobalScope())  {	  if(t.inGlobalScope()    ||    c.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
328	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope())||  NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope())||  NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope())||  NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
329	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope())&&!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope())&&!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope())&&!NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
330	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope())&&  NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope())&&  NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope())&&  NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
331	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode!=  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    numUseWithinUseCfgNode    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
332	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  >  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  >  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  >  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    numUseWithinUseCfgNode    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
333	[BUG]  [BUGGY]  if(t.getScope()!=  null  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope()!=  null  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()!=  null  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
334	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getParent()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getParent()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getParent()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
335	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope())&&  NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope())&&  NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope())&&  NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
336	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasChildren()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasChildren()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasChildren()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
337	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasChildren())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasChildren())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
338	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasLocalVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasLocalVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarCount()  ||  t.getScope().hasLocalVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
339	[BUG]  [BUGGY]  NodeUtil.copyName(name,  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyName(name,  t.getScope().getVarCount());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyName(name,  t.getScope().getVarCount());	  NodeUtil.copyName(varName,    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
340	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  0);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  0);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyName(varName,  t.getScope().getVarCount(),  0);	  NodeUtil.copyName(varName,    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
341	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()  ==  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()  ==  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
342	[BUG]  [BUGGY]  NodeUtil.checkState(NodeUtil.mayHaveSideEffects(t));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.checkState(NodeUtil.mayHaveSideEffects(t));  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.checkState(NodeUtil.mayHaveSideEffects(t));	  NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
343	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t,  cfg);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(t,  cfg);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t,  cfg);	  NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
344	[BUG]  [BUGGY]  NodeUtil.redeclareVars(t,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.redeclareVars(t,  numUseWithinUseCfgNode);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.redeclareVars(t,  numUseWithinUseCfgNode);	  NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
345	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t,  cfa);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(t,  cfa);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t,  cfa);	  NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
346	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(t);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(t);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.redeclareVarsInsideBranch(t);	  NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
347	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  &&!LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  &&!LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().hasVarCount()  &&!LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(!t.inGlobalScope()    &&!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
348	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasChildren())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().hasChildren())  {	  if(!t.inGlobalScope()    &&!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
349	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasVars())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().hasVars())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().hasVars())  {	  if(!t.inGlobalScope()    &&!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
350	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isExpressionNode(t))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isExpressionNode(t))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isExpressionNode(t))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
351	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t)&&  NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t)&&  NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t)&&  NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
352	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t)&&!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t)&&!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t)&&!NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
353	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t)&&!NodeUtil.mayHaveSideEffects(t))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t)&&!NodeUtil.mayHaveSideEffects(t))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t)&&!NodeUtil.mayHaveSideEffects(t))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceReference());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceReference());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t.getSourceReference());	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
355	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getScope());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  n,  t.getScope());	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
356	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getCompiler());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getCompiler());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t.getCompiler());	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
357	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSource());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSource());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t.getSource());	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
358	[BUG]  [BUGGY]  if(c.inGlobalScope()  &&  t.isGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  &&  t.isGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  &&  t.isGlobalScope())  {	  if(c.inGlobalScope()    ||    t.isGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
359	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  t.isGlobalScope()  ||  c.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  t.isGlobalScope()  ||  c.hasChildren())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  t.isGlobalScope()  ||  c.hasChildren())  {	  if(c.inGlobalScope()    ||    t.isGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
360	[BUG]  [BUGGY]  if(!cfg.inGlobalScope()  ||  t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!cfg.inGlobalScope()  ||  t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!cfg.inGlobalScope()  ||  t.inGlobalScope())  {	  if(!c.inGlobalScope()    ||    t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
361	[BUG]  [BUGGY]  if(!cfa.inGlobalScope()  &&  t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!cfa.inGlobalScope()  &&  t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!cfa.inGlobalScope()  &&  t.inGlobalScope())  {	  if(!c.inGlobalScope()    ||    t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
362	[BUG]  [BUGGY]  cfa.enterScope(t,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  cfa.enterScope(t,  numUseWithinUseCfgNode);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	cfa.enterScope(t,  numUseWithinUseCfgNode);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
363	[BUG]  [BUGGY]  cfa.enterScope(t,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  cfa.enterScope(t,  inlinedNewDependencies);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	cfa.enterScope(t,  inlinedNewDependencies);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
364	[BUG]  [BUGGY]  cfa.enterScope(t,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  cfa.enterScope(t,  numUseWithinCfgNode);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	cfa.enterScope(t,  numUseWithinCfgNode);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
365	[BUG]  [BUGGY]  if(t.getParent()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getParent()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getParent()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalScope())  {	  if(t.getScope()!=    null    ||!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
366	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isFunctionPrototype())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.getScope().isFunctionPrototype())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.getScope().isFunctionPrototype())  {	  if(!t.inGlobalScope()    &&!t.getScope().isExtern())    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
367	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalVars())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalVars())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  c.inGlobalScope()  ||  c.inGlobalVars())  {	  if(c.inGlobalScope()    ||    t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
368	[BUG]  [BUGGY]  if(c.inGlobalScope()  &&  t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  &&  t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  &&  t.inGlobalScope())  {	  if(c.inGlobalScope()    ||    t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
369	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasChildren()  ||  numUseWithinCfgNode  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasChildren()  ||  numUseWithinCfgNode  <  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasChildren()  ||  numUseWithinCfgNode  <  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
370	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasParent())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasParent())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasParent())  {	  if(t.inGlobalScope()    ||    t.getScope().hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
371	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasChildren())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().hasChildren())  {	  if(!t.inGlobalScope()    ||!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
372	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasVars())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasVars())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().hasVars())  {	  if(!t.inGlobalScope()    ||!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
373	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasLocalVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasLocalVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().hasLocalVarCount())  {	  if(!t.inGlobalScope()    ||!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
374	[BUG]  [BUGGY]  if(!inGlobalScope()  &&  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!inGlobalScope()  &&  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!inGlobalScope()  &&  t.getScope().hasVarCount())  {	  if(s.inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
375	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  numUseWithinUseCfgNode  ==  t.getScope().getVarCount())  {	  if(!t.inGlobalScope()    &&    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
376	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  0  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  0  <  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||  0  <  t.getScope().getVarCount())  {	  if(!t.inGlobalScope()    &&    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
377	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().hasVarCount()  ||!t.inGlobalScope())  {	  if(!t.inGlobalScope()    &&    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
378	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getAnchor();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getAnchor();  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getAnchor();	  ControlFlowGraph    <    Node>    cfg    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
379	[BUG]  [BUGGY]  if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.getScope().inGlobalScope())  {	  if(!t.inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
380	[BUG]  [BUGGY]  NodeUtil.redeclareVars(t,  c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.redeclareVars(t,  c);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.redeclareVars(t,  c);	  NodeUtil.mayHaveSideEffects(t,    c);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
381	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(t,  c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(t,  c);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.redeclareVarsInsideBranch(t,  c);	  NodeUtil.mayHaveSideEffects(t,    c);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
382	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(c,  t)  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(c,  t)  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(c,  t)	  NodeUtil.mayHaveSideEffects(t,    c);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
383	[BUG]  [BUGGY]  NodeUtil.checkState(c.mayHaveSideEffects());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.checkState(c.mayHaveSideEffects());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.checkState(c.mayHaveSideEffects());	  NodeUtil.mayHaveSideEffects(t,    c);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
384	[BUG]  [BUGGY]  NodeUtil.removeChild(c,  t);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.removeChild(c,  t);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.removeChild(c,  t);	  NodeUtil.mayHaveSideEffects(t,    c);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
385	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(t.getScope().getVarCount()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(t.getScope().getVarCount()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
386	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount())&&!LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount())&&!LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount())&&!LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE)  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
387	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount())&&  NodeUtil.mayHaveSideEffects(t.getScope().getVar  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount())&&  NodeUtil.mayHaveSideEffects(t.getScope().getVar  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount())&&  NodeUtil.mayHaveSideEffects(t.getScope().getVar	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
388	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount())&&  NodeUtil.mayHaveSideEffects(t.getScope().getVarCount())  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount())&&  NodeUtil.mayHaveSideEffects(t.getScope().getVarCount())  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount())&&  NodeUtil.mayHaveSideEffects(t.getScope().getVarCount())	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
389	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped!=  null)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped!=  null)  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    escaped)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
390	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  ==  null)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  ==  null)  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    escaped)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
391	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  instanceof  GlobalVariableDef)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  instanceof  GlobalVariableDef)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  instanceof  GlobalVariableDef)  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    escaped)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
392	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    numUseWithinUseCfgNode    <    t.getScope().getVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
393	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVar(numUseWithinCfgNode))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVar(numUseWithinCfgNode))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVar(numUseWithinCfgNode))  {	  if(t.inGlobalScope()    ||    t.getScope().hasVars())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
394	[BUG]  [BUGGY]  if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()!=  null  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
395	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inLocalVariables())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inLocalVariables())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inLocalVariables())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
396	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&!NodeUtil.mayHaveSideEffects(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&!NodeUtil.mayHaveSideEffects(t.getScope().getVarCount()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  &&!NodeUtil.mayHaveSideEffects(t.getScope().getVarCount()))  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2    &&!NodeUtil.isFunctionDeclaration(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
397	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1  &&  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1  &&  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1  &&  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    2    &&    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
398	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getParent()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getParent()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getParent()))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
399	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isDeclared(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isDeclared(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isDeclared(t.getScope()))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
400	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getConstructor()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getConstructor()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getConstructor()))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
401	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  t);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  t);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfg,  t);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
402	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()!=  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2  &&  t.getScope().getVarCount()!=  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2    ||    t.getScope().getVarCount()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
403	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  4)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  4)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  4)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    4)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
404	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  4)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  4)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  4)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    4)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
405	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineNewDependencies);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
406	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
407	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfg);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
408	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >>  0;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >>  0;  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >>  0;	  NodeUtil.mayHaveSideEffects(t)&&    numUseWithinUseCfgNode    >    0;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
409	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >  4;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >  4;  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >  4;	  NodeUtil.mayHaveSideEffects(t)&&    numUseWithinUseCfgNode    >    0;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
410	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
411	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables()  ||  numUseWithinUseCfgNode  <  t.getScope().getVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasDeclaredVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
412	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.getScope().hasDeclaredVariables())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.getScope().hasDeclaredVariables())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.getScope().hasDeclaredVariables())  {	  if(t.inGlobalScope()    ||    t.getScope().hasDeclaredVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
413	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables()  ||!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables()  ||!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables()  ||!NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(t.inGlobalScope()    ||    t.getScope().hasDeclaredVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
414	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isLocal())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isLocal())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().isLocal())  {	  if(!t.inGlobalScope()    ||!t.getScope().isGlobal())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
415	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isFunctionDeclaration())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().isFunctionDeclaration())  {	  if(!t.inGlobalScope()    ||!t.getScope().isGlobal())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
416	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isUnknownScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isUnknownScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().isUnknownScope())  {	  if(!t.inGlobalScope()    ||!t.getScope().isGlobal())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
417	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarEnd())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().hasVarEnd())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().hasVarEnd())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarStart())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
418	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarStart()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasVarStart()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasVarStart()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarStart())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
419	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&!NodeUtil.mayHaveSideEffects(c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&!NodeUtil.mayHaveSideEffects(c);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t)&&!NodeUtil.mayHaveSideEffects(c);	  NodeUtil.mayHaveSideEffects(t)&&!NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
420	[BUG]  [BUGGY]  if(t.getScope()!=  null  ||  t.getScope().inGlobalScope()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope()!=  null  ||  t.getScope().inGlobalScope()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()!=  null  ||  t.getScope().inGlobalScope()  ||  t.getScope().hasVarCount())  {	  if(t.getScope().inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
421	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  ||  t.getScope().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().inGlobalScope()  ||  t.getScope().hasChildren())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  ||  t.getScope().hasChildren())  {	  if(t.getScope().inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
422	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getParent());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getParent());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfg,  t.getParent());	  NodeUtil.copyCurrentScope(cfg,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
423	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getScope(),  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getScope(),  inlineNewDependencies);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfg,  t.getScope(),  inlineNewDependencies);	  NodeUtil.copyCurrentScope(cfg,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
424	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
425	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getScope())||!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getScope())||!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getScope())||!NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&    NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
426	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  c.inGlobalScope()  ||  c.inGlobalVars())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  c.inGlobalScope()  ||  c.inGlobalVars())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  c.inGlobalScope()  ||  c.inGlobalVars())  {	  if(!t.inGlobalScope()    &&    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
427	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope())&&!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope())&&!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope())&&!NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
428	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!NodeUtil.isExpressionNode(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!NodeUtil.isExpressionNode(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!NodeUtil.isExpressionNode(t.getScope()))  {	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
429	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.getScope().isExtern())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.getScope().isExtern())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.getScope().isExtern())  {	  if(!t.inGlobalScope()    &&!t.getScope().isExtern())    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
430	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasDeclaredVariables()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasDeclaredVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
431	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScopeRoot();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScopeRoot();  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getScopeRoot();	  ControlFlowGraph    <    Node>    cfg    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
432	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScopeNode();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getScopeNode();  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getScopeNode();	  ControlFlowGraph    <    Node>    cfg    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
433	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConfig();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  ControlFlowGraph  <  Node>  cfg  =  t.getConfig();  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	ControlFlowGraph  <  Node>  cfg  =  t.getConfig();	  ControlFlowGraph    <    Node>    cfg    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
434	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(t,  cfg);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(t,  cfg);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.redeclareVarsInsideBranch(t,  cfg);	  NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
435	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t,  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(t,  def);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t,  def);	  NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
436	[BUG]  [BUGGY]  NodeUtil.checkState(NodeUtil.mayHaveSideEffects(t),  escaped);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.checkState(NodeUtil.mayHaveSideEffects(t),  escaped);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.checkState(NodeUtil.mayHaveSideEffects(t),  escaped);	  NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
437	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getReturnScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getReturnScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getReturnScope().inGlobalScope())  {	  if(!t.inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
438	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope())  {	  if(!t.inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
439	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getInitializingReturnScope())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getInitializingReturnScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getInitializingReturnScope())  {	  if(!t.inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
440	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  1  &&  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  1  &&  t.getScope().getVarCount()!=  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  1  &&  t.getScope().getVarCount()!=  2)  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
441	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&  NodeUtil.mayHaveSideEffects(t.getScope().getVarCount()))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&  NodeUtil.mayHaveSideEffects(t.getScope().getVarCount()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&  NodeUtil.mayHaveSideEffects(t.getScope().getVarCount()))  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
442	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  4  ||  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  4  ||  t.getScope().getVarCount()!=  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  4  ||  t.getScope().getVarCount()!=  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
443	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  2)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()!=  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()!=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
444	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >  2;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >  2;  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.mayHaveSideEffects(t)&&  numUseWithinUseCfgNode  >  2;	  NodeUtil.mayHaveSideEffects(t)&&    numUseWithinUseCfgNode    >    0;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
445	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount())||!NodeUtil.mayHaveSideEffects(t.getScope().getVarCount())  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount())||!NodeUtil.mayHaveSideEffects(t.getScope().getVarCount())  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount())||!NodeUtil.mayHaveSideEffects(t.getScope().getVarCount())	  if(!t.inGlobalScope()    &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
446	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inInGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inInGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.inGlobalScope()  ||!t.inInGlobalScope())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
447	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Action());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Action());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  Action());	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
448	[BUG]  [BUGGY]  if(t.getParent()!=  null  ||!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getParent()!=  null  ||!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getParent()!=  null  ||!t.getScope().inGlobalScope())  {	  if(t.getScope()!=    null    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
449	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  t.getScope().inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  t.getScope().inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  t.getScope().inGlobalScope()  ||  c.inGlobalScope())  {	  if(c.inGlobalScope()    ||    t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
450	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope())||!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope())||!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope())||!NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
451	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope())&&!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope())&&!NodeUtil.mayHaveSideEffects(t.getScope()))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope())&&!NodeUtil.mayHaveSideEffects(t.getScope()))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t.getScope()))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
452	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curr,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(curr,  t.getScope());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(curr,  t.getScope());	  NodeUtil.copyCurrentScope(c,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
453	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  >  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  >  0)  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    escaped)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
454	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  <=  true)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  <=  true)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||!t.inGlobalScope()  ||  escaped  <=  true)  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    escaped)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
455	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().isFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().isFunctionDeclaration())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().isFunctionDeclaration())  {	  if(t.inGlobalScope()    &&    t.getScope().getVarCount()    >    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
456	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()!=  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()!=  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()!=  1)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    2    ||    t.getScope().getVarCount()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
457	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()!=  2  &&  t.getScope().getVarCount()  ==  1)  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()!=    1)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
458	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  cfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  cfgNode);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyName(varName,  t.getScope().getVarCount(),  cfgNode);	  NodeUtil.copyName(varName,    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
459	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(varName,  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyNameAnnotations(varName,  t.getScope().getVarCount());  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyNameAnnotations(varName,  t.getScope().getVarCount());	  NodeUtil.copyName(varName,    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
460	[BUG]  [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  4);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyName(varName,  t.getScope().getVarCount(),  4);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyName(varName,  t.getScope().getVarCount(),  4);	  NodeUtil.copyName(varName,    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
461	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getScope(),  cfa);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t.getScope(),  cfa);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfg,  t.getScope(),  cfa);	  NodeUtil.copyCurrentScope(cfg,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
462	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||!t.inGlobalScope()  ||  c.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||!t.inGlobalScope()  ||  c.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||!t.inGlobalScope()  ||  c.inGlobalScope())  {	  if(t.inGlobalScope()    ||!t.inGlobalScope()    ||    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
463	[BUG]  [BUGGY]  if(t.getScope()  ==  null  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope()  ==  null  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope()  ==  null  ||!t.inGlobalScope()  ||!t.inGlobalVariables())  {	  if(!t.inGlobalScope()    ||!t.inGlobalScope()    ||!t.inGlobalVariables())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
464	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(c,  t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(c,  t);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.redeclareVarsInsideBranch(c,  t);	  NodeUtil.mayHaveSideEffects(t,    c);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
465	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  c.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(c))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  c.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(c))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  c.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(c))  {	  if(!t.inGlobalScope()    &&    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
466	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  c.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(c))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  c.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(c))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  c.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(c))  {	  if(!t.inGlobalScope()    &&    c.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
467	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isLocalFunctionDeclaration(t))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!TestUtil.isLocalFunctionDeclaration(t))  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!TestUtil.isLocalFunctionDeclaration(t))  {	  if(!t.inGlobalScope()    &&!TestUtil.isFunctionDeclaration(t))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
468	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasDeclaredVariables())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().hasDeclaredVariables())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().hasDeclaredVariables())  {	  if(!t.inGlobalScope()    ||!t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
469	[BUG]  [BUGGY]  if(c.inGlobalScope()  ||  t.isGlobalScope()  ||  t.getScope().getVarCount()  <  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(c.inGlobalScope()  ||  t.isGlobalScope()  ||  t.getScope().getVarCount()  <  1)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(c.inGlobalScope()  ||  t.isGlobalScope()  ||  t.getScope().getVarCount()  <  1)  {	  if(c.inGlobalScope()    ||    t.isGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
470	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!t.inGlobalScope())  {	  if(!t.inGlobalScope()    &&!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
471	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!t.inGlobalScope()  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!t.inGlobalScope()  ||!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&!t.inGlobalScope()  &&!t.inGlobalScope()  ||!t.inGlobalScope())  {	  if(!t.inGlobalScope()    &&!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
472	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getReturnScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getReturnScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getReturnScope().inGlobalScope())  {	  if(t.getScope().inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
473	[BUG]  [BUGGY]  if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getVarCount()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getVarCount()  >  0)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getVarCount()  >  0)  {	  if(t.getScope().inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
474	[BUG]  [BUGGY]  if(t.getScope().isGlobal()  ||!t.getScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().isGlobal()  ||!t.getScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().isGlobal()  ||!t.getScope().inGlobalScope())  {	  if(t.getScope().inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
475	[BUG]  [BUGGY]  cfg.enterScope(t);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  cfg.enterScope(t);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	cfg.enterScope(t);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
476	[BUG]  [BUGGY]  cfa.enterScope(t,  n);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  cfa.enterScope(t,  n);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	cfa.enterScope(t,  n);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
477	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  2  ||  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
478	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||  t.getScope().getVarCount()  ==  1  ||  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
479	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1  ||  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1  ||  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  1  ||  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()    ==    1    ||    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
480	[BUG]  [BUGGY]  if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getReturnScope().inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getReturnScope().inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getReturnScope().inGlobalScope())  {	  if(!t.getScope().inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
481	[BUG]  [BUGGY]  if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getVarCount())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.getScope().inGlobalScope()  ||!t.getScope().inGlobalScope()  ||!t.getVarCount())  {	  if(!t.getScope().inGlobalScope()    ||!t.getScope().inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
482	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasOneChild())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasOneChild())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasOneChild())  {	  if(t.inGlobalScope()    ||    t.getScope().hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
483	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfg);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfg);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfg);	  NodeUtil.copyCurrentScope(c);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
484	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfgNode);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfgNode);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfgNode);	  NodeUtil.copyCurrentScope(c);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
485	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfg,  c);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.copyCurrentScope(cfg,  c);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.copyCurrentScope(cfg,  c);	  NodeUtil.copyCurrentScope(c);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
486	[BUG]  [BUGGY]  NodeUtil.clearCurrentScope(c);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.clearCurrentScope(c);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.clearCurrentScope(c);	  NodeUtil.copyCurrentScope(c);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
487	[BUG]  [BUGGY]  if(t.getParent()!=  null  ||!t.inGlobalScope())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getParent()!=  null  ||!t.inGlobalScope())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getParent()!=  null  ||!t.inGlobalScope())  {	  if(t.getScope()!=    null    ||!t.inGlobalScope())    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
488	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(t)&&!NodeUtil.mayHaveSideEffects(t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(t)&&!NodeUtil.mayHaveSideEffects(t);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeUtil.redeclareVarsInsideBranch(t)&&!NodeUtil.mayHaveSideEffects(t);	  NodeUtil.mayHaveSideEffects(t)&&!NodeUtil.mayHaveSideEffects(t);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
489	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  ||!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  2)  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
490	[BUG]  [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  &&  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  &&  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  &&  t.getScope().getVarCount()  ==  1  &&  t.getScope().getVarCount()  ==  2)  {	  if(!t.inGlobalScope()    &&    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
491	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasChildren()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().hasChildren()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().hasChildren()  ||  t.getScope().hasVarCount())  {	  if(t.inGlobalScope()    ||    t.getScope().hasVarCount()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
492	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  null);  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	NodeTraversal.traverse(compiler,  t,  this,  null);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
493	[BUG]  [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  4  &&  t.getScope().getVarCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  4  &&  t.getScope().getVarCount()  ==  2)  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.inGlobalScope()  ||  t.getScope().getVarCount()!=  4  &&  t.getScope().getVarCount()  ==  2)  {	  if(t.inGlobalScope()    ||    t.getScope().getVarCount()!=    2    &&    t.getScope().getVarCount()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
494	[BUG]  [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isAll())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(!t.inGlobalScope()  ||!t.getScope().isAll())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(!t.inGlobalScope()  ||!t.getScope().isAll())  {	  if(!t.inGlobalScope()    ||!t.getScope().isGlobal())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
495	[BUG]  [BUGGY]  if(t.getScope().isGlobal()  ||  t.getScope().hasVarCount())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {      [BUGGY]  if(t.getScope().isGlobal()  ||  t.getScope().hasVarCount())  {  [BUGGY]      return;  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	127	127	3	replace	if(t.getScope().isGlobal()  ||  t.getScope().hasVarCount())  {	  if(t.getScope().inGlobalScope()    ||    t.getScope().hasVarCount())    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
