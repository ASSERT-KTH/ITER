bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(cfgNode,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(cfgNode,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(cfgNode,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
2	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  cfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  cfgNode,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  cfgNode,  reachingUses);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
3	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  def);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
4	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
5	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  inlinedCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  inlinedCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  inlinedCfgNode);	  FlowSensitiveInlineVariables(compiler,    this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
6	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  this.numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  this.numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  this.numUseWithinUseCfgNode);	  FlowSensitiveInlineVariables(compiler,    this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
7	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  this.cfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  this.cfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  this.cfgNode);	  FlowSensitiveInlineVariables(compiler,    this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
8	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(this.inlinedNewDependencies,  compiler);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(this.inlinedNewDependencies,  compiler);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(this.inlinedNewDependencies,  compiler);	  FlowSensitiveInlineVariables(compiler,    this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
9	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  mapping);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  mapping);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  mapping);	  FlowSensitiveInlineVariables(compiler,    this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
10	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  mapping,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  mapping,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  mapping,  inlinedNewDependencies);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
11	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  mapping.inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  mapping.inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  mapping.inlinedNewDependencies);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
12	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  mapping,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  mapping,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  mapping,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
13	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  mapping.inlineDependencies);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  mapping.inlineDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  mapping.inlineDependencies);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
14	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  mapping);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  mapping);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  mapping);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
15	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(mapping,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(mapping,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(mapping,  inlinedNewDependencies);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
16	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  reachingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
17	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  def);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
18	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  reachingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
19	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  startingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  startingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  startingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
20	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  mapping);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  mapping);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  mapping);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
21	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  defMetadata);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
22	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(cfgNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(cfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(cfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
23	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode,  reachingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
24	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  numUseWithinUseCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
25	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  numUseWithinUseCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
26	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(cfgNode,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(cfgNode,  numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(cfgNode,  numUseWithinUseCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
27	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode,  defMetadata);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
28	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ARRAY  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ARRAY  +  1;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ARRAY  +  1;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
29	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_DEPENDENCY;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_DEPENDENCY;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_LIST_DEPENDENCY;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
30	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.EMPTY_LIST_ARRAY;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.EMPTY_LIST_ARRAY;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.EMPTY_LIST_ARRAY;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
31	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ARRAY  |  Collections.EMPTY_LIST_SET;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ARRAY  |  Collections.EMPTY_LIST_SET;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ARRAY  |  Collections.EMPTY_LIST_SET;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
32	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ADDRESS;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ADDRESS;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ADDRESS;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
33	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_SET;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_SET;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_LIST_SET;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
34	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode  +  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode  +  1);	  this.inlinedNewDependencies    =    Lists.newArrayList(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
35	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode  -  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode  -  1);	  this.inlinedNewDependencies    =    Lists.newArrayList(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
36	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinCfgNode  +  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinCfgNode  +  1);	  this.inlinedNewDependencies    =    Lists.newArrayList(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
37	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode,  candidates);	  this.inlinedNewDependencies    =    Lists.newArrayList(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
38	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.EMPTY_SET;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.EMPTY_SET;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.EMPTY_SET;	  this.inlinedNewDependencies    =    Collections.EMPTY_SET;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
39	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  spreadingCandiates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  spreadingCandiates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  spreadingCandiates);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    spreadingCandiates);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
40	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  spreadingCandiates,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  spreadingCandiates,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  spreadingCandiates,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    spreadingCandiates);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
41	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlines,  spreadingCandiates,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlines,  spreadingCandiates,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlines,  spreadingCandiates,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    spreadingCandiates);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
42	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedCandiates,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedCandiates,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedCandiates,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    spreadingCandiates);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
43	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  *  1);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  *  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  *  1);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies    +    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
44	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  +  2);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  +  2);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  +  2);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies    +    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
45	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  +  3);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  +  3);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  +  3);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies    +    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
46	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  /  1);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  /  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  /  1);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies    +    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
47	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  +  4);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  +  4);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  +  4);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies    +    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
48	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinUseCfgNode);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
49	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(defMetadata);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(defMetadata);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
50	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.newArrayList(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.newArrayList(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.newArrayList(inlinedNewDependencies);	  this.inlinedNewDependencies    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
51	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.newLinkedList();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.newLinkedList();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.newLinkedList();	  this.inlinedNewDependencies    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
52	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  ArrayList();	  this.inlinedNewDependencies    =    Collections.emptySet();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
53	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(inlinedNewDependencies);	  this.inlinedNewDependencies    =    new    java.util.ArrayList    <    AbstractCompiler>();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
54	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(1);	  this.inlinedNewDependencies    =    new    java.util.ArrayList    <    AbstractCompiler>();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
55	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(2);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(2);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(2);	  this.inlinedNewDependencies    =    new    java.util.ArrayList    <    AbstractCompiler>();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
56	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(0);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(0);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(0);	  this.inlinedNewDependencies    =    new    java.util.ArrayList    <    AbstractCompiler>();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
57	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  TreeSet  <  AbstractCompiler>(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  TreeSet  <  AbstractCompiler>(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  TreeSet  <  AbstractCompiler>(inlinedNewDependencies);	  this.inlinedNewDependencies    =    new    TreeSet    <    AbstractCompiler>();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
58	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  reachingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
59	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  mapping);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  mapping);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  mapping);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
60	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  spreadingCandiates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  spreadingCandiates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  spreadingCandiates);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
61	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  defMetadata);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
62	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  matchingCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  matchingCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  matchingCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
63	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  matchingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  matchingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  matchingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
64	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler);	  FlowSensitiveInlineVariables(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
65	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(this.inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(this.inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(this.inlinedNewDependencies);	  FlowSensitiveInlineVariables(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
66	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(inlinedNewDependencies,  reachingUses);	  FlowSensitiveInlineVariables(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
67	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  candidates);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(inlinedNewDependencies,  candidates);	  FlowSensitiveInlineVariables(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
68	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(numUseWithinUseCfgNode);	  FlowSensitiveInlineVariables(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
69	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler.inlineDependencies);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler.inlineDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler.inlineDependencies);	  FlowSensitiveInlineVariables(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
70	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  reachingDef);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
71	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  reachingUses,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  reachingUses,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  reachingUses,  inlinedNewDependencies);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
72	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  reachingCandiates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  reachingCandiates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  reachingCandiates);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
73	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  approachingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  approachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  approachingDef);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
74	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  startingCandiates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  startingCandiates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  startingCandiates);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
75	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(2);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(2);	  this.inlinedNewDependencies    =    Sets.newHashSet(1);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
76	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode);	  this.inlinedNewDependencies    =    Sets.newHashSet(1);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
77	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(3);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(3);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(3);	  this.inlinedNewDependencies    =    Sets.newHashSet(1);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
78	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(4);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(4);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(4);	  this.inlinedNewDependencies    =    Sets.newHashSet(1);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
79	[BUG]  [BUGGY]  This.inlinedNewDependencies  =  Lists.newArrayList();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  This.inlinedNewDependencies  =  Lists.newArrayList();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	This.inlinedNewDependencies  =  Lists.newArrayList();	  if(inlinedNewDependencies    ==    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
80	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(2);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(2);	  inlinedNewDependencies    =    Lists.newArrayList(1);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
81	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(5);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(5);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(5);	  inlinedNewDependencies    =    Lists.newArrayList(1);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
82	[BUG]  [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  for(int  i  =  0;  i  <  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  for(int  i  =  0;  i  <  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  for(int  i  =  0;  i  <	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
83	[BUG]  [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  for(int  i  =  0;  i  <  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  for(int  i  =  0;  i  <  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  for(int  i  =  0;  i  <	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
84	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(inlinedNewDependencies,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(inlinedNewDependencies,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(inlinedNewDependencies,  candidates);	  this.inlinedNewDependencies    =    new    LinkedList    <    AbstractCompiler>(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
85	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(compiler);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(compiler);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(compiler);	  this.inlinedNewDependencies    =    new    LinkedList    <    AbstractCompiler>(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
86	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(this.inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(this.inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(this.inlinedNewDependencies);	  this.inlinedNewDependencies    =    new    LinkedList    <    AbstractCompiler>(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
87	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  reachingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
88	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  mapping);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  mapping);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  mapping);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
89	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  startingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  startingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  startingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
90	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(context,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(context,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(context,  defMetadata);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
91	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(2);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(2);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(2);	  this.inlinedNewDependencies    =    new    LinkedList    <    AbstractCompiler>(8);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
92	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(6);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(6);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(6);	  this.inlinedNewDependencies    =    new    LinkedList    <    AbstractCompiler>(8);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
93	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(0);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(0);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(0);	  this.inlinedNewDependencies    =    new    LinkedList    <    AbstractCompiler>(8);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
94	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(candidates,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(candidates,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(candidates,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
95	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(this.inlinedNewDependencies,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(this.inlinedNewDependencies,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(this.inlinedNewDependencies,  candidates);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
96	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode,  candidates);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
97	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(annotations,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(annotations,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(annotations,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
98	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(null,  candidates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(null,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(null,  candidates);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
99	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  candidates,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  candidates,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  candidates,  reachingUses);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
100	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newLinkedList(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newLinkedList(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newLinkedList(inlinedNewDependencies);	  inlinedNewDependencies    =    Lists.newLinkedList();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
101	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newHashSet();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newHashSet();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newHashSet();	  inlinedNewDependencies    =    Lists.newLinkedList();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
102	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  def);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    compiler);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
103	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  INVALID_DEPENDENCY);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  INVALID_DEPENDENCY);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  INVALID_DEPENDENCY);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    compiler);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
104	[BUG]  [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDe  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDe  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDe	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    Predicates.checkNotNull(inlinedNewDependencies);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
105	[BUG]  [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDepen  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDepen  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDepen	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    Predicates.checkNotNull(inlinedNewDependencies);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
106	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(5);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(5);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(5);	  this.inlinedNewDependencies    =    new    LinkedList    <    AbstractCompiler>(4);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
107	[BUG]  [BUGGY]  inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies);	  inlinedNewDependencies    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
108	[BUG]  [BUGGY]  inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode);	  inlinedNewDependencies    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
109	[BUG]  [BUGGY]  inlinedNewDependencies  =  Sets.newLinkedHashSet();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Sets.newLinkedHashSet();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Sets.newLinkedHashSet();	  inlinedNewDependencies    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
110	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinCfgNode,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinCfgNode,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinCfgNode,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
111	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinCfgNode  +  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinCfgNode  +  1);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
112	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinCfgNode,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinCfgNode,  reachingUses);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
113	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinCfgNode,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinCfgNode,  numUseWithinCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinCfgNode,  numUseWithinCfgNode);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
114	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  0,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  0,  numUseWithinCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  0,  numUseWithinCfgNode);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
115	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  0);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  0);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  0);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
116	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode  +  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode  +  1);	  inlinedNewDependencies    =    Lists.newArrayList(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
117	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode,  candidates);	  inlinedNewDependencies    =    Lists.newArrayList(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
118	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(numUseWithinCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(numUseWithinCfgNode  +  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(numUseWithinCfgNode  +  1);	  inlinedNewDependencies    =    Lists.newArrayList(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
119	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode  -  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode  -  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode  -  1);	  inlinedNewDependencies    =    Lists.newArrayList(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
120	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode,  reachingUses);	  inlinedNewDependencies    =    Lists.newArrayList(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
121	[BUG]  [BUGGY]  inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();	  if(this.inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
122	[BUG]  [BUGGY]  This.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  This.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	This.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();	  if(this.inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
123	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(0);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(0);	  this.inlinedNewDependencies    =    Lists.newArrayListWithCapacity(2);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
124	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinUseCfgNode);	  this.inlinedNewDependencies    =    Lists.newArrayListWithCapacity(2);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
125	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(4);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(4);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(4);	  this.inlinedNewDependencies    =    Lists.newArrayListWithCapacity(2);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
126	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(3);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(3);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(3);	  this.inlinedNewDependencies    =    Lists.newArrayListWithCapacity(2);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
127	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(5);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(5);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(5);	  this.inlinedNewDependencies    =    Lists.newArrayListWithCapacity(2);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
128	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineDependencies,  reachingUses,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineDependencies,  reachingUses,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineDependencies,  reachingUses,  reachingDef);	  FlowSensitiveInlineVariables(compiler,    inlineDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
129	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  reachingUses,  inlineDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  reachingUses,  inlineDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  reachingUses,  inlineDependencies);	  FlowSensitiveInlineVariables(compiler,    inlineDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
130	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineDpendencies,  reachingUses,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineDpendencies,  reachingUses,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineDpendencies,  reachingUses,  reachingDef);	  FlowSensitiveInlineVariables(compiler,    inlineDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
131	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    inlineDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
132	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineDependencies,  reachingUses,  reachingCandiates);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineDependencies,  reachingUses,  reachingCandiates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineDependencies,  reachingUses,  reachingCandiates);	  FlowSensitiveInlineVariables(compiler,    inlineDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
133	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(  reachingUses,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(  reachingUses,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(  reachingUses,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
134	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  reachingUses,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  reachingUses,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  reachingUses,  candidates);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
135	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode,  reachingUses);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
136	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(goingUses,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(goingUses,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(goingUses,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
137	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  reachingUses,  candidate);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  reachingUses,  candidate);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  reachingUses,  candidate);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
138	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(ingUses,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(ingUses,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(ingUses,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
139	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables(compiler);    candidates.addAll(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
140	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables();  candidates.addAll(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables();  candidates.addAll(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables();  candidates.addAll(inlinedNewDependencies);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables(compiler);    candidates.addAll(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
141	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies);  candidates.addAll(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies);  candidates.addAll(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies);  candidates.addAll(inlinedNewDependencies);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables(compiler);    candidates.addAll(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
142	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata);  candidates.addAll(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata);  candidates.addAll(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata);  candidates.addAll(inlinedNewDependencies);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables(compiler);    candidates.addAll(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
143	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);  candidates.addAll(inlinedDependencies);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);  candidates.addAll(inlinedDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);  candidates.addAll(inlinedDependencies);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables(compiler);    candidates.addAll(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
144	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler.getParent());  candidates.addAll(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler.getParent());  candidates.addAll(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler.getParent());  candidates.addAll(inlinedNewDependencies);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables(compiler);    candidates.addAll(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
145	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(0);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(0);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(0);	  this.inlinedNewDependencies    =    new    ArrayList    <    AbstractCompiler>(4);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
146	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(5);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(5);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(5);	  this.inlinedNewDependencies    =    new    ArrayList    <    AbstractCompiler>(4);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
147	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  reachingUses,  inlinedDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  reachingUses,  inlinedDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  reachingUses,  inlinedDependencies);	  FlowSensitiveInlineVariables(compiler,    inlinedDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
148	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedDependencies,  reachingUses,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedDependencies,  reachingUses,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedDependencies,  reachingUses,  reachingDef);	  FlowSensitiveInlineVariables(compiler,    inlinedDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
149	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlines,  reachingUses,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlines,  reachingUses,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlines,  reachingUses,  reachingDef);	  FlowSensitiveInlineVariables(compiler,    inlinedDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
150	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  compiler,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  compiler,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(inlinedNewDependencies,  compiler,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    inlinedDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
151	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  defMetadata,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  defMetadata,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  defMetadata,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    inlinedDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
152	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.unmodifiableSet(compiler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.unmodifiableSet(compiler);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.unmodifiableSet(compiler);	  this.inlinedNewDependencies    =    Collections.unmodifiableSet(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
153	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.unmodifiableSet(compiler,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.unmodifiableSet(compiler,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.unmodifiableSet(compiler,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Collections.unmodifiableSet(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
154	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.unmodifiableSet(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.unmodifiableSet(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.unmodifiableSet(inlinedNewDependencies);	  this.inlinedNewDependencies    =    Collections.unmodifiableSet(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
155	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.unmodifiableSet(this.inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.unmodifiableSet(this.inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.unmodifiableSet(this.inlinedNewDependencies);	  this.inlinedNewDependencies    =    Collections.unmodifiableSet(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
156	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.unmodifiableSet(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.unmodifiableSet(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.unmodifiableSet(inlinedNewDependencies);	  this.inlinedNewDependencies    =    Collections.unmodifiableSet(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
157	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.unmodifiableSet(defMetadata);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.unmodifiableSet(defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.unmodifiableSet(defMetadata);	  this.inlinedNewDependencies    =    Collections.unmodifiableSet(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
158	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode,  reachingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
159	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  numUseWithinCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  numUseWithinCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
160	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(cfgNode,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(cfgNode,  numUseWithinCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(cfgNode,  numUseWithinCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
161	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode,  defMetadata);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
162	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  numUseWithinCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  numUseWithinCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
163	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(6);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(6);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(6);	  this.inlinedNewDependencies    =    Sets.newHashSet(5);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
164	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(8);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(8);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(8);	  this.inlinedNewDependencies    =    Sets.newHashSet(5);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
165	[BUG]  [BUGGY]  This.inlinedNewDependencies  =  Sets.newHashSet();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  This.inlinedNewDependencies  =  Sets.newHashSet();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	This.inlinedNewDependencies  =  Sets.newHashSet();	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
166	[BUG]  [BUGGY]  InlinedDependencies  =  Sets.newHashSet();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  InlinedDependencies  =  Sets.newHashSet();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	InlinedDependencies  =  Sets.newHashSet();	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
167	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  defMetadata);	  FlowSensitiveInlineVariables(compiler,    defMetadata,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
168	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  defMetadata,  inlinedNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  defMetadata,  inlinedNewDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  defMetadata,  inlinedNewDependencies,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    defMetadata,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
169	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  def);	  FlowSensitiveInlineVariables(compiler,    defMetadata,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
170	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  compiler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  compiler);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  compiler);	  FlowSensitiveInlineVariables(compiler,    defMetadata,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
171	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  defMetadata,  inlinedDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  defMetadata,  inlinedDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  defMetadata,  inlinedDependencies,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    defMetadata,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
172	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  defMetadata,  inlinedCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  defMetadata,  inlinedCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  defMetadata,  inlinedCfgNode);	  FlowSensitiveInlineVariables(compiler,    defMetadata,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
173	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  compiler,  inlinedNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  compiler,  inlinedNewDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  compiler,  inlinedNewDependencies,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    defMetadata,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
174	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(defMetadata.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(defMetadata.length);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(defMetadata.length);	  inlinedNewDependencies    =    Lists.newArrayList(defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
175	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(defMetadata.size());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(defMetadata.size());  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(defMetadata.size());	  inlinedNewDependencies    =    Lists.newArrayList(defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
176	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(defMetadata,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(defMetadata,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(defMetadata,  candidates);	  inlinedNewDependencies    =    Lists.newArrayList(defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
177	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(inlinedNewDependencies);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
178	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
179	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(this.inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(this.inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(this.inlinedNewDependencies);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
180	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(false);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(false);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(false);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
181	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
182	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode());  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode());	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
183	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  candidates);	  inlinedNewDependencies    =    Lists.newArrayList(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
184	[BUG]  [BUGGY]  InlinedNewDependencies  inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  InlinedNewDependencies  inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	InlinedNewDependencies  inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies);	  inlinedNewDependencies    =    Lists.newArrayList(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
185	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  reachingDef);	  FlowSensitiveInlineVariables(compiler,    inlineNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
186	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  reachingUses,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  reachingUses,  inlineNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  reachingUses,  inlineNewDependencies);	  FlowSensitiveInlineVariables(compiler,    inlineNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
187	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  reachingCandiates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  reachingCandiates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  reachingCandiates);	  FlowSensitiveInlineVariables(compiler,    inlineNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
188	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineDynamicDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineDynamicDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineDynamicDependencies,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    inlineNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
189	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(2);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(2);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(2);	  this.inlinedNewDependencies    =    Lists.newArrayList(0);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
190	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(5);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(5);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(5);	  this.inlinedNewDependencies    =    Lists.newArrayList(0);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
191	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
192	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinUseCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinUseCfgNode  +  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinUseCfgNode  +  1);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
193	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinUseCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinUseCfgNode,  reachingUses);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
194	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode,  numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinUseCfgNode,  numUseWithinUseCfgNode);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
195	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  0,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  0,  numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  0,  numUseWithinUseCfgNode);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
196	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  reachingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
197	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
198	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  mapping);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  mapping);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  mapping);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
199	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  useCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  useCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  useCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
200	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  startingMode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  startingMode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  startingMode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
201	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  startingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  startingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  startingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
202	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
203	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  mapping);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  mapping);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  mapping);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
204	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  compiler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  compiler);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  compiler);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
205	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  spreadingCandiates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  spreadingCandiates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  spreadingCandiates);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
206	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  startingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  startingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  startingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
207	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
208	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newLinkedList(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newLinkedList(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newLinkedList(inlinedNewDependencies);	  this.inlinedNewDependencies    =    Lists.newLinkedList();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
209	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newHashSet();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newHashSet();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newHashSet();	  this.inlinedNewDependencies    =    Lists.newLinkedList();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
210	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  reachingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
211	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  defMetadata);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
212	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  null);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  null);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
213	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  def);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
214	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
215	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  startingMode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  startingMode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  startingMode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
216	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  inlinedCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  inlinedCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(inlinedNewDependencies,  inlinedCfgNode);	  FlowSensitiveInlineVariables(inlinedNewDependencies,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
217	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(this.inlinedNewDependencies,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(this.inlinedNewDependencies,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(this.inlinedNewDependencies,  inlinedNewDependencies);	  FlowSensitiveInlineVariables(inlinedNewDependencies,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
218	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(inlinedNewDependencies,  defMetadata);	  FlowSensitiveInlineVariables(inlinedNewDependencies,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
219	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(inlinedDependencies,  inlinedNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(inlinedDependencies,  inlinedNewDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(inlinedDependencies,  inlinedNewDependencies,  reachingUses);	  FlowSensitiveInlineVariables(inlinedNewDependencies,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
220	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  inlinedCfgNodes);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  inlinedCfgNodes);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(inlinedNewDependencies,  inlinedCfgNodes);	  FlowSensitiveInlineVariables(inlinedNewDependencies,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
221	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.EMPTY_LIST;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.EMPTY_LIST;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.EMPTY_LIST;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
222	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_LIST  |  Collections.EMPTY_LIST;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
223	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
224	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies,  numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies,  numUseWithinUseCfgNode);	  this.inlinedNewDependencies    =    Lists.newArrayListWithCapacity(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
225	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(defMetadata);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(defMetadata);	  this.inlinedNewDependencies    =    Lists.newArrayListWithCapacity(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
226	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode);	  this.inlinedNewDependencies    =    Lists.newArrayListWithCapacity(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
227	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(this.inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(this.inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(this.inlinedNewDependencies);	  this.inlinedNewDependencies    =    Lists.newArrayListWithCapacity(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
228	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newArrayListWithCapacity(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newArrayListWithCapacity(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newArrayListWithCapacity(inlinedNewDependencies);	  this.inlinedNewDependencies    =    Lists.newArrayListWithCapacity(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
229	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(numUseWithinUseCfgNode);	  this.inlinedNewDependencies    =    Sets.newHashSetWithoutCfgNodes();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
230	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(compiler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(compiler);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(compiler);	  this.inlinedNewDependencies    =    Sets.newHashSetWithoutCfgNodes();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
231	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(useCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(useCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(useCfgNode);	  this.inlinedNewDependencies    =    Sets.newHashSetWithoutCfgNodes();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
232	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(defMetadata);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(defMetadata);	  this.inlinedNewDependencies    =    Sets.newHashSetWithoutCfgNodes();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
233	[BUG]  [BUGGY]  these.inlinedNewDependencies  =  Sets.newHashSet();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  these.inlinedNewDependencies  =  Sets.newHashSet();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	these.inlinedNewDependencies  =  Sets.newHashSet();	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
234	[BUG]  [BUGGY]  InlinedNewDependencies  inlinedNewDependencies  =  Sets.newHashSet();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  InlinedNewDependencies  inlinedNewDependencies  =  Sets.newHashSet();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	InlinedNewDependencies  inlinedNewDependencies  =  Sets.newHashSet();	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
235	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(true);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(true);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(true);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(false);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
236	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(false,  true);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(false,  true);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(false,  true);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(false);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
237	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(true,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(true,  false);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(true,  false);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(false);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
238	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(false,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(false,  false);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(false,  false);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(false);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
239	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(context,  compiler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(context,  compiler);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(context,  compiler);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(context);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
240	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  context);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  context);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  context);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(context);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
241	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(context,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(context,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(context,  reachingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(context);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
242	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  candidates);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  candidates);	  this.inlinedNewDependencies    =    Lists.newArrayList(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
243	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  numUseWithinUseCfgNode);	  this.inlinedNewDependencies    =    Lists.newArrayList(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
244	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(this.inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(this.inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(this.inlinedNewDependencies);	  this.inlinedNewDependencies    =    Lists.newArrayList(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
245	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  cfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  cfgNode);	  this.inlinedNewDependencies    =    Lists.newArrayList(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
246	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(6);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(6);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(6);	  this.inlinedNewDependencies    =    new    ArrayList    <    AbstractCompiler>(8);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
247	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  candidates);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  candidates);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
248	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  defMetadata);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
249	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  null);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  null);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
250	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  callingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  callingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  callingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
251	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  def);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
252	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  startingCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  startingCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  startingCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
253	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
254	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  def);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
255	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(defMaskNode,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(defMaskNode,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(defMaskNode,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
256	[BUG]  [BUGGY]  This.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  This.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	This.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
257	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  outlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  outlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  outlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
258	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  lineNumber);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  lineNumber);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  lineNumber);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
259	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  reachingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  reachingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlines);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
260	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  mapping);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  mapping);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  mapping);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlines);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
261	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  compiler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  compiler);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  compiler);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlines);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
262	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  spreadingCandiates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  spreadingCandiates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  spreadingCandiates);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlines);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
263	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  startingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  startingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  startingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlines);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
264	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(this.inlinedNewDependencies,  this.numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(this.inlinedNewDependencies,  this.numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(this.inlinedNewDependencies,  this.numUseWithinUseCfgNode);	  this.inlinedNewDependencies    =    Sets.newHashSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
265	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(this.inlinedNewDependencies,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(this.inlinedNewDependencies,  numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(this.inlinedNewDependencies,  numUseWithinUseCfgNode);	  this.inlinedNewDependencies    =    Sets.newHashSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
266	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(this.inlinedNewDependencies,  inlinedCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(this.inlinedNewDependencies,  inlinedCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(this.inlinedNewDependencies,  inlinedCfgNode);	  this.inlinedNewDependencies    =    Sets.newHashSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
267	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compilers,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compilers,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compilers,  inlinedNewDependencies);	  FlowSensitiveInlineVariables(inlinedNewDependencies,    compiler);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
268	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode(),  defMetadata);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode(),  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode(),  defMetadata);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
269	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode(),  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode(),  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode(),  def);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
270	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler.numUseWithinUseCfgNode());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler.numUseWithinUseCfgNode());  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler.numUseWithinUseCfgNode());	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
271	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata.numUseWithinUseCfgNode());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata.numUseWithinUseCfgNode());  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata.numUseWithinUseCfgNode());	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
272	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode()  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode()  +  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode()  +  1);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
273	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode(),  cfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode(),  cfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode(),  cfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
274	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(0);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(0);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(2);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
275	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(1);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(2);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
276	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_PREDICATE;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_PREDICATE;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_LIST_PREDICATE;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST_LIST;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
277	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_EXTENDS;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_EXTENDS;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_LIST_EXTENDS;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST_LIST;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
278	[BUG]  [BUGGY]  if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    System.arraycopy(inlinedNewDependencies,    0,    inlinedNewDe    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
279	[BUG]  [BUGGY]  if(compiler  ==  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(compiler  ==  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(compiler  ==  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    System.arraycopy(inlinedNewDependencies,    0,    inlinedNewDe    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
280	[BUG]  [BUGGY]  if(compiler!=  null)  {  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(compiler!=  null)  {  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(compiler!=  null)  {  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    System.arraycopy(inlinedNewDependencies,    0,    inlinedNewDe    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
281	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  defMetadata);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  defMetadata);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    fillCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
282	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  def);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    fillCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
283	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  reachingUses);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    fillCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
284	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  DEF_METADATA);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  DEF_METADATA);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  DEF_METADATA);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    fillCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
285	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode()  +  1);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode()  +  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode()  +  1);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    fillCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
286	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  parser);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  parser);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  parser);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    fillCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
287	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlinedCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlinedCfgNode,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlinedCfgNode,  reachingUses);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    inlinedCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
288	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedCfgNode,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedCfgNode,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedCfgNode,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    inlinedCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
289	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlinedCfgNode,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlinedCfgNode,  numUseWithinUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlinedCfgNode,  numUseWithinUseCfgNode);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    inlinedCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
290	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlinedCfgNode,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlinedCfgNode,  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlinedCfgNode,  def);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    inlinedCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
291	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.newLinkedHashSet();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.newLinkedHashSet();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.newLinkedHashSet();	  this.inlinedNewDependencies    =    Collections.newHashSet();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
292	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  HashSet  <  AbstractCompiler>(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  HashSet  <  AbstractCompiler>(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  HashSet  <  AbstractCompiler>(inlinedNewDependencies);	  this.inlinedNewDependencies    =    new    HashSet    <    AbstractCompiler>();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
293	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode  +  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode  +  1);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
294	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode  -  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode  -  1);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
295	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode,  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode,  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode,  1);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
296	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode,  reachingUses);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
297	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode  *  2);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode  *  2);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinCfgNode  *  2);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
298	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newLinkedHashSet(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newLinkedHashSet(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newLinkedHashSet(inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newLinkedHashSet();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
299	[BUG]  [BUGGY]  if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
300	[BUG]  [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  inline  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  inline  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  inline	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
301	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.synchronizedSet(this.inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.synchronizedSet(this.inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.synchronizedSet(this.inlinedNewDependencies);	  this.inlinedNewDependencies    =    Collections.synchronizedSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
302	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.synchronizedSet(this.inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.synchronizedSet(this.inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.synchronizedSet(this.inlinedNewDependencies);	  this.inlinedNewDependencies    =    Collections.synchronizedSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
303	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedCfgNode);	  this.inlinedNewDependencies    =    Collections.synchronizedSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
304	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  cfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  cfgNode);	  this.inlinedNewDependencies    =    Collections.synchronizedSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
305	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedTreeDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedTreeDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedTreeDependencies);	  this.inlinedNewDependencies    =    Collections.synchronizedSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
306	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  compiler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  compiler);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  compiler);	  this.inlinedNewDependencies    =    Collections.synchronizedSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
307	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinUseCfgNode(1));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinUseCfgNode(1));  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(numUseWithinUseCfgNode(1));	  this.inlinedNewDependencies    =    Lists.newArrayListWithCapacity(1);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
308	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  approachingUses,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  approachingUses,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  approachingUses,  inlinedNewDependencies);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    approachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
309	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  approachingUses,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  approachingUses,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  approachingUses,  reachingDef);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    approachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
310	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  candidates);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  candidates);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    approachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
311	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  approachingDependencies,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  approachingDependencies,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  approachingDependencies,  inlinedNewDependencies);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    approachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
312	[BUG]  [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
313	[BUG]  [BUGGY]  if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
314	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newLinkedList();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newLinkedList();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newLinkedList();	  this.inlinedNewDependencies    =    Sets.newArrayList();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
315	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(8);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(8);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(8);	  this.inlinedNewDependencies    =    Lists.newArrayList(6);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
316	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(4);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(4);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(4);	  this.inlinedNewDependencies    =    Lists.newArrayList(6);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
317	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(1);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(0);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
318	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(0L);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(0L);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(0L);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(0);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
319	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode  +  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode  +  1);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(0);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
320	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(2);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(2);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(0);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
321	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(inlinedNewDependencies,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(inlinedNewDependencies,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(inlinedNewDependencies,  candidates);	  this.inlinedNewDependencies    =    new    ArrayList    <    AbstractCompiler>(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
322	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  LinkedHashSet  <  AbstractCompiler>(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  LinkedHashSet  <  AbstractCompiler>(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  LinkedHashSet  <  AbstractCompiler>(inlinedNewDependencies);	  this.inlinedNewDependencies    =    new    ArrayList    <    AbstractCompiler>(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
323	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(this.inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(this.inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(this.inlinedNewDependencies);	  this.inlinedNewDependencies    =    new    ArrayList    <    AbstractCompiler>(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
324	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(defMetadata);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(defMetadata);	  this.inlinedNewDependencies    =    new    ArrayList    <    AbstractCompiler>(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
325	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(inlinedNewDependencies,  candidate);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(inlinedNewDependencies,  candidate);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(inlinedNewDependencies,  candidate);	  this.inlinedNewDependencies    =    new    ArrayList    <    AbstractCompiler>(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
326	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.newArrayList(0);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.newArrayList(0);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.newArrayList(0);	  this.inlinedNewDependencies    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
327	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode  +  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode  +  1);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
328	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.unmodifiableSet(inlinedNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.unmodifiableSet(inlinedNewDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.unmodifiableSet(inlinedNewDependencies,  reachingUses);	  this.inlinedNewDependencies    =    Collections.unmodifiableSet(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
329	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(7);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(7);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(7);	  this.inlinedNewDependencies    =    new    ArrayList    <    AbstractCompiler>(8);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
330	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(8);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(8);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(8);	  this.inlinedNewDependencies    =    new    java.util.ArrayList    <    AbstractCompiler>();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
331	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(4);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(4);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  java.util.ArrayList  <  AbstractCompiler>(4);	  this.inlinedNewDependencies    =    new    java.util.ArrayList    <    AbstractCompiler>();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
332	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  candidate);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  candidate);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  candidate);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
333	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  inlineCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingUses,  inlineCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
334	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  HashSet  <  AbstractCompiler>(8);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  HashSet  <  AbstractCompiler>(8);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  HashSet  <  AbstractCompiler>(8);	  this.inlinedNewDependencies    =    new    HashSet    <    AbstractCompiler>();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
335	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(candidates);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
336	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(candidates,  outlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(candidates,  outlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(candidates,  outlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
337	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinCfgNode,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinCfgNode,  candidates);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
338	[BUG]  [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  in  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  in  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  in	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
339	[BUG]  [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  in  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  in  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  in	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
340	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlinedCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlinedCfgNode  +  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlinedCfgNode  +  1);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    inlinedCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
341	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  1);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
342	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  Integer.toString(numUseWithinCfgNode));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  Integer.toString(numUseWithinCfgNode));  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  Integer.toString(numUseWithinCfgNode));	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
343	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  Integer.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  Integer.MAX_VALUE);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  Integer.MAX_VALUE);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
344	[BUG]  [BUGGY]  if(this.inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(this.inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(this.inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }	  if(inlinedNewDependencies    ==    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
345	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.newHashSet(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.newHashSet(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.newHashSet(inlinedNewDependencies);	  this.inlinedNewDependencies    =    Collections.newHashSet();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
346	[BUG]  [BUGGY]  if(compiler  ==  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(compiler  ==  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(compiler  ==  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    Predicates.checkNotNull(inlinedNewDependencies);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
347	[BUG]  [BUGGY]  if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNu  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNu  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNu	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    Predicates.checkNotNull(inlinedNewDependencies);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
348	[BUG]  [BUGGY]  if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    Predicates.checkNotNull(inlinedNewDependencies);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
349	[BUG]  [BUGGY]  if(compiler  ==  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNu  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(compiler  ==  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNu  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(compiler  ==  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNu	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    Predicates.checkNotNull(inlinedNewDependencies);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
350	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(context,  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(context,  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(context,  def);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(context);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
351	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  reachingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
352	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  reachingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
353	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  callingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  callingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  callingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
354	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  spreadingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  spreadingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  spreadingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
355	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  matchingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  matchingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  matchingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
356	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(numUseWithinCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(numUseWithinCfgNode);	  inlinedNewDependencies    =    Lists.newArrayList(0);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
357	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  inlinedNewDependencies  =  Sets.newHashSet();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  inlinedNewDependencies  =  Sets.newHashSet();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  inlinedNewDependencies  =  Sets.newHashSet();	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
358	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  candidate);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  candidate);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  candidate);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
359	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  def);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
360	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  defMetadata);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
361	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  startingCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  startingCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  startingCfgNode);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
362	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  candidates);	  FlowSensitiveInlineVariables(compiler,    inlineNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
363	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  candidate);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  candidate);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  candidate);	  FlowSensitiveInlineVariables(compiler,    inlineNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
364	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  def);	  FlowSensitiveInlineVariables(compiler,    inlineNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
365	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineNewDependencies,  reachingUses,  defMetadata);	  FlowSensitiveInlineVariables(compiler,    inlineNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
366	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineDependencies,  reachingUses,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineDependencies,  reachingUses,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineDependencies,  reachingUses,  candidates);	  FlowSensitiveInlineVariables(compiler,    inlineDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
367	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(4);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(4);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(4);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(0);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
368	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  cfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  cfgNode  +  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  cfgNode  +  1);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
369	[BUG]  [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
370	[BUG]  [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
371	[BUG]  [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
372	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(this);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(this);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(this);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
373	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(defMetadata);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(defMetadata);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
374	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.synchronizedSet(inlinedNewDependencies);	  this.inlinedNewDependencies    =    Collections.synchronizedSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
375	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.synchronizedSet(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.synchronizedSet(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.synchronizedSet(inlinedNewDependencies);	  this.inlinedNewDependencies    =    Collections.synchronizedSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
376	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  candidates);	  this.inlinedNewDependencies    =    Collections.synchronizedSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
377	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newArrayList(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newArrayList(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newArrayList(inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newArrayList();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
378	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(defReachingVariables,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(defReachingVariables,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(defReachingVariables,  defMetadata);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
379	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinCfgNode());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinCfgNode());  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  numUseWithinCfgNode());	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    fillCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
380	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  startingDef);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  startingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  startingDef);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    fillCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
381	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  candidates);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillCfgNode(),  candidates);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    fillCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
382	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  Set  <  AbstractCompiler>();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  Set  <  AbstractCompiler>();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  Set  <  AbstractCompiler>();	  this.inlinedNewDependencies    =    new    LinkedHashSet    <    AbstractCompiler>();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
383	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(defMetadata,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(defMetadata,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(defMetadata,  reachingUses);	  inlinedNewDependencies    =    Lists.newArrayList(defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
384	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  mapping.inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  mapping.inlineNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  mapping.inlineNewDependencies);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
385	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(inlinedNewDependencies,  def);	  FlowSensitiveInlineVariables(inlinedNewDependencies,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
386	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  inlinedTreeDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  inlinedTreeDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(inlinedNewDependencies,  inlinedTreeDependencies);	  FlowSensitiveInlineVariables(inlinedNewDependencies,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
387	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);  candidates.addAll(inlinedNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);  candidates.addAll(inlinedNewDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);  candidates.addAll(inlinedNewDependencies,  reachingUses);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables(compiler);    candidates.addAll(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
388	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(7);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(7);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(7);	  this.inlinedNewDependencies    =    new    LinkedList    <    AbstractCompiler>(8);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
389	[BUG]  [BUGGY]  if(compiler!=  null)  {  if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(compiler!=  null)  {  if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(compiler!=  null)  {  if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }	  if(this.inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
390	[BUG]  [BUGGY]  if(this.inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(this.inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(this.inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }	  if(this.inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
391	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ARRAY,  inlinedNewDependencies;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ARRAY,  inlinedNewDependencies;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ARRAY,  inlinedNewDependencies;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
392	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ARRAY,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ARRAY,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_LIST_ARRAY,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
393	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(inlinedNewDependencies,  candidate);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(inlinedNewDependencies,  candidate);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(inlinedNewDependencies,  candidate);	  this.inlinedNewDependencies    =    new    LinkedList    <    AbstractCompiler>(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
394	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mappingNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mappingNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mappingNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
395	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defReachingVariables);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defReachingVariables);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defReachingVariables);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
396	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(inlinedDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(inlinedDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(inlinedDependencies,  reachingUses);	  FlowSensitiveInlineVariables(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
397	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
398	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(6);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(6);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(6);	  inlinedNewDependencies    =    Lists.newArrayList(1);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
399	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(4);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(4);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(4);	  inlinedNewDependencies    =    Lists.newArrayList(1);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
400	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinUseCfgNode,  reachingUses);	  this.inlinedNewDependencies    =    Lists.newArrayList(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
401	[BUG]  [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  for(int  i  =  0;  i  <  in  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  for(int  i  =  0;  i  <  in  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  for(int  i  =  0;  i  <  in	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
402	[BUG]  [BUGGY]  System.arraycopy(inlinedNewDependencies,  0,  inlinedNewDe  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  System.arraycopy(inlinedNewDependencies,  0,  inlinedNewDe  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	System.arraycopy(inlinedNewDependencies,  0,  inlinedNewDe	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    System.arraycopy(inlinedNewDependencies,    0,    inlinedNewDe    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
403	[BUG]  [BUGGY]  if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  System.arra  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  System.arra  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  System.arra	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    System.arraycopy(inlinedNewDependencies,    0,    inlinedNewDe    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
404	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_INCLUDES;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_INCLUDES;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_LIST_INCLUDES;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST_LIST;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
405	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(outlinedNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(outlinedNewDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(outlinedNewDependencies,  reachingUses);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
406	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_SET_ARRAY;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_SET_ARRAY;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_SET_ARRAY;	  this.inlinedNewDependencies    =    Collections.emptySet();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
407	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  inlinedNewDependencies  =  Sets.newHash  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  inlinedNewDependencies  =  Sets.newHash  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  inlinedNewDependencies  =  Sets.newHash	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
408	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  inlinedNewDependencies  =  Sets.new  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  inlinedNewDependencies  =  Sets.new  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  inlinedNewDependencies  =  Sets.new	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
409	[BUG]  [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashMap();  }  else  {  inlinedNewDependencies  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashMap();  }  else  {  inlinedNewDependencies  =  Sets.newHashSet();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashMap();  }  else  {  inlinedNewDependencies  =  Sets.newHashSet();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
410	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies,  candidates);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies,  candidates);	  this.inlinedNewDependencies    =    Lists.newArrayListWithCapacity(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
411	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies,  numUseWithinCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies,  numUseWithinCfgNode);	  this.inlinedNewDependencies    =    Lists.newArrayListWithCapacity(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
412	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlineCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlineCfgNode);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
413	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies,  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies,  candidates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies,  candidates);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
414	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(def);	  this.inlinedNewDependencies    =    Sets.newHashSetWithoutCfgNodes();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
415	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes(inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSetWithoutCfgNodes();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
416	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithoutUndefinedDependencies();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithoutUndefinedDependencies();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSetWithoutUndefinedDependencies();	  this.inlinedNewDependencies    =    Sets.newHashSetWithoutCfgNodes();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
417	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode(),  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode(),  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode(),  def);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
418	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode(),  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode(),  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinUseCfgNode(),  reachingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
419	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode(),  defMetadata);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode(),  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode(),  defMetadata);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
420	[BUG]  [BUGGY]  if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
421	[BUG]  [BUGGY]  if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDe  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDe  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(compiler!=  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDe	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
422	[BUG]  [BUGGY]  if(compiler  ==  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDe  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(compiler  ==  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDe  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(compiler  ==  null)  {  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDe	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
423	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(3);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(3);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(3);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(2);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
424	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(4);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(4);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(4);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(2);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
425	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST  +  1;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_LIST  +  1;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
426	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinelyNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinelyNewDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinelyNewDependencies,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    inlinedDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
427	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineDNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineDNewDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineDNewDependencies,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    inlinedDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
428	[BUG]  [BUGGY]  inlinedNewDependencies  =  Sets.newArrayList();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Sets.newArrayList();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Sets.newArrayList();	  inlinedNewDependencies    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
429	[BUG]  [BUGGY]  inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Sets.newHashSetWithoutCfgNodes();	  inlinedNewDependencies    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
430	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  Integer.toString(numUseWithinUseCfgNode));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  Integer.toString(numUseWithinUseCfgNode));  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  Integer.toString(numUseWithinUseCfgNode));	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
431	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  this.inlinedDependencies,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
432	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  startingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  startingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  startingDef);	  FlowSensitiveInlineVariables(compiler,    this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
433	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  approachingUses);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  approachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  approachingUses);	  FlowSensitiveInlineVariables(compiler,    this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
434	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  reachingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlines);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
435	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineDuplicates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineDuplicates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineDuplicates);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlines);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
436	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedRependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedRependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedRependencies,  reachingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
437	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  reachingUses);	  this.inlinedNewDependencies    =    Lists.newArrayList(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
438	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  candidate);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  candidate);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  candidate);	  this.inlinedNewDependencies    =    Lists.newArrayList(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
439	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
440	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  defMetadata,  reachingUses,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  defMetadata,  reachingUses,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  defMetadata,  reachingUses,  inlinedNewDependencies);	  FlowSensitiveInlineVariables(compiler,    defMetadata,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
441	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  defMetadata);	  FlowSensitiveInlineVariables(compiler,    defMetadata,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
442	[BUG]  [BUGGY]  This.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  This.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	This.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
443	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  startingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  startingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  startingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
444	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  defMetadata,  approachingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  defMetadata,  approachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  defMetadata,  approachingUses);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    approachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
445	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  startingDependencies,  approachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  startingDependencies,  approachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  startingDependencies,  approachingUses);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    approachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
446	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  inlinedNewDependencies  =  Sets.newHash  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  inlinedNewDependencies  =  Sets.newHash  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  inlinedNewDependencies  =  Sets.newHash	  if(inlinedNewDependencies    ==    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
447	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  inlinedNewDependencies  =  Sets.new  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  inlinedNewDependencies  =  Sets.new  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  inlinedNewDependencies  =  Sets.new	  if(inlinedNewDependencies    ==    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
448	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  spreadingCandiates,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  spreadingCandiates,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  spreadingCandiates,  inlinedNewDependencies);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    spreadingCandiates);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
449	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  defMetadata,  spreadingCandiates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  defMetadata,  spreadingCandiates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  defMetadata,  spreadingCandiates);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    spreadingCandiates);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
450	[BUG]  [BUGGY]  if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDependencies);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDependencies);  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDependencies);  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    Predicates.checkNotNull(inlinedNewDependencies);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
451	[BUG]  [BUGGY]  if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDepen  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDepen  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDepen	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    Predicates.checkNotNull(inlinedNewDependencies);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
452	[BUG]  [BUGGY]  if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDe  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDe  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  Predicates.checkNotNull(inlinedNewDe	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    Predicates.checkNotNull(inlinedNewDependencies);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
453	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  this.inlinedCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  this.inlinedCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  this.inlinedCfgNode);	  FlowSensitiveInlineVariables(compiler,    this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
454	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  inlinedCharacters);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  inlinedCharacters);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  inlinedCharacters);	  FlowSensitiveInlineVariables(compiler,    this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
455	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  inlineCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  this.inlinedNewDependencies,  inlineCfgNode);	  FlowSensitiveInlineVariables(compiler,    this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
456	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(inlinedNewDependencies,  inlinedCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(inlinedNewDependencies,  inlinedCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(inlinedNewDependencies,  inlinedCfgNode);	  this.inlinedNewDependencies    =    new    LinkedList    <    AbstractCompiler>(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
457	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(inlinedNewDependencies,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(inlinedNewDependencies,  inlineCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  LinkedList  <  AbstractCompiler>(inlinedNewDependencies,  inlineCfgNode);	  this.inlinedNewDependencies    =    new    LinkedList    <    AbstractCompiler>(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
458	[BUG]  [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList();  }	  if(inlinedNewDependencies    ==    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
459	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newTreeSet();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newTreeSet();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newTreeSet();	  this.inlinedNewDependencies    =    Sets.newLinkedHashSet();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
460	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  callingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  callingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  defMetadata,  callingUses);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
461	[BUG]  [BUGGY]  InlinedNewDependencies  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  InlinedNewDependencies  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	InlinedNewDependencies  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(inlinedNewDependencies);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
462	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  TreeSet  <  AbstractCompiler>(8);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  TreeSet  <  AbstractCompiler>(8);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  TreeSet  <  AbstractCompiler>(8);	  this.inlinedNewDependencies    =    new    LinkedList    <    AbstractCompiler>(8);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
463	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  -  1);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  -  1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies  -  1);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies    +    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
464	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  mapping.inlinedNewDependencies,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  mapping.inlinedNewDependencies,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  mapping.inlinedNewDependencies,  inlinedNewDependencies);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
465	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  crossingDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  crossingDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  crossingDependencies);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
466	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(mapping,  inlinedNewDependencies,  compiler);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(mapping,  inlinedNewDependencies,  compiler);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(mapping,  inlinedNewDependencies,  compiler);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
467	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  callingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  callingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlineCfgNode,  callingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
468	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(7);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(7);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(7);	  this.inlinedNewDependencies    =    Sets.newHashSet(5);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
469	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  inlinedNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  inlinedNewDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(inlinedNewDependencies,  inlinedNewDependencies,  reachingUses);	  FlowSensitiveInlineVariables(inlinedNewDependencies,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
470	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  defMetadata);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies,  defMetadata);	  this.inlinedNewDependencies    =    Lists.newArrayList(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
471	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineApplyingUses,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineApplyingUses,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineApplyingUses,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    inlineDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
472	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  startingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  startingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  startingDef);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
473	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  closingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  closingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingUses,  closingDef);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
474	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(1L);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(1L);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(1L);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(0);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
475	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  startingDef);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  startingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(inlinedNewDependencies,  startingDef);	  FlowSensitiveInlineVariables(inlinedNewDependencies,    compiler);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
476	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  mapping);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  mapping);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(inlinedNewDependencies,  mapping);	  FlowSensitiveInlineVariables(inlinedNewDependencies,    compiler);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
477	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  matchingDef);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(inlinedNewDependencies,  matchingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(inlinedNewDependencies,  matchingDef);	  FlowSensitiveInlineVariables(inlinedNewDependencies,    compiler);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
478	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(numUseWithinCfgNode);	  this.inlinedNewDependencies    =    Lists.newArrayListWithCapacity(1);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
479	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithinCfgNodes();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSetWithinCfgNodes();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSetWithinCfgNodes();	  this.inlinedNewDependencies    =    Sets.newHashSetWithoutCfgNodes();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
480	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  TreeSet  <  AbstractCompiler>(1);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  TreeSet  <  AbstractCompiler>(1);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  TreeSet  <  AbstractCompiler>(1);	  this.inlinedNewDependencies    =    new    LinkedList    <    AbstractCompiler>(1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
481	[BUG]  [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashMap();  }  else  {  inlinedNewDependencies  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashMap();  }  else  {  inlinedNewDependencies  =  Sets.newHashSet();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashMap();  }  else  {  inlinedNewDependencies  =  Sets.newHashSet();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
482	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode,  def);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode,  def);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode,  def);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
483	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode,  reachingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
484	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlines,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlines,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlines,  defMetadata);	  FlowSensitiveInlineVariables(compiler,    defMetadata,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
485	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedDependencies,  defMetadata);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedDependencies,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedDependencies,  defMetadata);	  FlowSensitiveInlineVariables(compiler,    defMetadata,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
486	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST?  Collections.EMPTY_LIST  :  Collections.EMPTY_LIST;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST?  Collections.EMPTY_LIST  :  Collections.EMPTY_LIST;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_LIST?  Collections.EMPTY_LIST  :  Collections.EMPTY_LIST;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
487	[BUG]  [BUGGY]  if(inline)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  inline  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inline)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  inline  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inline)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  inline	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
488	[BUG]  [BUGGY]  if(inlined)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  inline  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlined)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  inline  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlined)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  inline	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
489	[BUG]  [BUGGY]  if(inlined)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlined)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlined)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
490	[BUG]  [BUGGY]  if(inline)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inline)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inline)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
491	[BUG]  [BUGGY]  if(inlined)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlined)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlined)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  for(int  i  =  0;  i  <	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
492	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(inlineCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(inlineCfgNode);	  this.inlinedNewDependencies    =    Lists.newArrayList(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
493	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(defMetadata);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(defMetadata);	  this.inlinedNewDependencies    =    Lists.newArrayList(numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
494	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinelyDependencies,  reachingUses,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinelyDependencies,  reachingUses,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinelyDependencies,  reachingUses,  reachingDef);	  FlowSensitiveInlineVariables(compiler,    inlinedDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
495	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineDupdencies,  reachingUses,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineDupdencies,  reachingUses,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineDupdencies,  reachingUses,  reachingDef);	  FlowSensitiveInlineVariables(compiler,    inlinedDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
496	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineApplyUses,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineApplyUses,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineApplyUses,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    inlinedDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
497	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  reachingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
498	[BUG]  [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies);  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies);  }	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
499	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  spreadingCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  spreadingCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  spreadingCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
500	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.newArrayListWithCapacity(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.newArrayListWithCapacity(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.newArrayListWithCapacity(inlinedNewDependencies);	  this.inlinedNewDependencies    =    Collections.newArrayList();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
501	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  crossingCandiates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  crossingCandiates);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  crossingCandiates);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    spreadingCandiates);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
502	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  fallingCandiates,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  fallingCandiates,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  fallingCandiates,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    spreadingCandiates);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
503	[BUG]  [BUGGY]  these.inlinedNewDependencies  =  Lists.newArrayList();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  these.inlinedNewDependencies  =  Lists.newArrayList();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	these.inlinedNewDependencies  =  Lists.newArrayList();	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
504	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(false,  defMetadata);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(false,  defMetadata);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(false,  defMetadata);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(false);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
505	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(false,  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(false,  null);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(false,  null);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(false);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
506	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(inlinedNewDependencies,  inlinedCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(inlinedNewDependencies,  inlinedCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(inlinedNewDependencies,  inlinedCfgNode);	  this.inlinedNewDependencies    =    new    ArrayList    <    AbstractCompiler>(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
507	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(inlinedNewDependencies,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(inlinedNewDependencies,  inlineCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  ArrayList  <  AbstractCompiler>(inlinedNewDependencies,  inlineCfgNode);	  this.inlinedNewDependencies    =    new    ArrayList    <    AbstractCompiler>(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
508	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(def.numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(def.numUseWithinCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(def.numUseWithinCfgNode);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
509	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(def.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayListWithCapacity(def.length);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayListWithCapacity(def.length);	  inlinedNewDependencies    =    Lists.newArrayListWithCapacity(numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
510	[BUG]  [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList()	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
511	[BUG]  [BUGGY]  if(compiler!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(compiler!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(compiler!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
512	[BUG]  [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
513	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  inlinedCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  inlinedCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  inlinedCfgNode);	  this.inlinedNewDependencies    =    Collections.synchronizedSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
514	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  inlinedDependencies);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  inlinedDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.synchronizedSet(this.inlinedNewDependencies,  inlinedDependencies);	  this.inlinedNewDependencies    =    Collections.synchronizedSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
515	[BUG]  [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newArrayList();  }  else  {  inlinedNewDependencies  =  Lists.newArrayList();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    }    else    {    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
516	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(containedDependencies,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(containedDependencies,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(containedDependencies,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
517	[BUG]  [BUGGY]  &&  this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  &&  this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	&&  this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    System.arraycopy(inlinedNewDependencies,    0,    inlinedNewDe    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
518	[BUG]  [BUGGY]  &&  this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  &&  this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	&&  this.inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    System.arraycopy(inlinedNewDependencies,    0,    inlinedNewDe    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
519	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  matchingDef);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  matchingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  inlines,  matchingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    inlines);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
520	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  this.inlinedCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  this.inlinedCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  this.inlinedCfgNode);	  this.inlinedNewDependencies    =    Sets.newHashSet(this.inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
521	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);  candidates.addAll(inlinedNewDependencies,  inlinedCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);  candidates.addAll(inlinedNewDependencies,  inlinedCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);  candidates.addAll(inlinedNewDependencies,  inlinedCfgNode);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables(compiler);    candidates.addAll(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
522	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);  candidates.addAll(inlinedNewDependencies,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);  candidates.addAll(inlinedNewDependencies,  inlineCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  candidates  =  new  FlowSensitiveInlineVariables(compiler);  candidates.addAll(inlinedNewDependencies,  inlineCfgNode);	  FlowSensitiveInlineVariables    candidates    =    new    FlowSensitiveInlineVariables(compiler);    candidates.addAll(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
523	[BUG]  [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(defMetadata.values());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  inlinedNewDependencies  =  Lists.newArrayList(defMetadata.values());  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	inlinedNewDependencies  =  Lists.newArrayList(defMetadata.values());	  inlinedNewDependencies    =    Lists.newArrayList(defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
524	[BUG]  [BUGGY]  This.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  This.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	This.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList();	  if(inlinedNewDependencies    ==    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
525	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList()  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList()  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Lists.newArrayList();  inlinedNewDependencies  =  Lists.newArrayList()	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Lists.newArrayList();    inlinedNewDependencies    =    Lists.newArrayList();    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
526	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  crossingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  crossingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlinedNewDependencies,  crossingUses);	  FlowSensitiveInlineVariables(compiler,    inlinedNewDependencies,    approachingUses);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
527	[BUG]  [BUGGY]  FlowSensitiveInlineVariables  inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables  inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables  inlinedNewDependencies  =  Lists.newArrayList(inlinedNewDependencies);	  inlinedNewDependencies    =    Lists.newArrayList(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
528	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode(),  useCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode(),  useCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode(),  useCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
529	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode());  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(numUseWithinCfgNode());	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(numUseWithinUseCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
530	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.newHashSetWithCapacity(inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.newHashSetWithCapacity(inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.newHashSetWithCapacity(inlinedNewDependencies);	  this.inlinedNewDependencies    =    Collections.newHashSet();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
531	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineReachingDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(compiler,  inlineReachingDependencies,  reachingUses);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(compiler,  inlineReachingDependencies,  reachingUses);	  FlowSensitiveInlineVariables(compiler,    inlineNewDependencies,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
532	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  TreeSet  <  AbstractCompiler>(4);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  TreeSet  <  AbstractCompiler>(4);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  TreeSet  <  AbstractCompiler>(4);	  this.inlinedNewDependencies    =    new    LinkedList    <    AbstractCompiler>(4);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
533	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_DUPLICATE;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.EMPTY_LIST_DUPLICATE;  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.EMPTY_LIST_DUPLICATE;	  this.inlinedNewDependencies    =    Collections.EMPTY_LIST_LIST;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
534	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Collections.unmodifiableSet(compilers);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Collections.unmodifiableSet(compilers);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Collections.unmodifiableSet(compilers);	  this.inlinedNewDependencies    =    Collections.unmodifiableSet(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
535	[BUG]  [BUGGY]  if(inlined)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  for(int  i  =  0;  i  <  inline  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlined)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  for(int  i  =  0;  i  <  inline  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlined)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  else  {  for(int  i  =  0;  i  <  inline	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
536	[BUG]  [BUGGY]  if(inlined)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  if(inlined)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	if(inlined)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
537	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHash  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHash  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies!=  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHash	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
538	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHash  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHash  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet();  if(inlinedNewDependencies  ==  null)  {  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHash	  if(inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    else    {    for(int    i    =    0;    i    <    inline    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
539	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  cfgNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  cfgNode,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  cfgNode,  reachingDef);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
540	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinCfgNode,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinCfgNode,  cfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(numUseWithinCfgNode,  cfgNode);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    cfgNode);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
541	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(7);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Lists.newArrayList(7);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Lists.newArrayList(7);	  this.inlinedNewDependencies    =    Lists.newArrayList(6);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
542	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlineCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  inlineCfgNode);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
543	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillInUseCfgNode());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillInUseCfgNode());  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(inlinedNewDependencies,  fillInUseCfgNode());	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    fillCfgNode());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
544	[BUG]  [BUGGY]  InlinedNewDependencies  =  Sets.newHashSet();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  InlinedNewDependencies  =  Sets.newHashSet();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	InlinedNewDependencies  =  Sets.newHashSet();	  inlinedNewDependencies    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
545	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  inlinedNewDependencies);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
546	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  closingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  closingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  startingDef,  closingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    startingDef);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
547	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  defUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  defUseCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  defUseCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
548	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  defUse);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  defUse);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  defUse);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
549	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  defCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  defCfgNode);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(defMetadata,  defCfgNode);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
550	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  reachingDef);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  new  FlowSensitiveInlineVariables(compiler,  mapping,  reachingDef);	  this.inlinedNewDependencies    =    new    FlowSensitiveInlineVariables(compiler,    mapping);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
551	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet();  inlinedNewDependencies  =  Sets.newHashSet();  }	  if(this.inlinedNewDependencies!=    null)    {    this.inlinedNewDependencies    =    Sets.newHashSet();    inlinedNewDependencies    =    Sets.newHashSet();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
552	[BUG]  [BUGGY]  InlinedNewDependencies  =  Lists.newArrayList();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  InlinedNewDependencies  =  Lists.newArrayList();  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	InlinedNewDependencies  =  Lists.newArrayList();	  inlinedNewDependencies    =    Lists.newLinkedList();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
553	[BUG]  [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  defNewDependencies);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  defNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	this.inlinedNewDependencies  =  Sets.newHashSet(defMetadata,  defNewDependencies);	  this.inlinedNewDependencies    =    Sets.newHashSet(inlinedNewDependencies,    defMetadata);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
554	[BUG]  [BUGGY]  FlowSensitiveInlineVariables(defMetadata,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  FlowSensitiveInlineVariables(AbstractCompiler  compiler)  {  this.compiler  =  compiler;      [BUGGY]  FlowSensitiveInlineVariables(defMetadata,  inlinedNewDependencies);  [BUGGY]        [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler)  AbstractCompiler  compiler  [VARIABLES]  AbstractCompiler  compiler  Set  inlinedNewDependencies  boolean  ControlFlowGraph  cfg  Node  def  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  List  candidates  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	122	122	3	replace	FlowSensitiveInlineVariables(defMetadata,  inlinedNewDependencies);	  FlowSensitiveInlineVariables(inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
