bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef.analyze();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
2	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild());  reachingDef.analyze();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
3	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
4	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingUses.analyze();  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingUses.analyze();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingUses.analyze();  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild());  reachingUses.analyze();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
6	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef  =  new  MustBeReachingVariableUse(cfg,  t.getScopeRoot().getLastChil  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef  =  new  MustBeReachingVariableUse(cfg,  t.getScopeRoot().getLastChil  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingDef  =  new  MustBeReachingVariableUse(cfg,  t.getScopeRoot().getLastChil	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(null,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(null,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(null,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(null,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(null,  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(null,  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  null,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  null,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  null,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(null,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(null,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(null,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
14	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
16	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
17	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
18	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
20	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
21	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
22	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(cfg,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(cfg,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(cfg,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(cfg,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(cfg,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getLastChild(),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(cfg,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(cfg,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(cfg,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(cfg,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(cfg,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(cfg,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(cfg,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  cfg.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  cfg.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  cfg.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    cfg.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates,  cfg.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates,  cfg.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates,  cfg.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    cfg.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    cfg.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
31	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot(),  cfg.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot(),  cfg.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot(),  cfg.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    cfg.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
32	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfg.traverse(t.getScopeRoot(),  new  GatherCandiates()).traverse(compiler,  cfg.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  cfg.traverse(t.getScopeRoot(),  new  GatherCandiates()).traverse(compiler,  cfg.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  cfg.traverse(t.getScopeRoot(),  new  GatherCandiates()).traverse(compiler,  cfg.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    cfg.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
33	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot(),  t.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot(),  t.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot(),  t.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    cfg.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
34	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    candidates).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
35	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  numUseWithinUseCfgNode).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  numUseWithinUseCfgNode).traverse(t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  numUseWithinUseCfgNode).traverse(t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    candidates).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
36	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  SIDE_EFFECT_PREDICATE).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  SIDE_EFFECT_PREDICATE).traverse(t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  SIDE_EFFECT_PREDICATE).traverse(t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    candidates).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
37	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    candidates).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot().traverse(candidates.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot().traverse(candidates.getLastChild()));  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getScopeRoot().traverse(candidates.getLastChild()));	  new    NodeTraversal(compiler,    candidates).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
39	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidate).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidate).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidate).traverse(t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    candidates).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
40	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(candidates,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(candidates,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(candidates,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(candidates,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
41	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(candidates,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(candidates,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(candidates,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(candidates,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidateNames).traverse(candidates,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidateNames).traverse(candidates,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidateNames).traverse(candidates,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(candidates,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates.traverse(candidates,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates.traverse(candidates,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates.traverse(candidates,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(candidates,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  candidates,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(candidates,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
45	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  CandidateUtils.traverse(candidates,  t.getScopeRoot().getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  CandidateUtils.traverse(candidates,  t.getScopeRoot().getLastChild()));  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  CandidateUtils.traverse(candidates,  t.getScopeRoot().getLastChild()));	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(candidates,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
46	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
47	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getFirstChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getFirstChild()));  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getFirstChild()));	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getFirstChild()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getFirstChild()));  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getFirstChild()));	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
49	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
50	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()),  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()),  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  t.getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  t.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  t.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
54	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	final  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
56	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates,  t.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates,  t.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates,  t.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
57	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot(),  t.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot(),  t.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot(),  t.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
58	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot(),  t.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot(),  t.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot(),  t.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
59	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getLastChild(),  new  GatherCandiates());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getLastChild(),  new  GatherCandiates());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getLastChild(),  new  GatherCandiates());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
60	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getLastChild(),  compiler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getLastChild(),  compiler);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getLastChild(),  compiler);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
61	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getFirstChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getFirstChild(),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getFirstChild(),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
62	[BUG]  [BUGGY]  if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  candidates);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  candidates);  }  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  candidates);  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
63	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot().getLastChild(),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidates).traverse(t.getScopeRoot().getLastChild(),  compiler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  candidates).traverse(t.getScopeRoot().getLastChild(),  compiler);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  candidates).traverse(t.getScopeRoot().getLastChild(),  compiler);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
65	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  new  GatherCandiates());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  new  GatherCandiates());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  new  GatherCandiates());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
66	[BUG]  [BUGGY]  if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
67	[BUG]  [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
68	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  compiler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  compiler);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  compiler);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
69	[BUG]  [BUGGY]  if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  else  {  candidates  =  Lists.newLinkedList();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  else  {  candidates  =  Lists.newLinkedList();  }  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  else  {  candidates  =  Lists.newLinkedList();  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
70	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidates).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  candidates).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  candidates).traverse(t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
72	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
73	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
74	[BUG]  [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  }  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
75	[BUG]  [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  }  else  {  candidates  =  Lists.newLinkedList();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  }  else  {  candidates  =  Lists.newLinkedList();  }  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  }  else  {  candidates  =  Lists.newLinkedList();  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
77	[BUG]  [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  }  else  {  candidates  =  Lists.newArrayList();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  }  else  {  candidates  =  Lists.newArrayList();  }  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());  }  else  {  candidates  =  Lists.newArrayList();  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
78	[BUG]  [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  }  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates(),  candidates).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates(),  candidates).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  new  GatherCandiates(),  candidates).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
80	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild(),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild(),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
81	[BUG]  [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  }  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates(),  candidates).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates(),  candidates).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  new  GatherCandiates(),  candidates).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
83	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates)).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates)).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates)).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
84	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  candidates,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  candidates,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  candidates,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(cfg,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
85	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(cfg,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(cfg,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  cfg).traverse(cfg,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(cfg,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
86	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(null,  t.getScopeRoot().getLastChild()));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(null,  t.getScopeRoot().getLastChild()));  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(null,  t.getScopeRoot().getLastChild()));	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
87	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot(),  t.getLastChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot(),  t.getLastChild()));  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot(),  t.getLastChild()));	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
88	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild(),  candidates));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild(),  candidates));  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild(),  candidates));	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  cfg,  candidates);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
90	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(candidates.getLastChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(candidates.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(candidates.getLastChild());	  new    NodeTraversal(compiler,    candidates).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
91	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  n).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  n).traverse(t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  n).traverse(t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    candidates).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
92	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfgNode).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  cfgNode).traverse(t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  cfgNode).traverse(t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    candidates).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
93	[BUG]  [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());  }  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
94	[BUG]  [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());  }  else  {  candidates  =  Lists.newLinkedList();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());  }  else  {  candidates  =  Lists.newLinkedList();  }  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());  }  else  {  candidates  =  Lists.newLinkedList();  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
95	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot(),  t.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot(),  t.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot(),  t.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
96	[BUG]  [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());  }  else  {  candidates  =  Lists.newArrayList();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());  }  else  {  candidates  =  Lists.newArrayList();  }  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates  ==  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild());  }  else  {  candidates  =  Lists.newArrayList();  }	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
97	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(candidates,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(candidates,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(candidates,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(candidates,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
98	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getCfgNode()).traverse(candidates,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getCfgNode()).traverse(candidates,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getCfgNode()).traverse(candidates,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(candidates,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
99	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidateCandiates()).traverse(candidates,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidateCandiates()).traverse(candidates,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidateCandiates()).traverse(candidates,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(candidates,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
100	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(candidates,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(candidates,  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(candidates,  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(candidates,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(null,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(null,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  candidates,  new  GatherCandiates()).traverse(null,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
102	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(null,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(null,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  cfg).traverse(null,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
103	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  GatherCandiates());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  GatherCandiates());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates).traverse(t.getScopeRoot(),  GatherCandiates());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
104	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  reachingDef);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  reachingDef);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
105	[BUG]  [BUGGY]  if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  else  {  cfg.process(null,  t.getScopeRoot().getLastChil  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  else  {  cfg.process(null,  t.getScopeRoot().getLastChil  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  else  {  cfg.process(null,  t.getScopeRoot().getLastChil	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
106	[BUG]  [BUGGY]  if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  else  {  cfg.process(null,  t.getScopeRoot().getLastCh  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  else  {  cfg.process(null,  t.getScopeRoot().getLastCh  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  else  {  cfg.process(null,  t.getScopeRoot().getLastCh	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
107	[BUG]  [BUGGY]  if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  else  {  cfg.process(null,  t.getScopeRoot().getLastChild  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  else  {  cfg.process(null,  t.getScopeRoot().getLastChild  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	if(candidates!=  null)  {  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  candidates);  }  else  {  cfg.process(null,  t.getScopeRoot().getLastChild	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates(),  candidates).traverse(t.getScopeRoot(),  cfg.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  NodeTraversal.traverse(compiler,  new  GatherCandiates(),  candidates).traverse(t.getScopeRoot(),  cfg.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	NodeTraversal.traverse(compiler,  new  GatherCandiates(),  candidates).traverse(t.getScopeRoot(),  cfg.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    cfg.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
109	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  candidates)).traverse(t.getScopeRoot(),  cfg.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  candidates)).traverse(t.getScopeRoot(),  cfg.getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  candidates)).traverse(t.getScopeRoot(),  cfg.getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    cfg.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
110	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot(),  t.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot(),  t.getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg.getScopeRoot(),  t.getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    cfg.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
111	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t,  cfg,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t,  cfg,  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t,  cfg,  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(cfg,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
112	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getLastChild(),  candidate);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getLastChild(),  candidate);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot().getLastChild(),  candidate);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(cfg,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
113	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot(),  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
114	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
115	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getFirstChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
116	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild(),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getLastChild(),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
117	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getDepth());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getDepth());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getDepth());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
118	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getImmediateParentNode());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getImmediateParentNode());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getImmediateParentNode());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
119	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
120	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getImplicitReturn());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getImplicitReturn());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getImplicitReturn());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
121	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()),  reachingDef);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()),  reachingDef);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()),  reachingDef);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
122	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot(),  t.getScopeRoot().getLastChild()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot(),  t.getScopeRoot().getLastChild()));  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot(),  t.getScopeRoot().getLastChild()));	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
123	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild(),  reachingDef));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild(),  reachingDef));  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild(),  reachingDef));	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(numUseWithinUseCfgNode(t.getScopeRoot().getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
124	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot().getLastChild  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot().getLastChild  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot().getLastChild	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
125	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot().getLastChil  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot().getLastChil  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	cfg.process(null,  t.getScopeRoot().getFirstChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot().getLastChil	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
126	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot().getLastChil  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot().getLastChil  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot().getLastChil	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
127	[BUG]  [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot().getLastChild  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  cfg.process(null,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot().getLastChild  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	cfg.process(null,  t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScopeRoot().getLastChild	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
128	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  candidate);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  candidate);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getFirstChild(),  candidate);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
129	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(candidates,  t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(candidates,  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(candidates,  t.getScopeRoot().getLastChild(),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(candidates,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
130	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getConstructors()).traverse(candidates,  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getConstructors()).traverse(candidates,  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getConstructors()).traverse(candidates,  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(candidates,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
131	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild(),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
132	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(cfg,  t.getScopeRoot(),  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
133	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot(),  t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
134	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot(),  candidates);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot(),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot(),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
135	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getConstructors()).traverse(t.getScopeRoot(),  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getConstructors()).traverse(t.getScopeRoot(),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getConstructors()).traverse(t.getScopeRoot(),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
136	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot(),  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot(),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  cfg).traverse(t.getScopeRoot(),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
137	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  this).traverse(t.getScopeRoot(),  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  this).traverse(t.getScopeRoot(),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  this).traverse(t.getScopeRoot(),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
138	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getScopeRoot()).traverse(t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    candidates).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
139	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getConstructor()).traverse(t.getScopeRoot().getLastChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getConstructor()).traverse(t.getScopeRoot().getLastChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getConstructor()).traverse(t.getScopeRoot().getLastChild());	  new    NodeTraversal(compiler,    candidates).traverse(t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
140	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg,  candidates);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg,  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg,  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    cfg.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
141	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg,  candidate);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg,  candidate);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg,  candidate);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    cfg.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
142	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg,  candidates.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg,  candidates.size());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot(),  cfg,  candidates.size());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot(),    cfg.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
143	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingDef);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingDef);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),  reachingDef);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
144	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  t.getCfgNode()).traverse(t.getScopeRoot().getLastChild(),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(t.getScopeRoot().getLastChild(),    candidates);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
145	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(null,  t.getScopeRoot().getLastChild(),  candidates);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(null,  t.getScopeRoot().getLastChild(),  candidates);  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(null,  t.getScopeRoot().getLastChild(),  candidates);	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
146	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t,  t.getScopeRoot().getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      Preconditions.checkState(t.getScopeRoot().isFunction());  cfa.process(null,  t.getScopeRoot().getLastChild());  cfg  =  cfa.getCfg();  reachingDef  =  new  MustBeReachingVariableDef(cfg,  t.getScope(),  compiler);  reachingDef.analyze();  candidates  =  Lists.newLinkedList();      [BUGGY]  new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t,  t.getScopeRoot().getFirstChild());  [BUGGY]    t.getScopeRoot().getLastChild());  reachingUses  =  new  MaybeReachingVariableUse(cfg,  t.getScope(),  compiler);  reachingUses.analyze();  for  (Candidate  c  :  candidates)  {  if  (c.canInline())  {  c.inlineVariable();    [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	148	149	3	replace	new  NodeTraversal(compiler,  new  GatherCandiates()).traverse(t,  t.getScopeRoot().getFirstChild());	  new    NodeTraversal(compiler,    new    GatherCandiates()).traverse(null,    t.getScopeRoot().getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
