bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  this);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  this);	  return;    //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  c);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getCurrentNode());	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getScope());	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourceFile());	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceReference());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceReference());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourceReference());	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  cfa.enterScope(t.getScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  cfa.enterScope(t.getScope());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t.getScope());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
8	[BUG]  [BUGGY]  Predicate  c  =  t.getScope().getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Predicate  c  =  t.getScope().getCurrentNode();  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getScope().getCurrentNode();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentNode();  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  cfa  =  t.getScope().getCurrentNode();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Context.reportCodeChange();  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Context.reportCodeChange();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  cfa.enterScope(t);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  cfa.enterScope(t);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
12	[BUG]  [BUGGY]  Predicate  c  =  t.getScope();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Predicate  c  =  t.getScope();  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getScope();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
13	[BUG]  [BUGGY]  inlineGlobalScope(t.getScope(),  cfa);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  inlineGlobalScope(t.getScope(),  cfa);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t.getScope(),  cfa);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c,  this);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidates);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidates);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  candidates);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  def);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  def);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidate);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidate);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  candidate);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope());	  Throwables.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.checkState(!t.inGlobalScope());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope());	  Throwables.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.checkState(t.inGlobalScope(),  numUseWithinCfgNode);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  numUseWithinCfgNode);	  Throwables.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount());	  Throwables.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.checkState(t.inGlobalScope(),  numUseWithinUseCfgNode);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  numUseWithinUseCfgNode);	  Throwables.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
26	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope());	  Throwables.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  this);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  def);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  def);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  def);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  def);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  null);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  null);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  candidate);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  candidate);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  candidate);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
33	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
34	[BUG]  [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarName();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarName();  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  varName  =  t.getScope().getVarName();	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
35	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(t.getScope()));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalArgumentException( " ".equals(t.getScope()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
36	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(t.getScope()));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(t.getScope()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
37	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(t.getScope().getVarCount()));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalArgumentException( " ".equals(t.getScope().getVarCount()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
39	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(t.getScope().getVarCount()));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(t.getScope().getVarCount()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
40	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(t.getScope().getVarCount()));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalStateException( " ".equals(t.getScope().getVarCount()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
41	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(t.getScope()));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(t.getScope()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
42	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(t.getScope()));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalStateException( " ".equals(t.getScope()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
43	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(t.getScope().getName()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(t.getScope().getName()));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(t.getScope().getName()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getModule());	  throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
45	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  AssertionFailedError(t.getMessage());	  throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
46	[BUG]  [BUGGY]  AssertionFailedError  t  =  t.getMessage();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  AssertionFailedError  t  =  t.getMessage();  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	AssertionFailedError  t  =  t.getMessage();	  throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
47	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfg);	  throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
48	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfa);	  throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
49	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  c);	  throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
50	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ");  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " ");	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
51	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ".equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ".equals(t.getScope()));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " ".equals(t.getScope()));	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
52	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException( " "),  t.getScope());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  UnsupportedOperationException( " "),  t.getScope());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  UnsupportedOperationException( " "),  t.getScope());	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
53	[BUG]  [BUGGY]  t  =  new  UnsupportedOperationException( " ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  t  =  new  UnsupportedOperationException( " ");  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t  =  new  UnsupportedOperationException( " ");	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
54	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies());	  Throwables.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
55	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.checkState(t.inGlobalScope()  +  1);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  +  1);	  Throwables.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  t);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlineNewDependencies);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  t);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  t);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  this,  t);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  this,  t);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
61	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
62	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
63	[BUG]  [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
64	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  MISSING_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  MISSING_EFFECT_PREDICATE));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinUseCfgNode,  MISSING_EFFECT_PREDICATE));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
65	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode);	  throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
66	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode);	  throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
67	[BUG]  [BUGGY]  throw  new  AssertionFailedException(t.getMessage());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  AssertionFailedException(t.getMessage());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedException(t.getMessage());	  throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
68	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  n);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  n);	  throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  def);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  def);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineNewDependencies);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  reachingUses);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  spreadingUses);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  spreadingUses);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  spreadingUses);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode);	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
75	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  MISSING_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  MISSING_EFFECT_PREDICATE));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  MISSING_EFFECT_PREDICATE));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
76	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
77	[BUG]  [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  escaped.  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	//  Don't  even  brother.  All  global  variables  are  likely  escaped.	  return;    //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
78	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(t,  cfa);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeUtil.copyCurrentScope(t,  cfa);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeUtil.copyCurrentScope(t,  cfa);	  return;    //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
79	[BUG]  [BUGGY]  cfa.enterGlobalScope(t);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  cfa.enterGlobalScope(t);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterGlobalScope(t);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Preconditions.checkState(!t.inGlobalScope());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Preconditions.checkState(!t.inGlobalScope());	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
81	[BUG]  [BUGGY]  inlineGlobalScope(t,  cfa);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  inlineGlobalScope(t,  cfa);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t,  cfa);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
82	[BUG]  [BUGGY]  t.report(JSError.make(t,  varName,  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  t.report(JSError.make(t,  varName,  SIDE_EFFECT_PREDICATE));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  varName,  SIDE_EFFECT_PREDICATE));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
83	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVarCount();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVarCount();  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVarCount();	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
84	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
85	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE));  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE));	  throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingUses);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  reachingUses);	  NodeTraversal.traverse(compiler,    t,    this);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
87	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getMessage());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getMessage());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getMessage());	  throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
88	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  e.getMessage());	  throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
89	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  4),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  4),  numUseWithinUseCfgNode);  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  4),  numUseWithinUseCfgNode);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t);  return;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  t);  return;  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t);  return;	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
91	[BUG]  [BUGGY]  cfa.enterGlobalScope();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  cfa.enterGlobalScope();  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterGlobalScope();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Action());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Action());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  Action());	  NodeTraversal.traverse(compiler,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
93	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope());  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getScope());	  Throwables.checkState(t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
94	[BUG]  [BUGGY]  Throwable  t  =  t.getCurrentToken();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {    [BUGGY]  Throwable  t  =  t.getCurrentToken();  [BUGGY]    }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwable  t  =  t.getCurrentToken();	  return;    //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
